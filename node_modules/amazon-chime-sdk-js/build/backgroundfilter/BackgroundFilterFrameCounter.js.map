{"version":3,"file":"BackgroundFilterFrameCounter.js","sourceRoot":"","sources":["../../src/backgroundfilter/BackgroundFilterFrameCounter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport BackgroundFilterVideoFrameProcessorDelegate from './BackgroundFilterVideoFrameProcessorDelegate';\n\nconst FILTER_DURATION_FACTOR = 0.8;\n\n/**\n * The frame counter tracks frame rates of video and segmentation.\n */\n/** @internal */\nexport default class BackgroundFilterFrameCounter {\n  private _processingFilter: boolean = true;\n\n  private lastReportedEventTimestamp: number = 0;\n  private lastFilterCompleteTimestamp: number = 0;\n  private filterTotalMillis: number = 0;\n\n  private filterCount: number = 0;\n  private framerate: number = 0;\n  private filterDurationNotifyMillis = 0;\n\n  constructor(\n    private delegate: BackgroundFilterVideoFrameProcessorDelegate,\n    private reportingPeriodMillis: number,\n    private filterCPUUtilization: number,\n    private logger: Logger\n  ) {\n    this.setSegmentationDuration();\n  }\n\n  /**\n   * Report events once per period.\n   */\n  private reportEvent(timestamp: number): void {\n    const timeDiff = timestamp - this.lastReportedEventTimestamp;\n    if (timeDiff >= this.reportingPeriodMillis) {\n      const currentFilterCount = this.filterCount;\n      const currentFilterTotalMillis = this.filterTotalMillis;\n\n      this.filterCount = 0;\n      this.filterTotalMillis = 0;\n      this.lastReportedEventTimestamp = timestamp;\n\n      // Do not send notification unless a valid framerate or segment count is set.\n      if (this.framerate === 0 || currentFilterCount === 0) {\n        return;\n      }\n\n      const avgFilterDurationMillis = Math.round(currentFilterTotalMillis / currentFilterCount);\n      const framesDropped = Math.round(this.framerate * (timeDiff / 1000)) - currentFilterCount;\n      const cpuUtilization = Math.round((100 * currentFilterTotalMillis) / timeDiff);\n\n      if (avgFilterDurationMillis >= this.filterDurationNotifyMillis) {\n        this.delegate.filterFrameDurationHigh({\n          framesDropped,\n          avgFilterDurationMillis,\n          framerate: this.framerate,\n          periodMillis: timeDiff,\n        });\n      }\n\n      if (cpuUtilization >= this.filterCPUUtilization) {\n        this.delegate.filterCPUUtilizationHigh({\n          cpuUtilization,\n          filterMillis: currentFilterTotalMillis,\n          periodMillis: timeDiff,\n        });\n      }\n    }\n  }\n\n  private setSegmentationDuration(): void {\n    // allow filtering to take up to 80% of the expected frame duration\n    this.filterDurationNotifyMillis = Math.round((1000 / this.framerate) * FILTER_DURATION_FACTOR);\n  }\n\n  frameReceived(framerate: number): void {\n    if (framerate !== this.framerate) {\n      this.framerate = framerate;\n      this.logger.info(`frame counter setting frame rate to ${this.framerate}`);\n      this.setSegmentationDuration();\n    }\n    const timestamp = Date.now();\n    this.reportEvent(timestamp);\n  }\n\n  filterSubmitted(): void {\n    this._processingFilter = true;\n    this.lastFilterCompleteTimestamp = Date.now();\n  }\n\n  filterComplete(): void {\n    this.filterTotalMillis += Date.now() - this.lastFilterCompleteTimestamp;\n    this._processingFilter = false;\n    this.filterCount++;\n  }\n\n  get processingSegment(): boolean {\n    return this._processingFilter;\n  }\n}\n"]}