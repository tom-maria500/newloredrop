{"version":3,"file":"BackgroundFilterVideoFrameProcessor.js","sourceRoot":"","sources":["../../src/backgroundfilter/BackgroundFilterVideoFrameProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { loadWorker } from '../../libs/voicefocus/loader';\nimport { supportsWASM, supportsWorker } from '../../libs/voicefocus/support';\nimport { AssetSpec } from '../../libs/voicefocus/voicefocus';\nimport ModelSpecBuilder from '../backgroundblurprocessor/ModelSpecBuilder';\nimport BackgroundFilterPaths from '../backgroundfilter/BackgroundFilterPaths';\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport Logger from '../logger/Logger';\nimport ModelSpec from '../modelspec/ModelSpec';\nimport Versioning from '../versioning/Versioning';\nimport BackgroundFilterOptions from './BackgroundFilterOptions';\nimport BackgroundFilterSpec from './BackgroundFilterSpec';\n\n/** @internal */\nconst CREATE_DEFAULT_MODEL_SPEC = (): ModelSpec =>\n  ModelSpecBuilder.builder().withSelfieSegmentationDefaults().build();\n\n/** @internal */\nconst DEFAULT_CDN = 'https://static.sdkassets.chime.aws';\n\n/** @internal */\nconst DEFAULT_PATHS: BackgroundFilterPaths = {\n  worker: `${DEFAULT_CDN}/bgblur/workers/worker.js`,\n  wasm: `${DEFAULT_CDN}/bgblur/wasm/_cwt-wasm.wasm`,\n  simd: `${DEFAULT_CDN}/bgblur/wasm/_cwt-wasm-simd.wasm`,\n};\n\nexport default class BackgroundFilterVideoFrameProcessor {\n  /**\n   * Based on the SDK version, return an asset group.\n   *\n   * @returns the default asset spec, based on the SDK version.\n   */\n  private static defaultAssetSpec(): AssetSpec {\n    const version = Versioning.sdkVersionSemVer;\n\n    return {\n      assetGroup: `sdk-${version.major}.${version.minor}`,\n    };\n  }\n\n  /**\n   * Set the given parameters to the url. Existing parameters in the url are preserved.\n   * If duplicate parameters exist, they are overwritten, so it's safe to call this method multiple\n   * times on the same url.\n   *\n   * @param url the initial url, can include query parameters\n   * @param queryParams the query parameters to set\n   * @returns a new url with the given query parameters.\n   */\n  private static createUrlWithParams(url: string, queryParams: { [key: string]: string }): string {\n    const u = new URL(url);\n    const keys = Object.keys(queryParams);\n    for (const key of keys) {\n      if (queryParams[key] !== undefined) {\n        u.searchParams.set(key, queryParams[key]);\n      }\n    }\n\n    return u.toString();\n  }\n\n  /**\n   * Based on the spec that is passed in set defaults for spec\n   * @param spec the spec that was passed in\n   * @returns An updated spec with defaults set\n   */\n  protected static resolveSpec(spec?: BackgroundFilterSpec): BackgroundFilterSpec {\n    const {\n      paths = DEFAULT_PATHS,\n      model = CREATE_DEFAULT_MODEL_SPEC(),\n      assetGroup = this.defaultAssetSpec().assetGroup,\n      revisionID = this.defaultAssetSpec().revisionID,\n    } = spec || {};\n\n    const params = {\n      assetGroup,\n      revisionID,\n      sdk: encodeURIComponent(Versioning.sdkVersion),\n      ua: encodeURIComponent(Versioning.sdkUserAgentLowResolution),\n    };\n\n    paths.worker = this.createUrlWithParams(paths.worker, params);\n    paths.wasm = this.createUrlWithParams(paths.wasm, params);\n    paths.simd = this.createUrlWithParams(paths.simd, params);\n    model.path = this.createUrlWithParams(model.path, params);\n\n    return {\n      paths,\n      model,\n      assetGroup,\n      revisionID,\n    };\n  }\n\n  /**\n   * Based on the options that are passed in set defaults for options\n   * @param options  the options that are passed in\n   * @returns An updated set of options with defaults set\n   */\n  protected static resolveOptions(options?: BackgroundFilterOptions): BackgroundFilterOptions {\n    if (!options.reportingPeriodMillis) {\n      options.reportingPeriodMillis = 1000;\n    }\n\n    const DEFAULT_FILTER_CPU_UTILIZATION = 30;\n    if (!options.filterCPUUtilization) {\n      options.filterCPUUtilization = DEFAULT_FILTER_CPU_UTILIZATION;\n    } else if (options.filterCPUUtilization < 0 || options.filterCPUUtilization > 100) {\n      options.logger.warn(\n        `filterCPUUtilization must be set to a range between 0 and 100 percent. Falling back to default of ${DEFAULT_FILTER_CPU_UTILIZATION} percent`\n      );\n      options.filterCPUUtilization = DEFAULT_FILTER_CPU_UTILIZATION;\n    }\n    return options;\n  }\n\n  /**\n   * This method will detect the environment in which it is being used and determine if background\n   * blur/replacement can be used.\n   * @param spec The {@link BackgroundBlurSpec} spec that will be used to initialize assets\n   * @param options options such as logger\n   * @returns a boolean promise that will resolve to true if supported and false if not\n   */\n  static isSupported(spec?: BackgroundFilterSpec, options?: { logger?: Logger }): Promise<boolean> {\n    const { logger } = options;\n\n    // could not figure out how to remove globalThis to test failure case\n    /* istanbul ignore next */\n    if (typeof globalThis === 'undefined') {\n      logger.info('Browser does not have globalThis.');\n      return Promise.resolve(false);\n    }\n\n    const browser = new DefaultBrowserBehavior();\n    if (!browser.supportsBackgroundFilter()) {\n      logger.info('Browser is not supported.');\n      return Promise.resolve(false);\n    }\n\n    if (!supportsWASM(globalThis, logger)) {\n      logger.info('Browser does not support WASM.');\n      return Promise.resolve(false);\n    }\n    return this.supportsBackgroundFilter(globalThis, spec, logger);\n  }\n\n  private static async supportsBackgroundFilter(\n    /* istanbul ignore next */\n    scope: { Worker?: typeof Worker } = globalThis,\n    spec?: BackgroundFilterSpec,\n    logger?: Logger\n  ): Promise<boolean> {\n    if (!supportsWorker(scope, logger)) {\n      logger.info('Browser does not support web workers.');\n      return false;\n    }\n\n    // Use the actual worker path -- it's only 20KB, and it'll get the cache warm.\n    const workerURL = spec.paths.worker;\n    try {\n      const worker = await loadWorker(workerURL, 'BackgroundFilterWorker', {}, null);\n      try {\n        worker.terminate();\n      } catch (e) {\n        logger.info(`Failed to terminate worker. ${e.message}`);\n      }\n      return true;\n    } catch (e) {\n      logger.info(`Failed to fetch and instantiate test worker ${e.message}`);\n      return false;\n    }\n  }\n}\n"]}