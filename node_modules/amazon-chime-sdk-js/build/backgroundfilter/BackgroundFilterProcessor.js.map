{"version":3,"file":"BackgroundFilterProcessor.js","sourceRoot":"","sources":["../../src/backgroundfilter/BackgroundFilterProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { loadWorker } from '../../libs/voicefocus/loader';\nimport BackgroundFilterOptions from '../backgroundfilter/BackgroundFilterOptions';\nimport BackgroundFilterVideoFrameProcessorObserver from '../backgroundfilter/BackgroundFilterVideoFrameProcessorObserver';\nimport EventController from '../eventcontroller/EventController';\nimport Logger from '../logger/Logger';\nimport CanvasVideoFrameBuffer from '../videoframeprocessor/CanvasVideoFrameBuffer';\nimport VideoFrameBuffer from '../videoframeprocessor/VideoFrameBuffer';\nimport BackgroundFilterFrameCounter from './BackgroundFilterFrameCounter';\nimport BackgroundFilterSpec from './BackgroundFilterSpec';\nimport BackgroundFilterVideoFrameProcessorDelegate from './BackgroundFilterVideoFrameProcessorDelegate';\n/** @internal */\nclass DeferredObservable<T> {\n  /** Access the last-resolved value of next()\n   */\n  value: T | undefined = undefined;\n\n  private promise?: Promise<T>;\n  private resolve: (value: T) => void = null;\n\n  /** Create a promise that resolves once next() is called\n   */\n  whenNext(): Promise<T> {\n    /* istanbul ignore else */\n    if (!this.promise) {\n      // externally-resolvable promise\n      this.promise = new Promise(resolve => (this.resolve = resolve));\n    }\n    return this.promise;\n  }\n\n  /** Update the value and resolve\n   */\n  next(value: T): void {\n    // store the value, for sync access\n    this.value = value;\n    // resolve the promise so anyone awaiting whenNext resolves\n    this.resolve(value);\n    // delete the promise so future whenNext calls get a new promise\n    delete this.promise;\n  }\n}\n\n/**\n * The [[BackgroundFilterProcessor]] uses WASM and TensorFlow Lite to apply changes to the\n * background image.\n */\n/** @internal */\nexport default abstract class BackgroundFilterProcessor {\n  protected targetCanvas: HTMLCanvasElement = document.createElement('canvas') as HTMLCanvasElement;\n  protected canvasCtx = this.targetCanvas.getContext('2d');\n  protected replacementImage: HTMLImageElement;\n  protected filterType: string;\n\n  protected canvasVideoFrameBuffer = new CanvasVideoFrameBuffer(this.targetCanvas);\n  protected mask$ = new DeferredObservable<ImageData>();\n  protected sourceWidth = 0;\n  protected sourceHeight = 0;\n  protected frameNumber = 0;\n  protected videoFramesPerFilterUpdate = 1;\n\n  protected spec: BackgroundFilterSpec;\n  protected cpuMonitor: BackgroundFilterMonitor;\n  protected worker: Worker;\n  protected logger: Logger;\n  protected delegate: BackgroundFilterVideoFrameProcessorDelegate;\n\n  protected initWorkerPromise = BackgroundFilterProcessor.createWorkerPromise<{\n    message?: string;\n  }>();\n  protected loadModelPromise = BackgroundFilterProcessor.createWorkerPromise<{\n    message?: string;\n  }>();\n\n  protected scaledCanvas: HTMLCanvasElement;\n  protected frameCounter: BackgroundFilterFrameCounter;\n  protected modelInitialized = false;\n  protected eventController?: EventController | undefined;\n  private destroyed = false;\n\n  protected static createWorkerPromise<T>(): {\n    resolve: (value: T) => void;\n    reject: (value: Error) => void;\n    promise: Promise<T>;\n  } {\n    const resolver: {\n      resolve: (value: T) => void;\n      reject: (value: Error) => void;\n      promise: Promise<T>;\n    } = { resolve: null, reject: null, promise: null };\n    resolver.promise = new Promise<T>((resolve, reject) => {\n      resolver.resolve = resolve;\n      resolver.reject = reject;\n    });\n    return resolver;\n  }\n\n  /** Check if the input spec are not null\n   */\n  protected validateSpec(spec: BackgroundFilterSpec): void {\n    if (!spec) {\n      throw new Error('processor has null spec');\n    }\n\n    if (!spec.model) {\n      throw new Error('processor spec has null model');\n    }\n\n    if (!spec.paths) {\n      throw new Error('processor spec has null paths');\n    }\n  }\n\n  protected validateOptions(options: BackgroundFilterOptions): void {\n    if (!options) {\n      throw new Error('processor has null options');\n    }\n\n    if (!options.logger) {\n      throw new Error('processor has null options - logger');\n    }\n\n    if (!options.reportingPeriodMillis) {\n      throw new Error('processor has null options - reportingPeriodMillis');\n    }\n\n    if (!options.filterCPUUtilization) {\n      throw new Error('processor has null options - filterCPUUtilization');\n    }\n  }\n\n  abstract initOnFirstExecution(): void;\n\n  constructor(\n    filterType: string,\n    spec: BackgroundFilterSpec,\n    options: BackgroundFilterOptions,\n    delegate: BackgroundFilterVideoFrameProcessorDelegate,\n    eventController?: EventController | undefined\n  ) {\n    this.filterType = filterType;\n    this.validateSpec(spec);\n    this.validateOptions(options);\n    this.spec = spec;\n    this.logger = options.logger;\n    this.delegate = delegate;\n    this.initCPUMonitor(options);\n    this.eventController = eventController;\n  }\n\n  initCPUMonitor(options: BackgroundFilterOptions): void {\n    const CPU_MONITORING_PERIOD_MILLIS = 5000;\n    const MAX_SEGMENTATION_SKIP_RATE = 10;\n    const MIN_SEGMENTATION_SKIP_RATE = 1;\n    this.videoFramesPerFilterUpdate = 1;\n    this.frameCounter = new BackgroundFilterFrameCounter(\n      this.delegate,\n      options.reportingPeriodMillis,\n      options.filterCPUUtilization,\n      this.logger\n    );\n    this.cpuMonitor = new BackgroundFilterMonitor(CPU_MONITORING_PERIOD_MILLIS, {\n      reduceCPUUtilization: () => {\n        this.updateVideoFramesPerFilterUpdate(\n          Math.min(this.videoFramesPerFilterUpdate + 1, MAX_SEGMENTATION_SKIP_RATE)\n        );\n      },\n      increaseCPUUtilization: () => {\n        this.updateVideoFramesPerFilterUpdate(\n          Math.max(this.videoFramesPerFilterUpdate - 1, MIN_SEGMENTATION_SKIP_RATE)\n        );\n      },\n    });\n    this.delegate.addObserver(this.cpuMonitor);\n  }\n  /** Converts a value to a JSON string\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected stringify(value: any): string {\n    return JSON.stringify(value, null, 2);\n  }\n\n  /**\n   * Sends a message to worker and resolves promise in response to worker's initialize event\n   */\n  handleInitialize(msg: { payload: number }): void {\n    this.logger.info(`received initialize message: ${this.stringify(msg)}`);\n    if (!msg.payload) {\n      this.logger.error('failed to initialize module');\n      this.initWorkerPromise.reject(new Error('failed to initialize the module'));\n      return;\n    }\n    const model = this.spec.model;\n    this.worker.postMessage({\n      msg: 'loadModel',\n      payload: {\n        modelUrl: model.path,\n        inputHeight: model.input.height,\n        inputWidth: model.input.width,\n        inputChannels: 4,\n        modelRangeMin: model.input.range[0],\n        modelRangeMax: model.input.range[1],\n        blurPixels: 0,\n      },\n    });\n    this.initWorkerPromise.resolve({});\n  }\n\n  /**\n   * Resolves promise in response to worker's loadModel event\n   */\n  handleLoadModel(msg: { payload: number }): void {\n    this.logger.info(`received load model message: ${this.stringify(msg)}`);\n    if (msg.payload !== 2) {\n      this.logger.error('failed to load model! status: ' + msg.payload);\n      /** Rejects model promise\n       */\n      this.loadModelPromise.reject(new Error('failed to load model! status: ' + msg.payload));\n      return;\n    }\n    this.modelInitialized = true;\n    this.loadModelPromise.resolve({});\n  }\n\n  /** Updates the payload output value in response to worker's predict event\n   */\n  handlePredict(msg: { payload: { output: ImageData } }): void {\n    this.mask$.next(msg.payload.output as ImageData);\n  }\n\n  /**\n   * This method will handle the asynchronous messaging between the main JS thread\n   * and the worker thread.\n   * @param evt An event that was sent from the worker to the JS thread.\n   * @returns\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected handleWorkerEvent(evt: MessageEvent<any>): void {\n    const msg = evt.data;\n    switch (msg.msg) {\n      case 'initialize':\n        this.handleInitialize(msg);\n        break;\n      case 'loadModel':\n        this.handleLoadModel(msg);\n        break;\n      case 'predict':\n        this.handlePredict(msg);\n        break;\n      default:\n        this.logger.info(`unexpected event msg: ${this.stringify(msg)}`);\n        break;\n    }\n  }\n\n  /**\n   * This method initializes all of the resource necessary to processs background filter. It returns\n   * a promise and resolves or rejects the promise once the initialization is complete.\n   * @returns\n   * @throws An error will be thrown\n   */\n  async loadAssets(): Promise<void> {\n    this.logger.info('start initializing the processor');\n    try {\n      this.worker = await loadWorker(this.spec.paths.worker, 'BackgroundFilterWorker', {}, null);\n      this.worker.addEventListener('message', ev => this.handleWorkerEvent(ev));\n\n      this.worker.postMessage({\n        msg: 'initialize',\n        payload: {\n          wasmPath: this.spec.paths.wasm,\n          simdPath: this.spec.paths.simd,\n        },\n      });\n\n      await this.initWorkerPromise.promise;\n      this.logger.info(`successfully initialized the ${this.filterType} worker`);\n\n      await this.loadModelPromise.promise;\n      this.logger.info(`successfully loaded ${this.filterType} worker segmentation model`);\n    } catch (error) {\n      throw new Error(\n        `could not initialize the ${this.filterType} video frame processor due to '${error.message}'`\n      );\n    }\n    this.logger.info(`successfully initialized the ${this.filterType} processor`);\n  }\n\n  /**\n   * Processes the VideoFrameBuffer by applying a segmentation mask and replacing the background.\n   * @param buffers object that contains the canvas element that will be used to obtain the image data to process\n   * @returns the updated buffer that contains the image with the background replaced.\n   */\n  async process(buffers: VideoFrameBuffer[]): Promise<VideoFrameBuffer[]> {\n    if (this.destroyed) {\n      return buffers;\n    }\n\n    this.frameCounter.frameReceived(buffers[0].framerate);\n    this.cpuMonitor.frameReceived();\n    const inputCanvas = buffers[0].asCanvasElement() as HTMLCanvasElement;\n    if (!inputCanvas) {\n      return buffers;\n    }\n\n    if (!this.modelInitialized) {\n      // return existing buffer, if any\n      buffers[0] = this.canvasVideoFrameBuffer;\n      return buffers;\n    }\n\n    const frameWidth = inputCanvas.width;\n    const frameHeight = inputCanvas.height;\n    if (frameWidth === 0 || frameHeight === 0) {\n      return buffers;\n    }\n\n    // on first execution of process the source width will be zero\n    if (this.sourceWidth === 0) {\n      this.sourceWidth = frameWidth;\n      this.sourceHeight = frameHeight;\n\n      // update target canvas size to match the frame size\n      this.targetCanvas.width = this.sourceWidth;\n      this.targetCanvas.height = this.sourceHeight;\n\n      this.logger.info(`${this.filterType} source width: ${this.sourceWidth}`);\n      this.logger.info(`${this.filterType} source height: ${this.sourceHeight}`);\n\n      this.initOnFirstExecution();\n    }\n\n    if (this.sourceWidth !== frameWidth || this.sourceHeight !== frameHeight) {\n      this.sourceWidth = frameWidth;\n      this.sourceHeight = frameHeight;\n\n      // update target canvas size to match the frame size\n      this.targetCanvas.width = this.sourceWidth;\n      this.targetCanvas.height = this.sourceHeight;\n    }\n\n    try {\n      this.frameCounter.filterSubmitted();\n      let mask = this.mask$.value;\n\n      const hscale = this.spec.model.input.width / inputCanvas.width;\n      const vscale = this.spec.model.input.height / inputCanvas.height;\n\n      if (this.scaledCanvas === undefined) {\n        this.scaledCanvas = document.createElement('canvas');\n        this.scaledCanvas.width = this.spec.model.input.width;\n        this.scaledCanvas.height = this.spec.model.input.height;\n      }\n\n      const scaledCtx = this.scaledCanvas.getContext('2d');\n      scaledCtx.save();\n      scaledCtx.scale(hscale, vscale);\n      scaledCtx.drawImage(inputCanvas, 0, 0);\n      scaledCtx.restore();\n\n      const imageData = scaledCtx.getImageData(\n        0,\n        0,\n        this.scaledCanvas.width,\n        this.scaledCanvas.height\n      );\n\n      // update the filter mask based on the filter update rate\n      if (this.frameNumber % this.videoFramesPerFilterUpdate === 0) {\n        // process frame...\n        const maskPromise = this.mask$.whenNext();\n        this.worker.postMessage({ msg: 'predict', payload: imageData }, [imageData.data.buffer]);\n        mask = await maskPromise;\n      }\n      // It's possible that while waiting for the predict to complete the processor was destroyed.\n      // adding a destroyed check here to ensure the implementation of drawImageWithMask does not throw\n      // an error due to destroyed processor.\n      if (!this.destroyed) {\n        this.drawImageWithMask(inputCanvas, mask);\n      }\n    } catch (error) {\n      this.logger.error(`could not process ${this.filterType} frame buffer due to ${error}`);\n      return buffers;\n    } finally {\n      this.frameCounter.filterComplete();\n      this.frameNumber++;\n    }\n\n    buffers[0] = this.canvasVideoFrameBuffer;\n\n    return buffers;\n  }\n\n  protected updateVideoFramesPerFilterUpdate(newRate: number): void {\n    if (newRate !== this.videoFramesPerFilterUpdate) {\n      this.videoFramesPerFilterUpdate = newRate;\n      this.logger.info(\n        `Adjusting filter rate to compensate for CPU utilization. ` +\n          `Filter rate is ${this.videoFramesPerFilterUpdate} video frames per filter.`\n      );\n    }\n  }\n\n  /**\n   * Clean up processor resources\n   */\n  async destroy(): Promise<void> {\n    this.destroyed = true;\n    this.delegate.removeObserver(this.cpuMonitor);\n    this.canvasVideoFrameBuffer.destroy();\n    this.worker?.postMessage({ msg: 'destroy' });\n    this.worker?.postMessage({ msg: 'stop' });\n    this.targetCanvas?.remove();\n    this.targetCanvas = undefined;\n    this.scaledCanvas?.remove();\n    this.scaledCanvas = undefined;\n    this.logger.info(`${this.filterType} frame process destroyed`);\n  }\n\n  /**\n   * Draw image with mask\n   */\n  abstract drawImageWithMask(inputCanvas: HTMLCanvasElement, mask: ImageData): void;\n}\n\n/** @internal */\ninterface MonitorCpuObserver {\n  reduceCPUUtilization: () => void;\n  increaseCPUUtilization: () => void;\n}\n\n/** @internal */\nexport class BackgroundFilterMonitor implements BackgroundFilterVideoFrameProcessorObserver {\n  private lastCPUChangeTimestamp: number = 0;\n  constructor(private monitoringPeriodMillis: number, private observer: MonitorCpuObserver) {}\n\n  filterCPUUtilizationHigh(): void {\n    const timestamp = Date.now();\n    // Allow some time to pass before we check CPU utilization.\n    if (timestamp - this.lastCPUChangeTimestamp >= this.monitoringPeriodMillis) {\n      this.lastCPUChangeTimestamp = timestamp;\n      this.observer.reduceCPUUtilization();\n    }\n  }\n\n  frameReceived(): void {\n    const timestamp = Date.now();\n    // If a enough time has passed, reset the processor and continue to monitor\n    if (timestamp - this.lastCPUChangeTimestamp >= this.monitoringPeriodMillis * 2) {\n      this.lastCPUChangeTimestamp = timestamp;\n      this.observer.increaseCPUUtilization();\n    }\n  }\n}\n"]}