{"version":3,"file":"BackgroundFilterVideoFrameProcessorDelegate.js","sourceRoot":"","sources":["../../src/backgroundfilter/BackgroundFilterVideoFrameProcessorDelegate.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAOtC;;;GAGG;AACH,gBAAgB;AAChB,MAAqB,2CAA2C;IAAhE;QACY,cAAS,GAAqD,IAAI,GAAG,EAAE,CAAC;IAkCpF,CAAC;IAhCC;;;OAGG;IACH,WAAW,CAAC,QAAqD;QAC/D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,QAAqD;QAClE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,uBAAuB,CAAC,KAAmC;;QACzD,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACrC,MAAA,QAAQ,CAAC,uBAAuB,0CAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SACzD;IACH,CAAC;IAED,wBAAwB,CAAC,KAAoC;;QAC3D,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACrC,MAAA,QAAQ,CAAC,wBAAwB,0CAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC1D;IACH,CAAC;CACF;AAnCD,8DAmCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BackgroundFilterVideoFrameProcessorObserver, {\n  FilterCPUUtilizationHighEvent,\n  FilterFrameDurationHighEvent,\n} from './BackgroundFilterVideoFrameProcessorObserver';\n\n/**\n * This class adds the functionality to allow for a set of unique observers to be added to the\n * video frame processor.\n */\n/** @internal */\nexport default class BackgroundFilterVideoFrameProcessorDelegate {\n  protected observers: Set<BackgroundFilterVideoFrameProcessorObserver> = new Set();\n\n  /**\n   * Add an observer to the unique set. If a duplicate observer cannot be added.\n   * @param observer An implementation of the observer interface.\n   */\n  addObserver(observer: BackgroundFilterVideoFrameProcessorObserver): void {\n    this.observers.add(observer);\n  }\n\n  /**\n   * Remove the observer from the set of observers.\n   * @param observer An implementation of the observer interface.\n   */\n  removeObserver(observer: BackgroundFilterVideoFrameProcessorObserver): void {\n    this.observers.delete(observer);\n  }\n\n  /**\n   * Call the observer method with the event information. See [[BackgroundFilterVideoFrameProcessorObserver]]\n   * for detailed info on this event.\n   * @param event\n   */\n  filterFrameDurationHigh(event: FilterFrameDurationHighEvent): void {\n    for (const observer of this.observers) {\n      observer.filterFrameDurationHigh?.call(observer, event);\n    }\n  }\n\n  filterCPUUtilizationHigh(event: FilterCPUUtilizationHighEvent): void {\n    for (const observer of this.observers) {\n      observer.filterCPUUtilizationHigh?.call(observer, event);\n    }\n  }\n}\n"]}