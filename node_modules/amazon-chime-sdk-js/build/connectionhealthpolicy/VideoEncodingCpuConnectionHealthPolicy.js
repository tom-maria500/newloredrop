"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseConnectionHealthPolicy_1 = __importDefault(require("./BaseConnectionHealthPolicy"));
const VideoEncodingConnectionHealthPolicyName_1 = __importDefault(require("./VideoEncodingConnectionHealthPolicyName"));
class VideoEncodingCpuConnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {
    constructor(configuration, data) {
        super(configuration, data, VideoEncodingConnectionHealthPolicyName_1.default.VideoEncodingCpuHealth);
        this.consecutiveHighEncodeCpuCnt = 0;
        this.consecutiveHighEncodeCpuThreshold = configuration.consecutiveHighEncodeCpuThreshold;
        this.highEncodeCpuMsThreshold = configuration.highEncodeCpuMsThreshold;
        this.highEncodeCpuMsPerFrameThreshold = configuration.highEncodeCpuMsPerFrameThreshold;
    }
    health() {
        // Checking both per-frame and total encode time as we do not want video codec fallback in two conditions:
        // 1. High per-frame encode time with low framerate (e.g., high resolution, low framerate content share)
        // 2. High framerate with low per-frame encode time (e.g., high framerate SVC)
        const videoEncodingTimeIsHigh = this.currentData.videoEncodingTimeInMs >= this.highEncodeCpuMsThreshold &&
            this.currentData.videoEncodingTimePerFrameInMs >= this.highEncodeCpuMsPerFrameThreshold;
        const cpuUsageIsHigh = !this.currentData.isVideoEncoderHardware &&
            (videoEncodingTimeIsHigh || this.currentData.cpuLimitationDuration > 0);
        if (cpuUsageIsHigh) {
            this.consecutiveHighEncodeCpuCnt++;
            if (this.consecutiveHighEncodeCpuCnt > this.consecutiveHighEncodeCpuThreshold) {
                this.consecutiveHighEncodeCpuCnt = 0;
                return this.minimumHealth();
            }
        }
        else {
            this.consecutiveHighEncodeCpuCnt = 0;
        }
        return this.maximumHealth();
    }
}
exports.default = VideoEncodingCpuConnectionHealthPolicy;
//# sourceMappingURL=VideoEncodingCpuConnectionHealthPolicy.js.map