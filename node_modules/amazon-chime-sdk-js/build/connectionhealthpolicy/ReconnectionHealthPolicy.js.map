{"version":3,"file":"ReconnectionHealthPolicy.js","sourceRoot":"","sources":["../../src/connectionhealthpolicy/ReconnectionHealthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,8FAAsE;AAKtE,MAAqB,wBACnB,SAAQ,oCAA0B;IAUlC,YACU,MAAc,EACtB,aAAkD,EAClD,IAA0B;QAE1B,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,qBAAqB,CAAC,CAAC;QAJ1C,WAAM,GAAN,MAAM,CAAQ;QAHhB,gCAA2B,GAAG,CAAC,CAAC;QAQtC,wBAAwB,CAAC,8BAA8B;YACrD,aAAa,CAAC,4BAA4B,CAAC;QAC7C,wBAAwB,CAAC,uBAAuB,GAAG,aAAa,CAAC,oBAAoB,CAAC;QACtF,wBAAwB,CAAC,sBAAsB,GAAG,aAAa,CAAC,yBAAyB,CAAC;QAC1F,wBAAwB,CAAC,sBAAsB,GAAG,aAAa,CAAC,mBAAmB,CAAC;QACpF,wBAAwB,CAAC,+BAA+B;YACtD,aAAa,CAAC,2BAA2B,CAAC;IAC9C,CAAC;IAED,MAAM;QACJ,MAAM,yBAAyB,GAAG,IAAI,CAAC,WAAW,CAAC,uBAAuB,CACxE,wBAAwB,CAAC,uBAAuB,CACjD,CAAC;QACF,IAAI,yBAAyB,EAAE;YAC7B,OAAO,CAAC,CAAC;SACV;QACD,MAAM,yBAAyB,GAC7B,IAAI,CAAC,WAAW,CAAC,6BAA6B;YAC9C,wBAAwB,CAAC,8BAA8B,CAAC;QAC1D,MAAM,mBAAmB,GACvB,IAAI,CAAC,WAAW,CAAC,sBAAsB,IAAI,wBAAwB,CAAC,sBAAsB,CAAC;QAC7F,IAAI,IAAI,CAAC,WAAW,CAAC,mBAAmB,GAAG,wBAAwB,CAAC,sBAAsB,EAAE;YAC1F,IAAI,CAAC,2BAA2B,IAAI,CAAC,CAAC;SACvC;aAAM;YACL,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;SACtC;QACD,MAAM,gBAAgB,GACpB,IAAI,CAAC,2BAA2B,GAAG,wBAAwB,CAAC,+BAA+B,CAAC;QAC9F,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;SACtC;QACD,MAAM,cAAc,GAAG,yBAAyB,IAAI,mBAAmB,IAAI,gBAAgB,CAAC;QAC5F,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,yDAAyD,yBAAyB,mBAAmB,mBAAmB,sBAAsB,gBAAgB,EAAE,CACjK,CAAC;YACF,OAAO,CAAC,CAAC;SACV;QACD,OAAO,CAAC,CAAC;IACX,CAAC;CACF;AAzDD,2CAyDC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport BaseConnectionHealthPolicy from './BaseConnectionHealthPolicy';\nimport ConnectionHealthData from './ConnectionHealthData';\nimport ConnectionHealthPolicy from './ConnectionHealthPolicy';\nimport ConnectionHealthPolicyConfiguration from './ConnectionHealthPolicyConfiguration';\n\nexport default class ReconnectionHealthPolicy\n  extends BaseConnectionHealthPolicy\n  implements ConnectionHealthPolicy {\n  private static CONNECTION_UNHEALTHY_THRESHOLD: number;\n  private static CONNECTION_WAIT_TIME_MS: number;\n  private static MISSED_PONGS_THRESHOLD: number;\n  private static MAXIMUM_AUDIO_DELAY_MS: number;\n  private static MAXIMUM_AUDIO_DELAY_DATA_POINTS: number;\n\n  private audioDelayPointsOverMaximum = 0;\n\n  constructor(\n    private logger: Logger,\n    configuration: ConnectionHealthPolicyConfiguration,\n    data: ConnectionHealthData\n  ) {\n    super(configuration, data, 'Reconnection Health');\n    ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD =\n      configuration.connectionUnhealthyThreshold;\n    ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS = configuration.connectionWaitTimeMs;\n    ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD = configuration.missedPongsUpperThreshold;\n    ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS = configuration.maximumAudioDelayMs;\n    ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS =\n      configuration.maximumAudioDelayDataPoints;\n  }\n\n  health(): number {\n    const connectionStartedRecently = this.currentData.isConnectionStartRecent(\n      ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS\n    );\n    if (connectionStartedRecently) {\n      return 1;\n    }\n    const noPacketsReceivedRecently =\n      this.currentData.consecutiveStatsWithNoPackets >=\n      ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD;\n    const missedPongsRecently =\n      this.currentData.consecutiveMissedPongs >= ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD;\n    if (this.currentData.audioSpeakerDelayMs > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS) {\n      this.audioDelayPointsOverMaximum += 1;\n    } else {\n      this.audioDelayPointsOverMaximum = 0;\n    }\n    const hasBadAudioDelay =\n      this.audioDelayPointsOverMaximum > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS;\n    if (hasBadAudioDelay) {\n      this.audioDelayPointsOverMaximum = 0;\n    }\n    const needsReconnect = noPacketsReceivedRecently || missedPongsRecently || hasBadAudioDelay;\n    if (needsReconnect) {\n      this.logger.warn(\n        `reconnection recommended due to: no packets received: ${noPacketsReceivedRecently}, missed pongs: ${missedPongsRecently}, bad audio delay: ${hasBadAudioDelay}`\n      );\n      return 0;\n    }\n    return 1;\n  }\n}\n"]}