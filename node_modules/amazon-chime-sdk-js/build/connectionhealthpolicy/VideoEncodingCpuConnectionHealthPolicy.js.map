{"version":3,"file":"VideoEncodingCpuConnectionHealthPolicy.js","sourceRoot":"","sources":["../../src/connectionhealthpolicy/VideoEncodingCpuConnectionHealthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAEtC,8FAAsE;AAItE,wHAAgG;AAEhG,MAAqB,sCACnB,SAAQ,oCAA0B;IAOlC,YAAY,aAAkD,EAAE,IAA0B;QACxF,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,iDAAuC,CAAC,sBAAsB,CAAC,CAAC;QAHrF,gCAA2B,GAAG,CAAC,CAAC;QAItC,IAAI,CAAC,iCAAiC,GAAG,aAAa,CAAC,iCAAiC,CAAC;QACzF,IAAI,CAAC,wBAAwB,GAAG,aAAa,CAAC,wBAAwB,CAAC;QACvE,IAAI,CAAC,gCAAgC,GAAG,aAAa,CAAC,gCAAgC,CAAC;IACzF,CAAC;IAED,MAAM;QACJ,0GAA0G;QAC1G,wGAAwG;QACxG,8EAA8E;QAC9E,MAAM,uBAAuB,GAC3B,IAAI,CAAC,WAAW,CAAC,qBAAqB,IAAI,IAAI,CAAC,wBAAwB;YACvE,IAAI,CAAC,WAAW,CAAC,6BAA6B,IAAI,IAAI,CAAC,gCAAgC,CAAC;QAC1F,MAAM,cAAc,GAClB,CAAC,IAAI,CAAC,WAAW,CAAC,sBAAsB;YACxC,CAAC,uBAAuB,IAAI,IAAI,CAAC,WAAW,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;QAC1E,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnC,IAAI,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,iCAAiC,EAAE;gBAC7E,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;gBACrC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;aAC7B;SACF;aAAM;YACL,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;SACtC;QACD,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;CACF;AApCD,yDAoCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BaseConnectionHealthPolicy from './BaseConnectionHealthPolicy';\nimport ConnectionHealthData from './ConnectionHealthData';\nimport ConnectionHealthPolicy from './ConnectionHealthPolicy';\nimport ConnectionHealthPolicyConfiguration from './ConnectionHealthPolicyConfiguration';\nimport VideoEncodingConnectionHealthPolicyName from './VideoEncodingConnectionHealthPolicyName';\n\nexport default class VideoEncodingCpuConnectionHealthPolicy\n  extends BaseConnectionHealthPolicy\n  implements ConnectionHealthPolicy {\n  private readonly consecutiveHighEncodeCpuThreshold: number;\n  private readonly highEncodeCpuMsThreshold: number;\n  private readonly highEncodeCpuMsPerFrameThreshold: number;\n  private consecutiveHighEncodeCpuCnt = 0;\n\n  constructor(configuration: ConnectionHealthPolicyConfiguration, data: ConnectionHealthData) {\n    super(configuration, data, VideoEncodingConnectionHealthPolicyName.VideoEncodingCpuHealth);\n    this.consecutiveHighEncodeCpuThreshold = configuration.consecutiveHighEncodeCpuThreshold;\n    this.highEncodeCpuMsThreshold = configuration.highEncodeCpuMsThreshold;\n    this.highEncodeCpuMsPerFrameThreshold = configuration.highEncodeCpuMsPerFrameThreshold;\n  }\n\n  health(): number {\n    // Checking both per-frame and total encode time as we do not want video codec fallback in two conditions:\n    // 1. High per-frame encode time with low framerate (e.g., high resolution, low framerate content share)\n    // 2. High framerate with low per-frame encode time (e.g., high framerate SVC)\n    const videoEncodingTimeIsHigh =\n      this.currentData.videoEncodingTimeInMs >= this.highEncodeCpuMsThreshold &&\n      this.currentData.videoEncodingTimePerFrameInMs >= this.highEncodeCpuMsPerFrameThreshold;\n    const cpuUsageIsHigh =\n      !this.currentData.isVideoEncoderHardware &&\n      (videoEncodingTimeIsHigh || this.currentData.cpuLimitationDuration > 0);\n    if (cpuUsageIsHigh) {\n      this.consecutiveHighEncodeCpuCnt++;\n      if (this.consecutiveHighEncodeCpuCnt > this.consecutiveHighEncodeCpuThreshold) {\n        this.consecutiveHighEncodeCpuCnt = 0;\n        return this.minimumHealth();\n      }\n    } else {\n      this.consecutiveHighEncodeCpuCnt = 0;\n    }\n    return this.maximumHealth();\n  }\n}\n"]}