{"version":3,"file":"BaseConnectionHealthPolicy.js","sourceRoot":"","sources":["../../src/connectionhealthpolicy/BaseConnectionHealthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAMtC,MAAqB,0BAA0B;IAO7C,YACE,aAAkD,EAClD,IAA0B,EAC1B,IAAa;QAEb,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,oBAA0C;QAC/C,IAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC;IAC1C,CAAC;IAED,uBAAuB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9C,CAAC;IAED,eAAe;QACb,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAChC,IAAI,SAAS,KAAK,IAAI,CAAC,aAAa,EAAE;YACpC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;YAC/B,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAnDD,6CAmDC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ConnectionHealthData from './ConnectionHealthData';\nimport ConnectionHealthPolicy from './ConnectionHealthPolicy';\nimport ConnectionHealthPolicyConfiguration from './ConnectionHealthPolicyConfiguration';\n\nexport default class BaseConnectionHealthPolicy implements ConnectionHealthPolicy {\n  protected currentData: ConnectionHealthData;\n  protected minHealth: number;\n  protected maxHealth: number;\n  protected currentHealth: number;\n  readonly name?: string;\n\n  constructor(\n    configuration: ConnectionHealthPolicyConfiguration,\n    data: ConnectionHealthData,\n    name?: string\n  ) {\n    this.minHealth = configuration.minHealth;\n    this.maxHealth = configuration.maxHealth;\n    this.currentHealth = configuration.initialHealth;\n    this.currentData = data.clone();\n    this.name = name;\n  }\n\n  minimumHealth(): number {\n    return this.minHealth;\n  }\n\n  maximumHealth(): number {\n    return this.maxHealth;\n  }\n\n  health(): number {\n    return this.maximumHealth();\n  }\n\n  update(connectionHealthData: ConnectionHealthData): void {\n    this.currentData = connectionHealthData;\n  }\n\n  getConnectionHealthData(): ConnectionHealthData {\n    return this.currentData.clone();\n  }\n\n  healthy(): boolean {\n    return this.health() > this.minimumHealth();\n  }\n\n  healthIfChanged(): number | null {\n    const newHealth = this.health();\n    if (newHealth !== this.currentHealth) {\n      this.currentHealth = newHealth;\n      return newHealth;\n    }\n    return null;\n  }\n}\n"]}