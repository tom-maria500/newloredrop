"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const VideoEncodingCpuConnectionHealthPolicy_1 = __importDefault(require("../connectionhealthpolicy/VideoEncodingCpuConnectionHealthPolicy"));
const VideoEncodingFramerateConnectionHealthPolicy_1 = __importDefault(require("../connectionhealthpolicy/VideoEncodingFramerateConnectionHealthPolicy"));
class ConnectionHealthPolicyConfiguration {
    constructor() {
        this.minHealth = 0;
        this.maxHealth = 1;
        this.initialHealth = 1;
        this.connectionUnhealthyThreshold = 25;
        this.noSignalThresholdTimeMs = 10000;
        this.connectionWaitTimeMs = 10000;
        this.zeroBarsNoSignalTimeMs = 5000;
        this.oneBarWeakSignalTimeMs = 5000;
        this.twoBarsTimeMs = 5000;
        this.threeBarsTimeMs = 10000;
        this.fourBarsTimeMs = 20000;
        this.fiveBarsTimeMs = 60000;
        this.cooldownTimeMs = 60000;
        this.pastSamplesToConsider = 15;
        this.goodSignalTimeMs = 15000;
        this.fractionalLoss = 0.5;
        this.packetsExpected = 50;
        this.maximumTimesToWarn = 2;
        this.missedPongsLowerThreshold = 1;
        this.missedPongsUpperThreshold = 4;
        this.maximumAudioDelayMs = 60000;
        this.maximumAudioDelayDataPoints = 10;
        /**
         * The number of samples required to consider sending-audio to be unhealthy
         *
         * The default value is derived from the median for time taken for receiving an attendee presence message from the
         * server after joining. Attendee presence is only received when the client sends audio packets to the server, so
         * this metric is used as a proxy.
         */
        this.sendingAudioFailureSamplesToConsider = 2;
        /**
         * The purpose of this field is to add a wait time/delay to our evaluation of sending audio health
         * as the microphone may sometimes cause a delay in sending audio packets during the initial stages of a connection.
         */
        this.sendingAudioFailureInitialWaitTimeMs = 3000;
        /**
         * Policies and parameters related to video encoding health montoring
         */
        this.videoEncodingHealthPolicies = [
            VideoEncodingCpuConnectionHealthPolicy_1.default,
            VideoEncodingFramerateConnectionHealthPolicy_1.default,
        ];
        /**
         * Consecutive seconds of high encode CPU to trigger video codec degradation in video encoding health monitoring.
         * Increasing the value results in less sensitive video codec degradaion and vice versa.
         */
        this.consecutiveHighEncodeCpuThreshold = 10;
        /**
         * Encode time threshold to determine high CPU usage of software encoders in video encoding health monitoring.
         * Recuding the value results in video codec degradation due to high CPU usage software encoder to be triggered
         * at a lower CPU usage.
         */
        this.highEncodeCpuMsThreshold = 500;
        /**
         * Encode time per frame threshold to determine high CPU usage of software encoders in video encoding health
         * monitoring. Recuding the value results in video codec degradation due to high CPU usage software encoder to
         * be triggered at a lower CPU usage. Note that encoder counts each SVC spatial layer of a frame as an encoded
         * frame. The magnification in framerate should be considered when configuring this parameter with SVC enabled.
         */
        this.highEncodeCpuMsPerFrameThreshold = 15;
        /**
         * Consecutive seconds of zero encoded framerate to trigger video codec degradation in video encoding health monitoring.
         * Increasing the value results in less sensitive video codec degradaion and vice versa.
         */
        this.consecutiveVideoEncodingFailureThreshold = 5;
    }
}
exports.default = ConnectionHealthPolicyConfiguration;
//# sourceMappingURL=ConnectionHealthPolicyConfiguration.js.map