{"version":3,"file":"SendingAudioFailureConnectionHealthPolicy.js","sourceRoot":"","sources":["../../src/connectionhealthpolicy/SendingAudioFailureConnectionHealthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,8FAAsE;AAKtE,MAAqB,yCACnB,SAAQ,oCAA0B;IASlC,YACU,MAAc,EACtB,aAAkD,EAClD,IAA0B;QAE1B,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,sBAAsB,CAAC,CAAC;QAJ3C,WAAM,GAAN,MAAM,CAAQ;QAKtB,IAAI,CAAC,oCAAoC;YACvC,aAAa,CAAC,oCAAoC,GAAG,CAAC;gBACpD,CAAC,CAAC,aAAa,CAAC,oCAAoC;gBACpD,CAAC,CAAC,CAAC,CAAC;QACR,IAAI,CAAC,oCAAoC,GAAG,aAAa,CAAC,oCAAoC,CAAC;QAC/F,IAAI,CAAC,kBAAkB,GAAG,aAAa,CAAC,kBAAkB,CAAC;QAC3D,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,cAAc,CAAC;QACnD,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IACrB,CAAC;IAEO,uBAAuB;QAC7B,MAAM,oCAAoC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CACpF,IAAI,CAAC,oCAAoC,CAC1C,CAAC;QACF,MAAM,2BAA2B,GAC/B,IAAI,CAAC,WAAW,CAAC,sCAAsC;YACvD,IAAI,CAAC,oCAAoC,CAAC;QAC5C,OAAO,oCAAoC,IAAI,2BAA2B,CAAC;IAC7E,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAClC,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC;YACpF,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,eAAe,EAAE;gBACjE,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,kCAAkC,IAAI,CAAC,oCAAoC,yBAAyB,CACrG,CAAC;gBACF,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE;oBAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,iGAAiG,CAClG,CAAC;oBACF,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;iBAC7B;gBACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACtC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;aAC7B;iBAAM;gBACL,OAAO,IAAI,CAAC,aAAa,CAAC;aAC3B;SACF;QACD,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;CACF;AA3DD,4DA2DC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport BaseConnectionHealthPolicy from './BaseConnectionHealthPolicy';\nimport ConnectionHealthData from './ConnectionHealthData';\nimport ConnectionHealthPolicy from './ConnectionHealthPolicy';\nimport ConnectionHealthPolicyConfiguration from './ConnectionHealthPolicyConfiguration';\n\nexport default class SendingAudioFailureConnectionHealthPolicy\n  extends BaseConnectionHealthPolicy\n  implements ConnectionHealthPolicy {\n  private readonly sendingAudioFailureSamplesToConsider: number;\n  private readonly sendingAudioFailureInitialWaitTimeMs: number;\n  private readonly coolDownTimeMs: number;\n  private readonly maximumTimesToWarn: number;\n  private warnCount: number;\n  private lastWarnTimestampMs: number;\n\n  constructor(\n    private logger: Logger,\n    configuration: ConnectionHealthPolicyConfiguration,\n    data: ConnectionHealthData\n  ) {\n    super(configuration, data, 'Sending Audio Health');\n    this.sendingAudioFailureSamplesToConsider =\n      configuration.sendingAudioFailureSamplesToConsider > 0\n        ? configuration.sendingAudioFailureSamplesToConsider\n        : 1;\n    this.sendingAudioFailureInitialWaitTimeMs = configuration.sendingAudioFailureInitialWaitTimeMs;\n    this.maximumTimesToWarn = configuration.maximumTimesToWarn;\n    this.coolDownTimeMs = configuration.cooldownTimeMs;\n    this.lastWarnTimestampMs = 0;\n    this.warnCount = 0;\n  }\n\n  private isSendingAudioUnhealthy(): boolean {\n    const hasEnoughTimeElapsedToEvaluateStatus = !this.currentData.isConnectionStartRecent(\n      this.sendingAudioFailureInitialWaitTimeMs\n    );\n    const areAudioPacketsNotBeingSent =\n      this.currentData.consecutiveStatsWithNoAudioPacketsSent >=\n      this.sendingAudioFailureSamplesToConsider;\n    return hasEnoughTimeElapsedToEvaluateStatus && areAudioPacketsNotBeingSent;\n  }\n\n  health(): number {\n    if (this.isSendingAudioUnhealthy()) {\n      const didWarnRecently = Date.now() - this.lastWarnTimestampMs < this.coolDownTimeMs;\n      if (this.currentHealth > this.minimumHealth() && !didWarnRecently) {\n        this.logger.warn(\n          `Sending Audio is unhealthy for ${this.sendingAudioFailureSamplesToConsider} seconds consecutively.`\n        );\n        this.warnCount++;\n        if (this.warnCount > this.maximumTimesToWarn) {\n          this.logger.warn(\n            'SendingAudioFailure health policy maximum warnings breached. Falling back to reporting healthy.'\n          );\n          return this.maximumHealth();\n        }\n        this.lastWarnTimestampMs = Date.now();\n        return this.minimumHealth();\n      } else {\n        return this.currentHealth;\n      }\n    }\n    return this.maximumHealth();\n  }\n}\n"]}