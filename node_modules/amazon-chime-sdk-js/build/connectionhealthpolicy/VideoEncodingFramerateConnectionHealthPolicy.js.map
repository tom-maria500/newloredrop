{"version":3,"file":"VideoEncodingFramerateConnectionHealthPolicy.js","sourceRoot":"","sources":["../../src/connectionhealthpolicy/VideoEncodingFramerateConnectionHealthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAEtC,8FAAsE;AAItE,wHAAgG;AAEhG,MAAqB,4CACnB,SAAQ,oCAA0B;IAKlC,YAAY,aAAkD,EAAE,IAA0B;QACxF,KAAK,CACH,aAAa,EACb,IAAI,EACJ,iDAAuC,CAAC,4BAA4B,CACrE,CAAC;QAPI,gCAA2B,GAAG,CAAC,CAAC;QAQtC,IAAI,CAAC,wCAAwC;YAC3C,aAAa,CAAC,wCAAwC,CAAC;IAC3D,CAAC;IAED,MAAM;QACJ,MAAM,kBAAkB,GACtB,IAAI,CAAC,WAAW,CAAC,cAAc,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC;QAC9E,IAAI,kBAAkB,EAAE;YACtB,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnC,IAAI,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,wCAAwC,EAAE;gBACpF,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;gBACrC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;aAC7B;SACF;aAAM;YACL,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;SACtC;QACD,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;CACF;AA9BD,+DA8BC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BaseConnectionHealthPolicy from './BaseConnectionHealthPolicy';\nimport ConnectionHealthData from './ConnectionHealthData';\nimport ConnectionHealthPolicy from './ConnectionHealthPolicy';\nimport ConnectionHealthPolicyConfiguration from './ConnectionHealthPolicyConfiguration';\nimport VideoEncodingConnectionHealthPolicyName from './VideoEncodingConnectionHealthPolicyName';\n\nexport default class VideoEncodingFramerateConnectionHealthPolicy\n  extends BaseConnectionHealthPolicy\n  implements ConnectionHealthPolicy {\n  private readonly consecutiveVideoEncodingFailureThreshold: number;\n  private consecutiveEncodeFailureCnt = 0;\n\n  constructor(configuration: ConnectionHealthPolicyConfiguration, data: ConnectionHealthData) {\n    super(\n      configuration,\n      data,\n      VideoEncodingConnectionHealthPolicyName.VideoEncodingFramerateHealth\n    );\n    this.consecutiveVideoEncodingFailureThreshold =\n      configuration.consecutiveVideoEncodingFailureThreshold;\n  }\n\n  health(): number {\n    const videoEncoderFailed =\n      this.currentData.videoEncodeFps === 0 && this.currentData.videoInputFps > 0;\n    if (videoEncoderFailed) {\n      this.consecutiveEncodeFailureCnt++;\n      if (this.consecutiveEncodeFailureCnt > this.consecutiveVideoEncodingFailureThreshold) {\n        this.consecutiveEncodeFailureCnt = 0;\n        return this.minimumHealth();\n      }\n    } else {\n      this.consecutiveEncodeFailureCnt = 0;\n    }\n    return this.maximumHealth();\n  }\n}\n"]}