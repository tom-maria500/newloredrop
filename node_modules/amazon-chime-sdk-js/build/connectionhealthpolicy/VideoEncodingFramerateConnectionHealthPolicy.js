"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseConnectionHealthPolicy_1 = __importDefault(require("./BaseConnectionHealthPolicy"));
const VideoEncodingConnectionHealthPolicyName_1 = __importDefault(require("./VideoEncodingConnectionHealthPolicyName"));
class VideoEncodingFramerateConnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {
    constructor(configuration, data) {
        super(configuration, data, VideoEncodingConnectionHealthPolicyName_1.default.VideoEncodingFramerateHealth);
        this.consecutiveEncodeFailureCnt = 0;
        this.consecutiveVideoEncodingFailureThreshold =
            configuration.consecutiveVideoEncodingFailureThreshold;
    }
    health() {
        const videoEncoderFailed = this.currentData.videoEncodeFps === 0 && this.currentData.videoInputFps > 0;
        if (videoEncoderFailed) {
            this.consecutiveEncodeFailureCnt++;
            if (this.consecutiveEncodeFailureCnt > this.consecutiveVideoEncodingFailureThreshold) {
                this.consecutiveEncodeFailureCnt = 0;
                return this.minimumHealth();
            }
        }
        else {
            this.consecutiveEncodeFailureCnt = 0;
        }
        return this.maximumHealth();
    }
}
exports.default = VideoEncodingFramerateConnectionHealthPolicy;
//# sourceMappingURL=VideoEncodingFramerateConnectionHealthPolicy.js.map