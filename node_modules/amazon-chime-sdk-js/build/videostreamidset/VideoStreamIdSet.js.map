{"version":3,"file":"VideoStreamIdSet.js","sourceRoot":"","sources":["../../src/videostreamidset/VideoStreamIdSet.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * [[VideoStreamIdSet]] holds the set of video streams by stream id.\n */\nexport default interface VideoStreamIdSet {\n  /**\n   * Adds stream id to the set\n   */\n  add(streamId: number): void;\n\n  /**\n   * Returns the sorted array representation of [[VideoStreamIdSet]]\n   */\n  array(): number[];\n\n  /**\n   * Checks whether the current set contains a stream id\n   */\n  contain(streamId: number): boolean;\n\n  /**\n   * Checks whether the current set contains a stream id\n   */\n  forEach?(callbackFn: (streamId: number) => void): void;\n\n  /**\n   * Checks whether the current set is empty\n   */\n  empty(): boolean;\n\n  /**\n   * Returns the size of the current set\n   */\n  size(): number;\n\n  /**\n   * Checks whether two sets are equivalent\n   */\n  equal(other: VideoStreamIdSet): boolean;\n\n  /**\n   * Returns a copy of the current set\n   */\n  clone(): VideoStreamIdSet;\n\n  /**\n   * Removes a stream id\n   */\n  remove(streamId: number): void;\n\n  /**\n   * Converts [[VideoStreamIdSet]] to JSON format\n   */\n  toJSON(): number[];\n\n  /**\n   * Returns a copy of the current set, with only N values\n   * copied from the original set.\n   *\n   * @param length the total number of values to be included\n   *               in the new set.\n   */\n  truncate(length: number): VideoStreamIdSet;\n}\n"]}