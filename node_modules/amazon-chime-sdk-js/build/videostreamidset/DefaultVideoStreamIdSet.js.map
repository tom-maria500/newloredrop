{"version":3,"file":"DefaultVideoStreamIdSet.js","sourceRoot":"","sources":["../../src/videostreamidset/DefaultVideoStreamIdSet.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAItC;;GAEG;AACH,MAAqB,uBAAuB;IAG1C,YAAY,GAAc;QACxB,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAS,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,GAAG,CAAC,QAAgB;QAClB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzB,CAAC;IAED,KAAK;QACH,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;QAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,CAAC,QAAgB;QACtB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,CAAC,UAAsC;QAC5C,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,KAA8B;QAClC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC;SAC5B;QACD,MAAM,CAAC,GAAa,IAAI,CAAC,KAAK,EAAE,CAAC;QACjC,MAAM,CAAC,GAAa,KAAK,CAAC,KAAK,EAAE,CAAC;QAClC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBACjB,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,QAAgB;QACrB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAED,QAAQ,CAAC,MAAc;QACrB,MAAM,CAAC,GAAa,IAAI,CAAC,KAAK,EAAE,CAAC;QACjC,OAAO,IAAI,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF;AAjED,0CAiEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoStreamIdSet from './VideoStreamIdSet';\n\n/**\n * [[DefaultVideoStreamIdSet]] implements [[VideoStreamIdSet]].\n */\nexport default class DefaultVideoStreamIdSet implements VideoStreamIdSet {\n  private ids: Set<number>;\n\n  constructor(ids?: number[]) {\n    this.ids = new Set<number>(ids);\n  }\n\n  add(streamId: number): void {\n    this.ids.add(streamId);\n  }\n\n  array(): number[] {\n    const values = Array.from(this.ids.values());\n    return values.sort((a, b) => a - b);\n  }\n\n  contain(streamId: number): boolean {\n    return this.ids.has(streamId);\n  }\n\n  forEach(callbackFn: (streamId: number) => void): void {\n    this.ids.forEach(callbackFn);\n  }\n\n  empty(): boolean {\n    return this.ids.size === 0;\n  }\n\n  size(): number {\n    return this.ids.size;\n  }\n\n  equal(other: DefaultVideoStreamIdSet): boolean {\n    if (!other) {\n      return this.ids.size === 0;\n    }\n    const x: number[] = this.array();\n    const y: number[] = other.array();\n    if (x.length !== y.length) {\n      return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  clone(): DefaultVideoStreamIdSet {\n    return new DefaultVideoStreamIdSet(this.array());\n  }\n\n  remove(streamId: number): void {\n    this.ids.delete(streamId);\n  }\n\n  toJSON(): number[] {\n    return this.array();\n  }\n\n  truncate(length: number): DefaultVideoStreamIdSet {\n    const x: number[] = this.array();\n    return new DefaultVideoStreamIdSet(x.splice(0, length));\n  }\n}\n"]}