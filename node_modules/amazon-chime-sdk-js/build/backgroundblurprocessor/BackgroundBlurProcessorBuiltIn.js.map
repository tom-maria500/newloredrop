{"version":3,"file":"BackgroundBlurProcessorBuiltIn.js","sourceRoot":"","sources":["../../src/backgroundblurprocessor/BackgroundBlurProcessorBuiltIn.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAItC,wGAAgF;AAChF,qEAA8D;AAE9D;;;;GAIG;AAEH,gBAAgB;AAChB,MAAqB,8BAA+B,SAAQ,yCAA+B;IAKzF;;;;;;OAMG;IACH,YAAY,IAA2B,EAAE,OAA+B;QACtE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAXf,eAAU,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACtF,kBAAa,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAYvD,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;QACpD,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;IAClE,CAAC;IAED,iBAAiB,CAAC,WAA8B,EAAE,IAAe;QAC/D,sHAAsH;QACtH,mCAAmC;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QACzC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,YAAY,CAAC;QAEvC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;YAC1B,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACzC,OAAO;SACR;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAErD,SAAS,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEzD,gBAAgB;QAChB,SAAS,CAAC,IAAI,EAAE,CAAC;QACjB,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACzC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAE5D,kCAAkC;QAClC,SAAS,CAAC,wBAAwB,GAAG,WAAW,CAAC;QACjD,0BAA0B;QAC1B,SAAS,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEtD,oBAAoB;QACpB,SAAS,CAAC,wBAAwB,GAAG,kBAAkB,CAAC;QACxD,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC1D,SAAS,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAED,eAAe,CAAC,YAAoB;QAClC,KAAK,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAEpC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,cAAc;YACd,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAE9B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;YAE5C,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;gBACtB,GAAG,EAAE,WAAW;gBAChB,OAAO,EAAE;oBACP,QAAQ,EAAE,KAAK,CAAC,IAAI;oBACpB,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM;oBAC/B,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK;oBAC7B,aAAa,EAAE,CAAC;oBAChB,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnC,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC5B;aACF,CAAC,CAAC;SACJ;IACH,CAAC;IAED,aAAa;QACX,oFAAoF;QACpF,2CAA2C;QAC3C,IAAI,CAAC,UAAU,GAAG,2CAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,gBAAgB,CAAC,GAAwB;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACxE,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACjD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAC;YAC5E,OAAO;SACR;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;YACtB,GAAG,EAAE,WAAW;YAChB,OAAO,EAAE;gBACP,QAAQ,EAAE,KAAK,CAAC,IAAI;gBACpB,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM;gBAC/B,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK;gBAC7B,aAAa,EAAE,CAAC;gBAChB,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnC,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B;SACF,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,aAAa,CAAC,GAA8D;QAC1E,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC;QAC3C,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEK,OAAO;;;;;;YACX,OAAM,OAAO,YAAG;YAChB,MAAA,IAAI,CAAC,UAAU,0CAAE,MAAM,EAAE,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;;KAC7B;CACF;AAvHD,iDAuHC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BackgroundFilterSpec from '../backgroundfilter/BackgroundFilterSpec';\nimport BackgroundBlurOptions from './BackgroundBlurOptions';\nimport BackgroundBlurProcessorProvided from './BackgroundBlurProcessorProvided';\nimport { BlurStrengthMapper } from './BackgroundBlurStrength';\n\n/**\n * The [[BackgroundBlurProcessorBuiltIn]] uses the browser's built-in capability to apply blurring to\n * the background image as apposed to [[BackgroundBlurProcessorProvided]] that uses WASM and\n * TensorFlow Lite to apply the blur.\n */\n\n/** @internal */\nexport default class BackgroundBlurProcessorBuiltIn extends BackgroundBlurProcessorProvided {\n  private blurredImage: ImageData;\n  private blurCanvas: HTMLCanvasElement = document.createElement('canvas') as HTMLCanvasElement;\n  private blurCanvasCtx = this.blurCanvas.getContext('2d');\n\n  /**\n   * A constructor that will apply default values if spec and strength are not provided.\n   * If no spec is provided the selfie segmentation model is used with default paths to CDN for the\n   * worker and wasm files used to process each frame.\n   * @param spec The spec defines the assets that will be used for adding background blur to a frame.\n   * @param options How much blur to apply to a frame.\n   */\n  constructor(spec?: BackgroundFilterSpec, options?: BackgroundBlurOptions) {\n    super(spec, options);\n\n    this.blurCanvas.width = this.spec.model.input.width;\n    this.blurCanvas.height = this.spec.model.input.height;\n    this.logger.info('BackgroundBlur processor using builtin blur');\n  }\n\n  drawImageWithMask(inputCanvas: HTMLCanvasElement, mask: ImageData): void {\n    // Mask will not be set until the worker has completed handling the predict event. Until the first frame is processed,\n    // the whole frame will be blurred.\n    const blurredImage = this.blurredImage;\n    const { canvasCtx, targetCanvas } = this;\n    const { width, height } = targetCanvas;\n\n    if (!mask || !blurredImage) {\n      canvasCtx.clearRect(0, 0, width, height);\n      return;\n    }\n\n    const scaledCtx = this.scaledCanvas.getContext('2d');\n\n    scaledCtx.putImageData(mask, 0, 0);\n    this.blurCanvasCtx.putImageData(this.blurredImage, 0, 0);\n\n    // draw the mask\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, width, height);\n    canvasCtx.drawImage(this.scaledCanvas, 0, 0, width, height);\n\n    // Only overwrite existing pixels.\n    canvasCtx.globalCompositeOperation = 'source-in';\n    // draw image over mask...\n    canvasCtx.drawImage(inputCanvas, 0, 0, width, height);\n\n    // draw under person\n    canvasCtx.globalCompositeOperation = 'destination-over';\n    canvasCtx.drawImage(this.blurCanvas, 0, 0, width, height);\n    canvasCtx.restore();\n  }\n\n  setBlurStrength(blurStrength: number): void {\n    super.setBlurStrength(blurStrength);\n\n    if (this.worker) {\n      // live update\n      this.modelInitialized = false;\n\n      this.worker.postMessage({ msg: 'destroy' });\n\n      const model = this.spec.model;\n      this.worker.postMessage({\n        msg: 'loadModel',\n        payload: {\n          modelUrl: model.path,\n          inputHeight: model.input.height,\n          inputWidth: model.input.width,\n          inputChannels: 4,\n          modelRangeMin: model.input.range[0],\n          modelRangeMax: model.input.range[1],\n          blurPixels: this.blurAmount,\n        },\n      });\n    }\n  }\n\n  setBlurPixels(): void {\n    // the blurred image is sized down to 144, regardless of what the canvas size is, so\n    // we use the default blur strengths (540p)\n    this.blurAmount = BlurStrengthMapper.getBlurAmount(this._blurStrength, { height: 540 });\n    this.logger.info(`background blur amount set to ${this.blurAmount}`);\n  }\n\n  handleInitialize(msg: { payload: number }): void {\n    this.logger.info(`received initialize message: ${this.stringify(msg)}`);\n    if (!msg.payload) {\n      this.logger.error('failed to initialize module');\n      this.initWorkerPromise.reject(new Error('failed to initialize the module'));\n      return;\n    }\n\n    const model = this.spec.model;\n    this.worker.postMessage({\n      msg: 'loadModel',\n      payload: {\n        modelUrl: model.path,\n        inputHeight: model.input.height,\n        inputWidth: model.input.width,\n        inputChannels: 4,\n        modelRangeMin: model.input.range[0],\n        modelRangeMax: model.input.range[1],\n        blurPixels: this.blurAmount,\n      },\n    });\n    this.initWorkerPromise.resolve({});\n  }\n\n  handlePredict(msg: { payload: { blurOutput: ImageData; output: ImageData } }): void {\n    this.blurredImage = msg.payload.blurOutput;\n    super.handlePredict(msg);\n  }\n\n  async destroy(): Promise<void> {\n    super.destroy();\n    this.blurCanvas?.remove();\n    this.blurCanvas = undefined;\n  }\n}\n"]}