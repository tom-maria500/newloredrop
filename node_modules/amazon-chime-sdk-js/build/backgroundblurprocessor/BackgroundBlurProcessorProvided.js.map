{"version":3,"file":"BackgroundBlurProcessorProvided.js","sourceRoot":"","sources":["../../src/backgroundblurprocessor/BackgroundBlurProcessorProvided.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BackgroundFilterProcessor from '../backgroundfilter/BackgroundFilterProcessor';\nimport BackgroundFilterSpec from '../backgroundfilter/BackgroundFilterSpec';\nimport EventController from '../eventcontroller/EventController';\nimport VideoFXEventAttributes from '../eventcontroller/VideoFXEventAttributes';\nimport BackgroundBlurOptions from './BackgroundBlurOptions';\nimport BackgroundBlurProcessor from './BackgroundBlurProcessor';\nimport { BlurStrengthMapper } from './BackgroundBlurStrength';\nimport BackgroundBlurVideoFrameProcessorDelegate from './BackgroundBlurVideoFrameProcessorDelegate';\nimport BackgroundBlurVideoFrameProcessorObserver from './BackgroundBlurVideoFrameProcessorObserver';\n\n/**\n * [[BackgroundBlurProcessorProvided]] implements [[BackgroundBlurProcessor]].\n * It's a background blur processor and input is passed into a worker that will apply a segmentation\n * to separate the foreground from the background. Then the background will have a blur applied.\n *\n * The [[BackgroundBlurProcessorProvided]] uses WASM and TensorFlow Lite to apply the blurring of the\n * background image as apposed to [[BackgroundBlurProcessorBuiltIn]] that uses the browser's built-in\n * capability to apply the blur.\n */\n/** @internal */\nexport default class BackgroundBlurProcessorProvided\n  extends BackgroundFilterProcessor\n  implements BackgroundBlurProcessor {\n  protected blurAmount = 0;\n  protected _blurStrength: number;\n\n  protected validateOptions(options: BackgroundBlurOptions): void {\n    super.validateOptions(options);\n    if (!options.blurStrength) {\n      throw new Error('processor has null options - blurStrength');\n    }\n  }\n\n  /**\n   * A constructor that will apply default values if spec and strength are not provided.\n   * If no spec is provided the selfie segmentation model is used with default paths to CDN for the\n   * worker and wasm files used to process each frame.\n   * @param spec The spec defines the assets that will be used for adding background blur to a frame\n   * @param options How much blur to apply to a frame\n   */\n  constructor(spec: BackgroundFilterSpec, options: BackgroundBlurOptions) {\n    super('background blur', spec, options, new BackgroundBlurVideoFrameProcessorDelegate());\n\n    this.setBlurStrength(options.blurStrength);\n\n    this.logger.info('BackgroundBlur processor successfully created');\n    this.logger.info(`BackgroundBlur spec: ${this.stringify(this.spec)}`);\n    this.logger.info(`BackgroundBlur options: ${this.stringify(options)}`);\n  }\n\n  initOnFirstExecution(): void {\n    this.setBlurPixels();\n  }\n\n  drawImageWithMask(inputCanvas: HTMLCanvasElement, mask: ImageData): void {\n    // Mask will not be set until the worker has completed handling the predict event. Until the first frame is processed,\n    // the whole frame will be blurred.\n    if (!mask) {\n      mask = new ImageData(this.spec.model.input.width, this.spec.model.input.height);\n    }\n\n    const scaledCtx = this.scaledCanvas.getContext('2d');\n\n    scaledCtx.putImageData(mask, 0, 0);\n\n    const { canvasCtx, targetCanvas } = this;\n    const { width, height } = targetCanvas;\n\n    // draw the mask\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, width, height);\n    canvasCtx.drawImage(this.scaledCanvas, 0, 0, width, height);\n\n    // Only overwrite existing pixels.\n    canvasCtx.globalCompositeOperation = 'source-in';\n    // draw image over mask...\n    canvasCtx.drawImage(inputCanvas, 0, 0, width, height);\n\n    // draw under person\n    canvasCtx.globalCompositeOperation = 'destination-over';\n    canvasCtx.filter = `blur(${this.blurAmount}px)`;\n    canvasCtx.drawImage(inputCanvas, 0, 0, targetCanvas.width, targetCanvas.height);\n    canvasCtx.restore();\n  }\n\n  setBlurStrength(blurStrength: number): void {\n    this._blurStrength = blurStrength;\n    this.logger.info(`blur strength set to ${this._blurStrength}`);\n    this.setBlurPixels();\n  }\n\n  /**\n   * Calculate the blur amount based on the blur strength passed in and height of the image being blurred.\n   */\n  setBlurPixels(): void {\n    this.blurAmount = BlurStrengthMapper.getBlurAmount(this._blurStrength, {\n      height: this.sourceHeight,\n    });\n    this.logger.info(`background blur amount set to ${this.blurAmount}`);\n  }\n\n  addObserver(observer: BackgroundBlurVideoFrameProcessorObserver): void {\n    this.delegate.addObserver(observer);\n  }\n\n  removeObserver(observer: BackgroundBlurVideoFrameProcessorObserver): void {\n    this.delegate.removeObserver(observer);\n  }\n\n  static async isSupported(): Promise<boolean> {\n    const canvas = document.createElement('canvas');\n    const supportsBlurFilter = canvas.getContext('2d').filter !== undefined;\n    canvas.remove();\n\n    return supportsBlurFilter;\n  }\n\n  /** @internal */\n  setEventController(eventController: EventController): void {\n    /*\n    if this is a first time we set the eventController, need to publish the current BackgroundFilterConfig.\n    Otherwise, just set the eventController.\n    */\n    if (this.eventController) {\n      this.eventController = eventController;\n    } else {\n      this.eventController = eventController;\n      this.publishBackgroundFilterEvent();\n    }\n  }\n\n  private publishBackgroundFilterEvent(): void {\n    const backgroundFilterEventAttributes: VideoFXEventAttributes = {\n      backgroundBlurEnabled: 'true',\n      backgroundBlurStrength: this._blurStrength,\n      backgroundReplacementEnabled: 'false',\n      backgroundFilterVersion: 1,\n    };\n    this.eventController.publishEvent(\n      'backgroundFilterConfigSelected',\n      backgroundFilterEventAttributes\n    );\n  }\n}\n"]}