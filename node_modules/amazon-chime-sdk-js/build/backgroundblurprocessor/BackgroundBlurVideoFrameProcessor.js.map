{"version":3,"file":"BackgroundBlurVideoFrameProcessor.js","sourceRoot":"","sources":["../../src/backgroundblurprocessor/BackgroundBlurVideoFrameProcessor.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAGtC,kIAA0G;AAC1G,4EAAoD;AAEpD,kEAA0C;AAC1C,6GAAqF;AAGrF,sGAA8E;AAC9E,wGAAgF;AAChF,sFAAoD;AAEpD;;;GAGG;AACH,gBAAgB;AAChB,MAAM,2BACJ,SAAQ,iCAAuB;IAE/B;;OAEG;IACH,eAAe,KAAU,CAAC;IAE1B;;;OAGG;IACG,UAAU;;YACd,OAAO;QACT,CAAC;KAAA;IAED;;OAEG;IACH,WAAW,KAAU,CAAC;IAEtB;;OAEG;IACH,cAAc,KAAU,CAAC;CAC1B;AAED;;;GAGG;AACH,MAAqB,iCAAkC,SAAQ,6CAAmC;IAChG;;;;;;;OAOG;IACH,MAAM,CAAO,MAAM,CACjB,IAA2B,EAC3B,OAA+B;;YAE/B,IAAI,GAAG,iCAAiC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC3D,OAAO,GAAG,iCAAiC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACpE,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;YAE3B,MAAM,SAAS,GAAG,MAAM,iCAAiC,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACrF,kGAAkG;YAClG,MAAM,CAAC,IAAI,CAAC,gBAAgB,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC;YAChE,IAAI,CAAC,SAAS,EAAE;gBACd,MAAM,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;gBAC9E,OAAO,IAAI,2BAA2B,EAAE,CAAC;aAC1C;YAED,IAAI,SAAkC,CAAC;YACvC,IAAI,MAAM,yCAA+B,CAAC,WAAW,EAAE,EAAE;gBACvD,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;gBACtD,SAAS,GAAG,IAAI,yCAA+B,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAChE;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;gBAC9C,SAAS,GAAG,IAAI,wCAA8B,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAC/D;YAED,MAAM,SAAS,CAAC,UAAU,EAAE,CAAC;YAC7B,OAAO,SAAS,CAAC;QACnB,CAAC;KAAA;IAED;;;;OAIG;IACO,MAAM,CAAC,cAAc,CAAC,UAAiC,EAAE;QACjE,IAAI,gBAAgB,qBAA+B,OAAO,CAAE,CAAC;QAE7D,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE;YAClC,gBAAgB,CAAC,YAAY,GAAG,gCAAY,CAAC,MAAM,CAAC;SACrD;QAED,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;YAC5B,gBAAgB,CAAC,MAAM,GAAG,IAAI,uBAAa,CAAC,yBAAyB,EAAE,kBAAQ,CAAC,IAAI,CAAC,CAAC;SACvF;QACD,gBAAgB,GAAG,KAAK,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAC1D,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,WAAW,CAAC,IAA2B,EAAE,OAA6B;QAC3E,IAAI,GAAG,iCAAiC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3D,OAAO,GAAG,iCAAiC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACpE,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;CACF;AArED,oDAqEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BackgroundFilterSpec from '../backgroundfilter/BackgroundFilterSpec';\nimport BackgroundFilterVideoFrameProcessor from '../backgroundfilter/BackgroundFilterVideoFrameProcessor';\nimport ConsoleLogger from '../logger/ConsoleLogger';\nimport Logger from '../logger/Logger';\nimport LogLevel from '../logger/LogLevel';\nimport NoOpVideoFrameProcessor from '../videoframeprocessor/NoOpVideoFrameProcessor';\nimport BackgroundBlurOptions from './BackgroundBlurOptions';\nimport BackgroundBlurProcessor from './BackgroundBlurProcessor';\nimport BackgroundBlurProcessorBuiltIn from './BackgroundBlurProcessorBuiltIn';\nimport BackgroundBlurProcessorProvided from './BackgroundBlurProcessorProvided';\nimport BlurStrength from './BackgroundBlurStrength';\n\n/**\n * No-op implementation of the blur processor. An instance of this class will be returned when a user attempts\n * to create a blur processor when it is not supported.\n */\n/** @internal */\nclass NoOpBackgroundBlurProcessor\n  extends NoOpVideoFrameProcessor\n  implements BackgroundBlurProcessor {\n  /**\n   * no-op\n   */\n  setBlurStrength(): void {}\n\n  /**\n   * no-op\n   * @returns\n   */\n  async loadAssets(): Promise<void> {\n    return;\n  }\n\n  /**\n   * no-op\n   */\n  addObserver(): void {}\n\n  /**\n   * no-op\n   */\n  removeObserver(): void {}\n}\n\n/**\n * [[BackgroundBlurVideoFrameProcessor]]\n * Creates a background blur processor which identifies the foreground person and blurs the background.\n */\nexport default class BackgroundBlurVideoFrameProcessor extends BackgroundFilterVideoFrameProcessor {\n  /**\n   * A factory method that will call the private constructor to instantiate the processor and asynchronously\n   * initialize the worker, wasm, and ML models. Upon completion of the initialization the promise will either\n   * be resolved or rejected.\n   * @param spec The spec defines the assets that will be used for adding background blur to a frame\n   * @param blurStrength How much blur to apply to a frame\n   * @returns\n   */\n  static async create(\n    spec?: BackgroundFilterSpec,\n    options?: BackgroundBlurOptions\n  ): Promise<BackgroundBlurProcessor | undefined> {\n    spec = BackgroundBlurVideoFrameProcessor.resolveSpec(spec);\n    options = BackgroundBlurVideoFrameProcessor.resolveOptions(options);\n    const { logger } = options;\n\n    const supported = await BackgroundBlurVideoFrameProcessor.isSupported(spec, options);\n    // if blur is not supported do not initialize. The processor will become a no op if not supported.\n    logger.info(`processor is ${supported ? '' : 'not'} supported`);\n    if (!supported) {\n      logger.warn('Using no-op processor because background blur is not supported');\n      return new NoOpBackgroundBlurProcessor();\n    }\n\n    let processor: BackgroundBlurProcessor;\n    if (await BackgroundBlurProcessorProvided.isSupported()) {\n      logger.info('Using browser-provided background blur');\n      processor = new BackgroundBlurProcessorProvided(spec, options);\n    } else {\n      logger.info('Using built-in background blur');\n      processor = new BackgroundBlurProcessorBuiltIn(spec, options);\n    }\n\n    await processor.loadAssets();\n    return processor;\n  }\n\n  /**\n   * Based on the options that are passed in set defaults for options\n   * @param options  the options that are passed in\n   * @returns An updated set of options with defaults set\n   */\n  protected static resolveOptions(options: BackgroundBlurOptions = {}): BackgroundBlurOptions {\n    let processorOptions: BackgroundBlurOptions = { ...options };\n\n    if (!processorOptions.blurStrength) {\n      processorOptions.blurStrength = BlurStrength.MEDIUM;\n    }\n\n    if (!processorOptions.logger) {\n      processorOptions.logger = new ConsoleLogger('BackgroundBlurProcessor', LogLevel.INFO);\n    }\n    processorOptions = super.resolveOptions(processorOptions);\n    return processorOptions;\n  }\n\n  /**\n   * This method will detect the environment in which it is being used and determine if background\n   * blur can be used.\n   * @param spec The {@link BackgroundBlurSpec} spec that will be used to initialize assets\n   * @param options options such as logger\n   * @returns a boolean promise that will resolve to true if supported and false if not\n   */\n  static isSupported(spec?: BackgroundFilterSpec, options?: { logger?: Logger }): Promise<boolean> {\n    spec = BackgroundBlurVideoFrameProcessor.resolveSpec(spec);\n    options = BackgroundBlurVideoFrameProcessor.resolveOptions(options);\n    return super.isSupported(spec, options);\n  }\n}\n"]}