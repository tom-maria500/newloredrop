{"version":3,"file":"RealtimeState.js","sourceRoot":"","sources":["../../src/realtimecontroller/RealtimeState.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAOtC;;GAEG;AACH,MAAqB,aAAa;IAAlC;QACE;;WAEG;QACH,oBAAe,GAAkB,IAAI,CAAC;QAEtC;;WAEG;QACH,wBAAmB,GAAkB,IAAI,CAAC;QAE1C;;WAEG;QACH,+BAA0B,GAMX,EAAE,CAAC;QAElB;;WAEG;QACH,cAAS,GAAY,IAAI,CAAC;QAE1B;;WAEG;QACH,oCAA+B,GAAqC,EAAE,CAAC;QAEvE;;WAEG;QACH,UAAK,GAAY,KAAK,CAAC;QAEvB;;WAEG;QACH,qCAAgC,GAAiC,EAAE,CAAC;QAEpE;;WAEG;QACH,yBAAoB,GAA+C,EAAE,CAAC;QAEtE;;WAEG;QACH,+BAA0B,GAAqC,EAAE,CAAC;QAElE;;WAEG;QACH,6BAAwB,GAEpB,EAAE,CAAC;QAEP;;WAEG;QACH,uCAAkC,GAAyC,EAAE,CAAC;QAE9E;;WAEG;QACH,wBAAmB,GAA+B,EAAE,CAAC;QAErD;;WAEG;QACH,6BAAwB,GAIT,EAAE,CAAC;QAElB;;WAEG;QACH,gCAA2B,GAAwD,IAAI,GAAG,EAAE,CAAC;IAC/F,CAAC;CAAA;AAlFD,gCAkFC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DataMessage from '../datamessage/DataMessage';\nimport RealtimeAttendeePositionInFrame from './RealtimeAttendeePositionInFrame';\nimport RealtimeVolumeIndicator from './RealtimeVolumeIndicator';\nimport type VolumeIndicatorCallback from './VolumeIndicatorCallback';\n\n/**\n * [[RealtimeState]] stores all realtime persistent state.\n */\nexport default class RealtimeState {\n  /**\n   * Stores the attendee id of the current user\n   */\n  localAttendeeId: string | null = null;\n\n  /**\n   * Stores the external user id of the current user\n   */\n  localExternalUserId: string | null = null;\n\n  /**\n   * Callbacks to listen for attendee id changes\n   */\n  attendeeIdChangesCallbacks: ((\n    attendeeId: string,\n    present: boolean,\n    externalUserId: string,\n    dropped: boolean,\n    posInFrame: RealtimeAttendeePositionInFrame | null\n  ) => void)[] = [];\n\n  /**\n   * Stores whether the user can transition from muted to unmuted\n   */\n  canUnmute: boolean = true;\n\n  /**\n   * Callbacks to listen for changes to can-unmute local audio state\n   */\n  setCanUnmuteLocalAudioCallbacks: ((canUnmute: boolean) => void)[] = [];\n\n  /**\n   * Stores whether the user is presently muted\n   */\n  muted: boolean = false;\n\n  /**\n   * Callbacks to listen for local audio mutes and unmutes\n   */\n  muteAndUnmuteLocalAudioCallbacks: ((muted: boolean) => void)[] = [];\n\n  /**\n   * Stores per-attendee id volume indicator state\n   */\n  volumeIndicatorState: { [key: string]: RealtimeVolumeIndicator } = {};\n\n  /**\n   * Stores attendee id to external user id mappings\n   */\n  attendeeIdToExternalUserId: { [attendeeId: string]: string } = {};\n\n  /**\n   * Stores per-attendee id callbacks called when volume indicators change\n   */\n  volumeIndicatorCallbacks: {\n    [key: string]: VolumeIndicatorCallback[];\n  } = {};\n\n  /**\n   * Callbacks to listen for changes to local signal strength\n   */\n  localSignalStrengthChangeCallbacks: ((signalStrength: number) => void)[] = [];\n\n  /**\n   * Callbacks to listen for fatal errors\n   */\n  fatalErrorCallbacks: ((error: Error) => void)[] = [];\n\n  /**\n   * Callbacks to trigger when sending message\n   */\n  sendDataMessageCallbacks: ((\n    topic: string, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data: Uint8Array | string | any,\n    lifetimeMs?: number\n  ) => void)[] = [];\n\n  /**\n   * Callbacks to listen for receiving message from data channel based on given topic\n   */\n  receiveDataMessageCallbacks: Map<string, ((dataMessage: DataMessage) => void)[]> = new Map();\n}\n"]}