{"version":3,"file":"SignalingClient.js","sourceRoot":"","sources":["../../src/signalingclient/SignalingClient.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MeetingSessionCredentials } from '..';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  SdkClientMetricFrame,\n  SdkDataMessageFrame,\n  SdkPingPongFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport SignalingClientConnectionRequest from './SignalingClientConnectionRequest';\nimport SignalingClientJoin from './SignalingClientJoin';\nimport SignalingClientSubscribe from './SignalingClientSubscribe';\nimport SignalingClientVideoSubscriptionConfiguration from './SignalingClientVideoSubscriptionConfiguration';\n\n/**\n * [[SignalingClient]] is the top-level interface for opening a signaling connection over WebSocket.\n */\nexport default interface SignalingClient {\n  /**\n   * Adds an observer to the observer queue with immediate effect.\n   *\n   * @param observer The observer to add to the queue.\n   */\n  registerObserver(observer: SignalingClientObserver): void;\n\n  /**\n   * Removes an observer from the observer queue with immediate effect.\n   *\n   * @param observer The observer to remove from the queue.\n   */\n  removeObserver(observer: SignalingClientObserver): void;\n\n  /**\n   * Enqueues an attempt to open a signaling connection over WebSocket.\n   *\n   * Once initiated, a WebSocketConnecting event is sent to observers. If successful, a\n   * WebSocketOpen event is sent out. If the connection could not be established for any reason,\n   * a WebSocketFailed event is sent followed by WebSocketClosed event. If any existing connection\n   * is open, then that is first closed (and the WebSocketClosed event is sent out) before the\n   * open is tried.\n   *\n   * @param request The request to enqueue.\n   */\n  openConnection(request: SignalingClientConnectionRequest): void;\n\n  /**\n   * Sends a ping or pong with an id.\n   *\n   * @param pingPongFrame ping or pong frame to send.\n   * @returns the ms timestamp when the message was sent.\n   */\n  pingPong(pingPongFrame: SdkPingPongFrame): number;\n\n  /**\n   * Sends a join frame with the given settings.\n   *\n   * @param settings How to configure the Join frame.\n   */\n  join(settings: SignalingClientJoin): void;\n\n  /**\n   * Sends a subscribe frame with the given settings.\n   *\n   * @param settings How to configure the Subscribe frame.\n   */\n  subscribe(settings: SignalingClientSubscribe): void;\n\n  /**\n   * Sends a remote video update frame with the given configurations and removed streams.  These can be\n   * sent in parallel to `subscribe` without issue, but note that `subscribe` will overwrite any configuration\n   * set here.\n   *\n   * Note that the `addedOrUpdated` is basically a flattened map with `SignalingClientVideoSubscriptionConfiguration.mid`\n   * being the key, which is why we only need to pass the mid when removing.\n   *\n   * @param addedOrUpdated Added or updated configurations, see note above.\n   * @param removedMids List of MIDs to remove\n   */\n  remoteVideoUpdate?(\n    addedOrUpdated: SignalingClientVideoSubscriptionConfiguration[],\n    removedMids: string[]\n  ): void;\n\n  /**\n   * Sends a leave frame.\n   */\n  leave(): void;\n\n  /**\n   * Sends a client stats frame.\n   */\n  sendClientMetrics(clientMetricFrame: SdkClientMetricFrame): void;\n\n  /**\n   * Send a message frame to data channel\n   */\n  sendDataMessage(messageFrame: SdkDataMessageFrame): void;\n\n  /**\n   * Closes any existing connection.\n   *\n   * Prior to closing, it delivers a WebSocketClosing event. Upon receipt of the final\n   * WebSocket close event, the connection request queue is serviced. If there is no connection\n   * to close, this function just services the connection request queue and returns.\n   */\n  closeConnection(): void;\n\n  /**\n   * Mute or unmute the client\n   *\n   * @param muted Whether the client is to be muted (true) or unmuted (false)\n   */\n  mute(muted: boolean): void;\n\n  /**\n   * Returns whether the client has a connection open in the ready state\n   *\n   * @returns Whether the client has a connection open in the ready state\n   */\n  ready(): boolean;\n\n  /**\n   * Sends a pause frame with the given stream ids.\n   */\n  pause(streamIds: number[]): void;\n\n  /**\n   * Sends a resume frame with the given stream ids.\n   */\n  resume(streamIds: number[]): void;\n\n  /**\n   * Allows an attendee in a replica meeting to join the primary meeting as if\n   * they were a normal attendee. Once successfully joined they will receive a callback on\n   * `SignalingClientObserver.handleSignalingClientEvent`.  See documentation of observer for more information.\n   *\n   * They may also receive another callback on `SignalingClientObserver.handleSignalingClientEvent` to indicate they\n   * can begin to share video.\n   *\n   * Failure will also be indicated through the `SignalingClientObserver.handleSignalingClientEvent` callback.\n   *\n   * @param credentials The credentials for the primary meeting.  This needs to be obtained out of band.\n   */\n  promoteToPrimaryMeeting(credentials: MeetingSessionCredentials): void;\n\n  /**\n   * Leave the primary meeting and stop sharing audio, video (if started), and data messages.\n   */\n  demoteFromPrimaryMeeting(): void;\n}\n"]}