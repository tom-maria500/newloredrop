{"version":3,"file":"DeviceChangeObserver.js","sourceRoot":"","sources":["../../src/devicechangeobserver/DeviceChangeObserver.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * [[DeviceChangeObserver]] can be registered with a [[DeviceController]] to receive callbacks on device change events.\n */\nexport default interface DeviceChangeObserver {\n  /**\n   * Called when audio inputs are changed.\n   */\n  audioInputsChanged?(freshAudioInputDeviceList?: MediaDeviceInfo[]): void;\n\n  /**\n   * Called when audio outputs are changed.\n   */\n  audioOutputsChanged?(freshAudioOutputDeviceList?: MediaDeviceInfo[]): void;\n\n  /**\n   * Called when video inputs are changed.\n   */\n  videoInputsChanged?(freshVideoInputDeviceList?: MediaDeviceInfo[]): void;\n\n  /**\n   * Called when the selected input device is indicated by the browser to be muted or unmuted\n   * at the operating system or hardware level, and thus the SDK will be unable to send audio\n   * regardless of the application's own mute state.\n   *\n   * This method will always be called after a device is selected or when the mute state changes\n   * after selection.\n   *\n   * If the selected input device is a `MediaStream`, it will be passed here as\n   * the value of `device`. Otherwise, the selected device ID will be provided.\n   *\n   * @param deviceId the currently selected audio input device.\n   * @param muteState whether the input device is known to be muted.\n   */\n  audioInputMuteStateChanged?(device: string | MediaStream, muteState: boolean): void;\n\n  /**\n   * Called when the current audio input media stream ended event triggers.\n   */\n  audioInputStreamEnded?(deviceId?: string): void;\n\n  /**\n   * Called when the current video input media stream ended event triggers.\n   */\n  videoInputStreamEnded?(deviceId?: string): void;\n}\n"]}