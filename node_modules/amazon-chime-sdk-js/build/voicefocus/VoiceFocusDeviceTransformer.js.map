{"version":3,"file":"VoiceFocusDeviceTransformer.js","sourceRoot":"","sources":["../../src/voicefocus/VoiceFocusDeviceTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { VoiceFocusFetchBehavior, VoiceFocusPaths } from '../../libs/voicefocus/types';\nimport { Logger as VoiceFocusLogger } from '../../libs/voicefocus/types';\nimport type { NodeArguments } from '../../libs/voicefocus/voicefocus';\nimport { VoiceFocus } from '../../libs/voicefocus/voicefocus';\nimport type Device from '../devicecontroller/Device';\nimport Logger from '../logger/Logger';\nimport { isIFramed } from '../utils/Utils';\nimport Versioning from '../versioning/Versioning';\nimport type AssetSpec from './AssetSpec';\nimport LoggerAdapter from './LoggerAdapter';\nimport type VoiceFocusConfig from './VoiceFocusConfig';\nimport type VoiceFocusDeviceOptions from './VoiceFocusDeviceOptions';\nimport type VoiceFocusSpec from './VoiceFocusSpec';\nimport VoiceFocusTransformDevice from './VoiceFocusTransformDevice';\nimport VoiceFocusTransformDeviceDelegate from './VoiceFocusTransformDeviceDelegate';\n\n/**\n * `VoiceFocusDeviceTransformer` is used to create {@link VoiceFocusTransformDevice|transform devices}\n * that apply Amazon Voice Focus noise suppression to audio input.\n *\n * This transformer captures relevant configuration. You should check for support, initialize,\n * and then create a device as follows:\n *\n * ```typescript\n * const deviceID = null;\n *\n * // This check for support is cheap and quick, and should be used to gate use\n * // of this feature.\n * if (!(await VoiceFocusDeviceTransformer.isSupported()) {\n *   console.log('Amazon Voice Focus not supported in this browser.');\n *   return deviceID;\n * }\n *\n * let transformer: VoiceFocusDeviceTransformer;\n * try {\n *   // This operation can fail in ways that do not indicate no support,\n *   // but do indicate an inability to apply Amazon Voice Focus. Trying again\n *   // might succeed.\n *   transformer = await VoiceFocusDeviceTransformer.create({});\n * } catch (e) {\n *   // Something went wrong.\n *   console.log('Unable to instantiate Amazon Voice Focus.');\n *   return deviceID;\n * }\n *\n * if (!transformer.isSupported()) {\n *   // The transformer will fall through, but your UI might care.\n *   console.log('Amazon Voice Focus not supported in this browser.');\n * }\n *\n * return await transformer.createTransformDevice(deviceID);\n * ```\n */\nexport class VoiceFocusDeviceTransformer {\n  // The Voice Focus logger is a bit more sophisticated, allowing following args,\n  // and allows drop-in use of {@link console}. We create an adapter to allow SDK loggers\n  // to be used until they match.\n  private logger: Logger;\n  private vfLogger: VoiceFocusLogger;\n  private preload: boolean;\n  private vf: VoiceFocus;\n\n  private configuration: Promise<VoiceFocusConfig>;\n  private fetchBehavior: VoiceFocusFetchBehavior;\n  private pendingVoiceFocus: Promise<[VoiceFocus, VoiceFocusTransformDeviceDelegate]>;\n  private supported = true;\n\n  /**\n   * Quickly check whether Amazon Voice Focus is supported on this platform.\n   *\n   * This will return `false` if key technologies are absent. A value of `true` does not\n   * necessarily mean that adding Amazon Voice Focus will succeed: it is still possible that the\n   * configuration of the page or the CPU speed of the device are limiting factors.\n   *\n   * {@link VoiceFocusDeviceTransformer.create} will return an instance whose\n   * `isSupported` method more accurately reflects whether Amazon Voice Focus\n   * is supported in the current environment.\n   *\n   * This method will only reject if you provide invalid inputs.\n   *\n   * @param spec An optional asset group and URL paths to use when fetching. You can pass\n   *             a complete {@link VoiceFocusSpec} here for convenience, matching the signature of {@link VoiceFocusDeviceTransformer.create}.\n   * @param options Additional named arguments, including `logger`. Set\n   *                `allowIFrame` to false to cause the support check to fail in\n   *                an iframe.\n   *                Chromium's security model means that audio processing works\n   *                poorly in iframes.\n   */\n  static isSupported(\n    spec?: AssetSpec & { paths?: VoiceFocusPaths },\n    options?: {\n      logger?: Logger;\n      allowIFrame?: boolean;\n    }\n  ): Promise<boolean> {\n    const fetchBehavior = VoiceFocusDeviceTransformer.defaultFetchBehavior();\n    const logger = options?.logger ? new LoggerAdapter(options.logger) : undefined;\n    const opts = {\n      fetchBehavior,\n      logger,\n    };\n\n    // This is impossible to test in Node, so Istanbul ignore.\n    /* istanbul ignore next */\n    if (isIFramed()) {\n      if (options?.allowIFrame === false) {\n        options?.logger?.error('Amazon Voice Focus support check inside iframe: not supported.');\n        return Promise.resolve(false);\n      } else {\n        options?.logger?.warn('Amazon Voice Focus support check inside iframe: not recommended.');\n      }\n    }\n\n    return VoiceFocus.isSupported(VoiceFocusDeviceTransformer.augmentSpec(spec), opts);\n  }\n\n  /**\n   * Create a transformer that can apply Amazon Voice Focus noise suppression to a device.\n   *\n   * This method will reject if the provided spec is invalid, or if the process of\n   * checking for support or estimating fails (e.g., because the network is unreachable).\n   *\n   * If Amazon Voice Focus is not supported on this device, this call will not reject and\n   * `isSupported` will return `false` on the returned instance. That instance will\n   * pass through devices unmodified.\n   *\n   * @param spec A definition of how you want Amazon Voice Focus to behave. See the declaration of\n   *             {@link VoiceFocusSpec} for details.\n   * @param options Additional named arguments, including `logger` and `preload`.\n   */\n  static async create(\n    spec: VoiceFocusSpec = {},\n    options: VoiceFocusDeviceOptions = {},\n    config?: VoiceFocusConfig,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    createMeetingResponse?: any,\n    // eslint-disable-next-line\n    createAttendeeResponse?: any\n  ): Promise<VoiceFocusDeviceTransformer> {\n    if (createMeetingResponse) {\n      if (createMeetingResponse.Meeting.Meeting) {\n        createMeetingResponse = createMeetingResponse.Meeting;\n      }\n    }\n    const meetingFeaturesAllowsES =\n      createMeetingResponse?.Meeting?.MeetingFeatures?.Audio?.EchoReduction === 'AVAILABLE';\n    const forbiddenConfig =\n      config &&\n      config.supported === true &&\n      config.model.name === 'ns_es' &&\n      !meetingFeaturesAllowsES;\n    const forbiddenSpec = spec.name === 'ns_es' && !meetingFeaturesAllowsES;\n    if (forbiddenConfig || forbiddenSpec) {\n      throw new Error('Echo Reduction requested but not enabled.');\n    }\n    const transformer = new VoiceFocusDeviceTransformer(spec, options, config);\n\n    // This also preps the first `VoiceFocus` instance.\n    await transformer.init();\n    return transformer;\n  }\n\n  /**\n   * Given a spec and options, perform the configuration work that is\n   * ordinarily performed during creation of a transformer.\n   *\n   * The computed configuration is not portable between devices or sessions,\n   * but is useful for 'moving' transformers between windows.\n   *\n   * Pass the returned configuration as the third argument to a call to\n   * {@link VoiceFocusDeviceTransformer.create} with the matching spec.\n   */\n  static async configure(\n    spec: VoiceFocusSpec = {},\n    options: VoiceFocusDeviceOptions = {}\n  ): Promise<VoiceFocusConfig> {\n    const transformer = new VoiceFocusDeviceTransformer(spec, options, undefined);\n    return transformer.configure(true);\n  }\n\n  /**\n   * Return the computed configuration for this transformer.\n   */\n  getConfiguration(): Promise<VoiceFocusConfig> {\n    return this.configuration;\n  }\n\n  /**\n   * Return whether this transformer is able to function in this environment.\n   * If not, calls to\n   * {@link VoiceFocusDeviceTransformer.createTransformDevice|createTransformDevice}\n   * will pass through an unmodified device.\n   */\n  isSupported(): boolean {\n    return this.supported;\n  }\n\n  /**\n   * Apply Amazon Voice Focus to the selected {@link Device}.\n   *\n   * If this is a stream, it should be one that does not include other noise suppression features,\n   * and you should consider whether to disable automatic gain control (AGC) on the stream, because\n   * it can interact with noise suppression.\n   *\n   * @returns a device promise. This will always resolve to either a\n   *          {@link VoiceFocusTransformDevice} or undefined; it will never reject.\n   */\n  async createTransformDevice(\n    device: Device,\n    nodeOptions?: NodeArguments\n  ): Promise<VoiceFocusTransformDevice | undefined> {\n    if (!this.supported) {\n      // Fall back.\n      return undefined;\n    }\n\n    try {\n      const preload = true;\n      const [vf, delegate] = await this.allocateVoiceFocus(preload);\n      const options = { ...nodeOptions, es: this.spec.name === 'ns_es' };\n      return new VoiceFocusTransformDevice(device, vf, delegate, options);\n    } catch (e) {\n      // Fall back.\n      /* istanbul ignore next */\n      return undefined;\n    }\n  }\n\n  /**\n   * Destroy the Voice Focus instance and worker thread associated with the transformer.\n   */\n  static async destroyVoiceFocus(transformer: VoiceFocusDeviceTransformer): Promise<void> {\n    /* istanbul ignore next */\n    transformer?.vf?.destroy();\n  }\n\n  private constructor(\n    private spec: VoiceFocusSpec,\n    {\n      preload = true,\n      logger,\n      fetchBehavior = VoiceFocusDeviceTransformer.defaultFetchBehavior(),\n    }: VoiceFocusDeviceOptions,\n    config: VoiceFocusConfig | undefined\n  ) {\n    this.logger = logger;\n    this.vfLogger = logger ? new LoggerAdapter(logger) : undefined;\n    this.preload = preload;\n    this.fetchBehavior = fetchBehavior;\n\n    // If the user didn't specify one, add the default, which is\n    // identified by the major and minor SDK version.\n    this.spec = VoiceFocusDeviceTransformer.augmentSpec(this.spec);\n\n    if (config) {\n      this.configuration = Promise.resolve(config);\n    }\n  }\n\n  private static augmentSpec(spec: VoiceFocusSpec): VoiceFocusSpec {\n    if (!spec || (!spec.assetGroup && !spec.revisionID)) {\n      return {\n        ...spec,\n        assetGroup: VoiceFocusDeviceTransformer.currentSDKAssetGroup(),\n      };\n    }\n    return spec;\n  }\n\n  private async configure(preResolve: boolean = false): Promise<VoiceFocusConfig> {\n    const options = {\n      fetchBehavior: this.fetchBehavior,\n      preResolve,\n      logger: this.vfLogger,\n    };\n\n    return VoiceFocus.configure(this.spec, options);\n  }\n\n  private async init(): Promise<void> {\n    if (!this.configuration) {\n      this.configuration = this.configure();\n    }\n\n    const config = await this.configuration;\n    if (!config.supported) {\n      // No need to init: it won't work.\n      this.supported = false;\n      return;\n    }\n\n    // We initialize the first one right now, which makes it easier to detect\n    // possible failures.\n    // This can throw for malformed input. Pass that up the chain.\n    this.pendingVoiceFocus = this.createVoiceFocus(config, this.preload);\n\n    try {\n      await this.pendingVoiceFocus;\n    } catch (e) {\n      this.logger?.error(`Unable to initialize Amazon Voice Focus: ${e}`);\n      this.supported = false;\n    }\n  }\n\n  private async createVoiceFocus(\n    config: VoiceFocusConfig,\n    preload: boolean\n  ): Promise<[VoiceFocus, VoiceFocusTransformDeviceDelegate]> {\n    const delegate = new VoiceFocusTransformDeviceDelegate();\n    this.vf = await VoiceFocus.init(config, { delegate, preload, logger: this.vfLogger });\n    return [this.vf, delegate];\n  }\n\n  private async allocateVoiceFocus(\n    preload: boolean\n  ): Promise<[VoiceFocus, VoiceFocusTransformDeviceDelegate]> {\n    // A little safety.\n    /* istanbul ignore next */\n    if (!this.supported) {\n      throw new Error('Not supported.');\n    }\n\n    if (this.pendingVoiceFocus) {\n      // Use the one we already have, and free the slot for any future execution.\n      const vf = this.pendingVoiceFocus;\n      this.pendingVoiceFocus = undefined;\n      return vf;\n    }\n\n    return this.createVoiceFocus(await this.configuration, preload);\n  }\n\n  private static majorVersion(): string {\n    return Versioning.sdkVersion.match(/^[1-9][0-9]*\\.(?:0|[1-9][0-9]*)/)[0];\n  }\n\n  private static majorMinorVersion(): string {\n    return Versioning.sdkVersion.match(/^[1-9][0-9]*\\.(?:0|(?:[1-9][0-9]*))\\.(?:0|[1-9][0-9]*)/)[0];\n  }\n\n  private static currentSDKAssetGroup(): string {\n    // Just on the off chance someone does something silly, handle\n    // malformed version strings here.\n    const v = this.majorVersion();\n\n    // Just a little safety.\n    /* istanbul ignore next */\n    if (!v) {\n      return `stable-v1`;\n    }\n\n    return `sdk-${v}`;\n  }\n\n  // Note that we use query strings here, not headers, in order to make these requests 'simple' and\n  // avoid the need for CORS preflights.\n  // Be very, very careful if you choose to add headers here. You should never need to.\n  private static defaultFetchBehavior(): VoiceFocusFetchBehavior {\n    // Just a little safety.\n    /* istanbul ignore next */\n    const version = VoiceFocusDeviceTransformer.majorMinorVersion() || 'unknown';\n    const ua = Versioning.sdkUserAgentLowResolution;\n    return {\n      escapedQueryString: `sdk=${encodeURIComponent(version)}&ua=${encodeURIComponent(ua)}`,\n    };\n  }\n}\n\nexport default VoiceFocusDeviceTransformer;\n"]}