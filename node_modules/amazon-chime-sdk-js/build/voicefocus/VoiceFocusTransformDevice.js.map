{"version":3,"file":"VoiceFocusTransformDevice.js","sourceRoot":"","sources":["../../src/voicefocus/VoiceFocusTransformDevice.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AGCOptions, VoiceFocusAudioWorkletNode } from '../../libs/voicefocus/types';\nimport { NodeArguments, VoiceFocus } from '../../libs/voicefocus/voicefocus';\nimport AudioMixObserver from '../audiomixobserver/AudioMixObserver';\nimport AudioVideoFacade from '../audiovideofacade/AudioVideoFacade';\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport AudioNodeSubgraph from '../devicecontroller/AudioNodeSubgraph';\nimport type AudioTransformDevice from '../devicecontroller/AudioTransformDevice';\nimport type Device from '../devicecontroller/Device';\nimport VoiceFocusTransformDeviceDelegate from './VoiceFocusTransformDeviceDelegate';\nimport VoiceFocusTransformDeviceObserver from './VoiceFocusTransformDeviceObserver';\n\n/**\n * A device that augments a {@link Device} to apply Amazon Voice Focus\n * noise suppression to an audio input.\n */\nclass VoiceFocusTransformDevice implements AudioTransformDevice, AudioMixObserver {\n  /** @internal */\n  constructor(\n    private device: Device,\n    private voiceFocus: VoiceFocus,\n    private delegate: VoiceFocusTransformDeviceDelegate,\n    private nodeOptions: NodeArguments,\n    private failed: boolean = false,\n    private node: VoiceFocusAudioWorkletNode | undefined = undefined,\n    private browserBehavior: DefaultBrowserBehavior = new DefaultBrowserBehavior(),\n\n    /** farEndStreams` maps from a stream that could cause echo or interfere with double talkto an `AudioSourceNode` that we use to mix multiple such streams.*/\n    private farEndStreamToAudioSourceNode: Map<\n      MediaStream,\n      MediaStreamAudioSourceNode | null\n    > = new Map(),\n\n    /** mixDestNode is the Audio Destination Node where farEndStreams got mixed into one stream.*/\n    private mixDestNode: MediaStreamAudioDestinationNode | undefined = undefined,\n\n    /** mixSourceNode is the Audio Source Node where the stream out of mixDestNode got transferred into Audio Worklet Node for processing.*/\n    private mixSourceNode: MediaStreamAudioSourceNode | undefined = undefined\n  ) {}\n\n  /**\n   * Return the inner device as provided during construction, or updated via\n   * {@link VoiceFocusTransformDevice.chooseNewInnerDevice}. Do not confuse\n   * this method with {@link VoiceFocusTransformDevice.intrinsicDevice}.\n   */\n  getInnerDevice(): Device {\n    return this.device;\n  }\n\n  /**\n   * Disable the audio node while muted to reduce CPU usage.\n   *\n   * @param muted whether the audio device should be muted.\n   */\n  async mute(muted: boolean): Promise<void> {\n    if (!this.node) {\n      return;\n    }\n    if (muted) {\n      await this.node.disable();\n    } else {\n      await this.node.enable();\n    }\n  }\n\n  /**\n   * Dispose of the inner workings of the transform device. After this method is called\n   * you will need to create a new device to use Amazon Voice Focus again.\n   */\n  async stop(): Promise<void> {\n    if (!this.node) {\n      return;\n    }\n    this.node.disconnect();\n    await this.node.stop();\n  }\n\n  /**\n   * If you wish to choose a different inner device, but continue to use Amazon Voice Focus, you\n   * can use this method to efficiently create a new device that will reuse\n   * the same internal state. Only one of the two devices can be used at a time: switch\n   * between them using {@link DeviceController.startAudioInput}.\n   *\n   * If the same device is passed as is currently in use, `this` is returned.\n   *\n   * @param inner The new inner device to use.\n   */\n  async chooseNewInnerDevice(inner: Device): Promise<VoiceFocusTransformDevice> {\n    // If the new device is 'default', always recreate. Chrome can switch out\n    // the real device underneath us.\n    if (this.device === inner && !isDefaultDevice(inner)) {\n      return this;\n    }\n\n    return new VoiceFocusTransformDevice(\n      inner,\n      this.voiceFocus,\n      this.delegate,\n      this.nodeOptions,\n      this.failed,\n      this.node,\n      this.browserBehavior,\n      this.farEndStreamToAudioSourceNode,\n      this.mixDestNode,\n      this.mixSourceNode\n    );\n  }\n\n  async intrinsicDevice(): Promise<Device> {\n    if (this.failed) {\n      return this.device;\n    }\n    const isUsingES = this.nodeOptions.es;\n\n    // Turn the Device into constraints with appropriate AGC settings.\n    const trackConstraints: MediaTrackConstraints = {\n      echoCancellation: !isUsingES,\n      // @ts-ignore\n      googEchoCancellation: !isUsingES,\n      // @ts-ignore\n      googEchoCancellation2: !isUsingES,\n\n      noiseSuppression: false,\n\n      // @ts-ignore\n      googNoiseSuppression: false,\n      // @ts-ignore\n      googHighpassFilter: false,\n      // @ts-ignore\n      googNoiseSuppression2: false,\n    };\n\n    let useBuiltInAGC;\n    if (this.nodeOptions && this.nodeOptions.agc !== undefined) {\n      useBuiltInAGC = this.nodeOptions.agc.useBuiltInAGC;\n    } else {\n      useBuiltInAGC = true;\n    }\n\n    trackConstraints.autoGainControl = useBuiltInAGC;\n    // @ts-ignore\n    trackConstraints.googAutoGainControl = useBuiltInAGC;\n    // @ts-ignore\n    trackConstraints.googAutoGainControl2 = useBuiltInAGC;\n\n    // Empty string and null.\n    if (!this.device) {\n      return trackConstraints;\n    }\n\n    // Device ID.\n    if (typeof this.device === 'string') {\n      /* istanbul ignore if */\n      if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {\n        trackConstraints.deviceId = this.device;\n      } else {\n        trackConstraints.deviceId = { exact: this.device };\n      }\n      return trackConstraints;\n    }\n\n    // It's a stream.\n    if ((this.device as MediaStream).id) {\n      // Nothing we can do.\n      return this.device;\n    }\n\n    // It's constraints.\n    return {\n      ...this.device,\n      ...trackConstraints,\n    };\n  }\n\n  async createAudioNode(context: AudioContext): Promise<AudioNodeSubgraph> {\n    if (this.node?.context === context) {\n      return {\n        start: this.node,\n        end: this.node,\n      };\n    }\n\n    const agc: AGCOptions = { useVoiceFocusAGC: false };\n    const options = {\n      enabled: true,\n      agc,\n      ...this.nodeOptions,\n    };\n\n    try {\n      this.node?.disconnect();\n      this.node = await this.voiceFocus.createNode(context, options);\n      if (this.nodeOptions.es) {\n        this.mixDestNode = new MediaStreamAudioDestinationNode(context, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n        });\n        for (const stream of this.farEndStreamToAudioSourceNode.keys()) {\n          this.assignFarEndStreamToAudioSourceNode(stream);\n        }\n        this.createMixSourceNode();\n      }\n      const start = this.node;\n      const end = this.node;\n      return { start, end };\n    } catch (e) {\n      // It's better to return some audio stream than nothing.\n      this.failed = true;\n      this.delegate.onFallback(this, e);\n      throw e;\n    }\n  }\n\n  async observeMeetingAudio(audioVideo: AudioVideoFacade): Promise<void> {\n    if (!this.nodeOptions.es) {\n      return;\n    }\n    audioVideo.addAudioMixObserver(this);\n    const stream = await audioVideo.getCurrentMeetingAudioStream();\n    if (stream) {\n      this.addFarEndStream(stream);\n    }\n  }\n\n  async unObserveMeetingAudio(audioVideo: AudioVideoFacade): Promise<void> {\n    if (!this.nodeOptions.es) {\n      return;\n    }\n    audioVideo.removeAudioMixObserver(this);\n    const stream = await audioVideo.getCurrentMeetingAudioStream();\n    if (stream) {\n      this.removeFarendStream(stream);\n    }\n  }\n\n  /**\n   * Add an observer to receive notifications about Amazon Voice Focus lifecycle events.\n   * See {@link VoiceFocusTransformDeviceObserver} for details.\n   * If the observer has already been added, this method call has no effect.\n   */\n  addObserver(observer: VoiceFocusTransformDeviceObserver): void {\n    this.delegate.addObserver(observer);\n  }\n\n  /**\n   * Remove an existing observer. If the observer has not been previously {@link\n   * VoiceFocusTransformDevice.addObserver|added}, this method call has no effect.\n   */\n  removeObserver(observer: VoiceFocusTransformDeviceObserver): void {\n    this.delegate.removeObserver(observer);\n  }\n\n  async addFarEndStream(activeStream: MediaStream | null): Promise<void> {\n    if (\n      !this.nodeOptions.es ||\n      !activeStream ||\n      this.farEndStreamToAudioSourceNode.has(activeStream)\n    ) {\n      return;\n    }\n    if (this.node) {\n      this.assignFarEndStreamToAudioSourceNode(activeStream);\n    } else {\n      this.farEndStreamToAudioSourceNode.set(activeStream, null);\n    }\n  }\n\n  async removeFarendStream(inactiveStream: MediaStream): Promise<void> {\n    this.farEndStreamToAudioSourceNode.get(inactiveStream)?.disconnect();\n    this.farEndStreamToAudioSourceNode.delete(inactiveStream);\n  }\n\n  async meetingAudioStreamBecameActive(activeStream: MediaStream | null): Promise<void> {\n    this.addFarEndStream(activeStream);\n  }\n\n  async meetingAudioStreamBecameInactive(inactiveStream: MediaStream): Promise<void> {\n    this.removeFarendStream(inactiveStream);\n  }\n\n  private assignFarEndStreamToAudioSourceNode(streamToAdd: MediaStream): void {\n    const streamNodeToAdd = (this.node.context as AudioContext).createMediaStreamSource(\n      streamToAdd\n    );\n    streamNodeToAdd.channelCount = 1;\n    streamNodeToAdd.channelCountMode = 'explicit';\n    this.farEndStreamToAudioSourceNode.set(streamToAdd, streamNodeToAdd);\n    streamNodeToAdd.connect(this.mixDestNode, 0);\n  }\n\n  private createMixSourceNode(): void {\n    this.mixSourceNode = (this.node.context as AudioContext).createMediaStreamSource(\n      this.mixDestNode.stream\n    );\n    this.mixSourceNode.channelCount = 1;\n    this.mixSourceNode.channelCountMode = 'explicit';\n    this.mixSourceNode.connect(this.node, 0, 1);\n  }\n}\n\nfunction isDefaultDevice(device: Device): boolean {\n  if (device === 'default') {\n    return true;\n  }\n  if (!device || typeof device !== 'object') {\n    return false;\n  }\n  if ('deviceId' in device && device.deviceId === 'default') {\n    return true;\n  }\n  if ('id' in device && device.id === 'default') {\n    return true;\n  }\n  return false;\n}\n\nexport default VoiceFocusTransformDevice;\n"]}