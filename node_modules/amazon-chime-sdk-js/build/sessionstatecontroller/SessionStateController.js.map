{"version":3,"file":"SessionStateController.js","sourceRoot":"","sources":["../../src/sessionstatecontroller/SessionStateController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SessionStateControllerAction } from './SessionStateControllerAction';\nimport { SessionStateControllerState } from './SessionStateControllerState';\nimport { SessionStateControllerTransitionResult } from './SessionStateControllerTransitionResult';\n\n/**\n * Manages [[SessionStateControllerState]] state transitions via\n * [[SessionStateControllerAction]] actions and ensures that the work functions\n * attached to the transition are sequenced properly.\n */\nexport default interface SessionStateController {\n  /**\n   * Performs the state transition action and if the transition is possible calls\n   * the work function. If the transition is not currently possible, but could\n   * become possible after the next transition then the action may be deferred.\n   * For example, while in the Connecting state, if Stop is called this action\n   * will be deferred until the Connected state is reached.\n   */\n  perform(\n    action: SessionStateControllerAction,\n    work: () => void\n  ): SessionStateControllerTransitionResult;\n\n  /**\n   * Gets the current state.\n   */\n  state(): SessionStateControllerState;\n}\n"]}