{"version":3,"file":"DefaultSessionStateController.js","sourceRoot":"","sources":["../../src/sessionstatecontroller/DefaultSessionStateController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport SessionStateController from './SessionStateController';\nimport { SessionStateControllerAction } from './SessionStateControllerAction';\nimport { SessionStateControllerDeferPriority } from './SessionStateControllerDeferPriority';\nimport { SessionStateControllerState } from './SessionStateControllerState';\nimport { SessionStateControllerTransitionResult } from './SessionStateControllerTransitionResult';\n\nexport default class DefaultSessionStateController implements SessionStateController {\n  constructor(private logger: Logger) {}\n\n  perform(\n    action: SessionStateControllerAction,\n    work: () => void\n  ): SessionStateControllerTransitionResult {\n    const state = this.currentState;\n    if (\n      state === SessionStateControllerState.NotConnected &&\n      action === SessionStateControllerAction.Connect\n    ) {\n      this.transition(SessionStateControllerState.Connecting, action);\n    } else if (\n      state === SessionStateControllerState.Connecting &&\n      action === SessionStateControllerAction.Fail\n    ) {\n      this.transition(SessionStateControllerState.Disconnecting, action);\n    } else if (\n      state === SessionStateControllerState.Connecting &&\n      action === SessionStateControllerAction.FinishConnecting\n    ) {\n      this.transition(SessionStateControllerState.Connected, action);\n    } else if (\n      state === SessionStateControllerState.Connected &&\n      action === SessionStateControllerAction.Disconnect\n    ) {\n      this.transition(SessionStateControllerState.Disconnecting, action);\n    } else if (\n      state === SessionStateControllerState.Connected &&\n      action === SessionStateControllerAction.Reconnect\n    ) {\n      this.transition(SessionStateControllerState.Connecting, action);\n    } else if (\n      state === SessionStateControllerState.Connected &&\n      action === SessionStateControllerAction.Fail\n    ) {\n      this.transition(SessionStateControllerState.Disconnecting, action);\n    } else if (\n      state === SessionStateControllerState.Connected &&\n      action === SessionStateControllerAction.Update\n    ) {\n      this.transition(SessionStateControllerState.Updating, action);\n    } else if (\n      state === SessionStateControllerState.Updating &&\n      action === SessionStateControllerAction.Fail\n    ) {\n      this.transition(SessionStateControllerState.Disconnecting, action);\n    } else if (\n      state === SessionStateControllerState.Updating &&\n      action === SessionStateControllerAction.FinishUpdating\n    ) {\n      this.transition(SessionStateControllerState.Connected, action);\n    } else if (\n      state === SessionStateControllerState.Disconnecting &&\n      action === SessionStateControllerAction.FinishDisconnecting\n    ) {\n      this.transition(SessionStateControllerState.NotConnected, action);\n    } else if (this.canDefer(action)) {\n      this.logger.info(\n        `deferring transition from ${SessionStateControllerState[this.currentState]} with ${\n          SessionStateControllerAction[action]\n        }`\n      );\n      this.deferAction(action, work);\n      return SessionStateControllerTransitionResult.DeferredTransition;\n    } else {\n      this.logger.warn(\n        `no transition found from ${SessionStateControllerState[this.currentState]} with ${\n          SessionStateControllerAction[action]\n        }`\n      );\n      return SessionStateControllerTransitionResult.NoTransitionAvailable;\n    }\n    try {\n      work();\n    } catch (e) {\n      this.logger.error(\n        `error during state ${SessionStateControllerState[this.currentState]} with action ${\n          SessionStateControllerAction[action]\n        }: ${e}`\n      );\n      this.logger.info(`rolling back transition to ${SessionStateControllerState[state]}`);\n      this.currentState = state;\n      return SessionStateControllerTransitionResult.TransitionFailed;\n    }\n    this.performDeferredAction();\n    return SessionStateControllerTransitionResult.Transitioned;\n  }\n\n  state(): SessionStateControllerState {\n    return this.currentState;\n  }\n\n  private currentState: SessionStateControllerState = SessionStateControllerState.NotConnected;\n  private deferredAction: SessionStateControllerAction | null = null;\n  private deferredWork: () => void | null = null;\n\n  private transition(\n    newState: SessionStateControllerState,\n    action: SessionStateControllerAction\n  ): void {\n    this.logger.info(\n      `transitioning from ${SessionStateControllerState[this.currentState]} to ${\n        SessionStateControllerState[newState]\n      } with ${SessionStateControllerAction[action]}`\n    );\n    this.currentState = newState;\n  }\n\n  private deferPriority(action: SessionStateControllerAction): SessionStateControllerDeferPriority {\n    switch (action) {\n      case SessionStateControllerAction.Disconnect:\n        return SessionStateControllerDeferPriority.VeryHigh;\n      case SessionStateControllerAction.Fail:\n        return SessionStateControllerDeferPriority.High;\n      case SessionStateControllerAction.Reconnect:\n        return SessionStateControllerDeferPriority.Medium;\n      case SessionStateControllerAction.Update:\n        return SessionStateControllerDeferPriority.Low;\n      default:\n        return SessionStateControllerDeferPriority.DoNotDefer;\n    }\n  }\n\n  private deferAction(action: SessionStateControllerAction, work: () => void): void {\n    if (\n      this.deferredAction !== null &&\n      this.deferPriority(this.deferredAction) > this.deferPriority(action)\n    ) {\n      return;\n    }\n    this.deferredAction = action;\n    this.deferredWork = work;\n  }\n\n  private canDefer(action: SessionStateControllerAction): boolean {\n    return (\n      this.deferPriority(action) !== SessionStateControllerDeferPriority.DoNotDefer &&\n      (this.currentState === SessionStateControllerState.Connecting ||\n        this.currentState === SessionStateControllerState.Updating)\n    );\n  }\n\n  private performDeferredAction(): SessionStateControllerTransitionResult {\n    if (!this.deferredAction) {\n      return;\n    }\n    const deferredAction = this.deferredAction;\n    const deferredWork = this.deferredWork;\n    this.deferredAction = null;\n    this.deferredWork = null;\n    this.logger.info(`performing deferred action ${SessionStateControllerAction[deferredAction]}`);\n    if (\n      this.perform(deferredAction, deferredWork) !==\n      SessionStateControllerTransitionResult.Transitioned\n    ) {\n      this.logger.info(\n        `unable to perform deferred action ${\n          SessionStateControllerAction[deferredAction]\n        } in state ${SessionStateControllerState[this.currentState]}`\n      );\n    }\n  }\n}\n"]}