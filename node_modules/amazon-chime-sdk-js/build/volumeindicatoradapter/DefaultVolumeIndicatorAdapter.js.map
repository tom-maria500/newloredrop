{"version":3,"file":"DefaultVolumeIndicatorAdapter.js","sourceRoot":"","sources":["../../src/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport {\n  SdkAudioAttendeeState,\n  SdkAudioMetadataFrame,\n  SdkAudioStreamIdInfoFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport VolumeIndicatorAdapter from './VolumeIndicatorAdapter';\n\nexport default class DefaultVolumeIndicatorAdapter implements VolumeIndicatorAdapter {\n  private streamIdToAttendeeId: { [key: number]: string } = {};\n  private streamIdToExternalUserId: { [key: number]: string } = {};\n  private warnedAboutMissingStreamIdMapping: { [key: number]: boolean } = {};\n  private attendeeIdToStreamId: { [key: string]: number } = {};\n  private sessionReconnected: boolean = false;\n  static MAX_SIGNAL_STRENGTH_LEVELS: number = 2;\n  static IMPLICIT_VOLUME: number = 0;\n  static IMPLICIT_SIGNAL_STRENGTH: number = 1;\n\n  constructor(\n    private logger: Logger,\n    private realtimeController: RealtimeController,\n    private minVolumeDecibels: number,\n    private maxVolumeDecibels: number,\n    private selfAttendeeId?: string\n  ) {}\n\n  onReconnect(): void {\n    this.sessionReconnected = true;\n  }\n\n  sendRealtimeUpdatesForAudioStreamIdInfo(info: SdkAudioStreamIdInfoFrame): void {\n    let streamIndex = 0;\n    for (const stream of info.streams) {\n      const hasAttendeeId = !!stream.attendeeId;\n      const hasExternalUserId = !!stream.externalUserId;\n      const hasMuted = stream.hasOwnProperty('muted');\n      const hasDropped = !!stream.dropped;\n      if (hasAttendeeId) {\n        if (\n          !!this.attendeeIdToStreamId[stream.attendeeId] &&\n          this.attendeeIdToStreamId[stream.attendeeId] < stream.audioStreamId\n        ) {\n          delete this.attendeeIdToStreamId[stream.attendeeId];\n        }\n        this.streamIdToAttendeeId[stream.audioStreamId] = stream.attendeeId;\n        const externalUserId = hasExternalUserId ? stream.externalUserId : stream.attendeeId;\n        this.streamIdToExternalUserId[stream.audioStreamId] = externalUserId;\n        this.attendeeIdToStreamId[stream.attendeeId] = stream.audioStreamId;\n        this.realtimeController.realtimeSetAttendeeIdPresence(\n          stream.attendeeId,\n          true,\n          externalUserId,\n          false,\n          { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length }\n        );\n      }\n      if (hasMuted) {\n        const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n        const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n        this.realtimeController.realtimeUpdateVolumeIndicator(\n          attendeeId,\n          null,\n          stream.muted,\n          null,\n          externalUserId\n        );\n      }\n      if (!hasAttendeeId && !hasMuted) {\n        const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n        if (attendeeId) {\n          const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n          delete this.streamIdToAttendeeId[stream.audioStreamId];\n          delete this.streamIdToExternalUserId[stream.audioStreamId];\n          delete this.warnedAboutMissingStreamIdMapping[stream.audioStreamId];\n          if (this.attendeeIdToStreamId[attendeeId] === stream.audioStreamId) {\n            delete this.attendeeIdToStreamId[attendeeId];\n          }\n          let attendeeHasNewStreamId = false;\n          for (const otherStreamId of Object.keys(this.streamIdToAttendeeId)) {\n            const otherStreamIdNumber = parseInt(otherStreamId);\n            if (\n              otherStreamIdNumber > stream.audioStreamId &&\n              this.streamIdToAttendeeId[otherStreamIdNumber] === attendeeId\n            ) {\n              attendeeHasNewStreamId = true;\n              break;\n            }\n          }\n          if (!attendeeHasNewStreamId) {\n            this.realtimeController.realtimeSetAttendeeIdPresence(\n              attendeeId,\n              false,\n              externalUserId,\n              hasDropped,\n              { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length }\n            );\n          }\n        }\n      }\n    }\n    if (this.sessionReconnected) {\n      this.cleanUpState(info);\n      this.sessionReconnected = false;\n    }\n  }\n\n  private cleanUpState(info: SdkAudioStreamIdInfoFrame): void {\n    const localAttendeeIds = Object.values(this.streamIdToAttendeeId);\n    const remoteAttendeeIds = info.streams.map(stream => stream.attendeeId);\n    const deletedAttendeeIds = localAttendeeIds.filter(id => {\n      return !remoteAttendeeIds.includes(id);\n    });\n\n    for (const [index, deletedAttendeeId] of deletedAttendeeIds.entries()) {\n      const streamId = this.attendeeIdToStreamId[deletedAttendeeId];\n      const externalUserId = this.streamIdToExternalUserId[streamId];\n      delete this.streamIdToAttendeeId[streamId];\n      delete this.streamIdToExternalUserId[streamId];\n      delete this.warnedAboutMissingStreamIdMapping[streamId];\n      delete this.attendeeIdToStreamId[deletedAttendeeId];\n\n      // During reconnection, the audio info frame might not include self attendee.\n      // However, if that happens, there would be another audio info frame with the self attendee after reconnection.\n      // So we should not send leave event here for self attendee.\n      if (deletedAttendeeId === this.selfAttendeeId) {\n        this.logger.warn(\n          `the volume indicator adapter cleans up the current attendee (presence = false) after reconnection`\n        );\n        continue;\n      }\n      // The reconnect event does not have information whether the attendee is dropped/left.\n      // Defaulting to attendee leaving the meeting\n      this.realtimeController.realtimeSetAttendeeIdPresence(\n        deletedAttendeeId,\n        false,\n        externalUserId,\n        false,\n        { attendeeIndex: index, attendeesInFrame: deletedAttendeeId.length }\n      );\n    }\n  }\n\n  sendRealtimeUpdatesForAudioMetadata(metadata: SdkAudioMetadataFrame): void {\n    let volumes: { [key: string]: number } | null = null;\n    let signalStrengths: { [key: string]: number } | null = null;\n    for (const state of metadata.attendeeStates) {\n      const attendeeId = this.attendeeIdForStreamId(state.audioStreamId);\n      if (state.hasOwnProperty('volume')) {\n        if (volumes === null) {\n          volumes = {};\n        }\n        if (attendeeId !== null) {\n          // @ts-ignore: TODO fix this protobufjs issue\n          volumes[attendeeId] = this.normalizedVolume(state);\n        }\n      }\n      if (state.hasOwnProperty('signalStrength')) {\n        if (signalStrengths === null) {\n          signalStrengths = {};\n        }\n        if (attendeeId !== null) {\n          // @ts-ignore: TODO fix this protobufjs issue\n          signalStrengths[attendeeId] = this.normalizedSignalStrength(state);\n        }\n      }\n    }\n    this.applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths);\n  }\n\n  private normalizedVolume(state: SdkAudioAttendeeState): number {\n    const dBVolume = -state.volume;\n    const normalized =\n      1.0 - (dBVolume - this.maxVolumeDecibels) / (this.minVolumeDecibels - this.maxVolumeDecibels);\n    const clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n    return clipped;\n  }\n\n  private normalizedSignalStrength(state: SdkAudioAttendeeState): number {\n    const normalized =\n      state.signalStrength / DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS;\n    const clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n    return clipped;\n  }\n\n  private applyRealtimeUpdatesForAudioMetadata(\n    volumes: { [key: string]: number } | null,\n    signalStrengths: { [key: string]: number } | null\n  ): void {\n    for (const streamId in this.streamIdToAttendeeId) {\n      const attendeeId = this.streamIdToAttendeeId[streamId];\n      const externalUserId = this.streamIdToExternalUserId[streamId];\n      let volumeUpdate: number | null = null;\n      let signalStrengthUpdate: number | null = null;\n      if (volumes !== null) {\n        if (volumes.hasOwnProperty(attendeeId)) {\n          volumeUpdate = volumes[attendeeId];\n        } else {\n          volumeUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME;\n        }\n      }\n      if (signalStrengths !== null) {\n        if (signalStrengths.hasOwnProperty(attendeeId)) {\n          signalStrengthUpdate = signalStrengths[attendeeId];\n        } else {\n          signalStrengthUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH;\n        }\n      }\n      if (volumeUpdate !== null || signalStrengthUpdate !== null) {\n        this.realtimeController.realtimeUpdateVolumeIndicator(\n          attendeeId,\n          volumeUpdate,\n          null,\n          signalStrengthUpdate,\n          externalUserId\n        );\n      }\n    }\n  }\n\n  private attendeeIdForStreamId(streamId: number): string | null {\n    if (streamId === 0) {\n      return null;\n    }\n    const attendeeId = this.streamIdToAttendeeId[streamId];\n    if (attendeeId) {\n      return attendeeId;\n    }\n    if (!this.warnedAboutMissingStreamIdMapping[streamId]) {\n      this.warnedAboutMissingStreamIdMapping[streamId] = true;\n      this.logger.warn(`volume indicator stream id ${streamId} seen before being defined`);\n    }\n    return null;\n  }\n}\n"]}