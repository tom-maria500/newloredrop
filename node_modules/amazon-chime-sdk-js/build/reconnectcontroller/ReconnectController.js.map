{"version":3,"file":"ReconnectController.js","sourceRoot":"","sources":["../../src/reconnectcontroller/ReconnectController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * [[ReconnectController]] describes the status about the meeting session connection and makes decisions\n * based on the controller implementation.\n */\nexport default interface ReconnectController {\n  /**\n   * Resets the ReconnectController to its default state.\n   */\n  reset(): void;\n\n  /**\n   * Indicates that a connection attempt has started so that the reconnect deadline\n   * can be set.\n   * @param isFirstConnection whether this is the first attempt to connect for this session\n   */\n  startedConnectionAttempt(isFirstConnection: boolean): void;\n\n  /**\n   * Indicates whether a connection attempt is already in progress.\n   */\n  hasStartedConnectionAttempt(): boolean;\n\n  /**\n   * Indicates whether the current connection attempt was the first.\n   */\n  isFirstConnection(): boolean;\n\n  /**\n   * Disables reconnect until the controller is next reset.\n   */\n  disableReconnect(): void;\n\n  /**\n   * Cancels any pending retry and disables reconnect. The cancel function supplied to the\n   * retryWithBackoff will be called if there was a pending retry.\n   */\n  cancel(): void;\n\n  /**\n   * Switches the reconnect controller into a mode where it will only restart the\n   * peer connection instead of restarting the session starting with the\n   * signaling connection.\n   */\n  enableRestartPeerConnection(): void;\n\n  /**\n   * Returns whether only the peer connection should be restarted at this time.\n   * @returns Whether only the peer connection should be restarted\n   */\n  shouldOnlyRestartPeerConnection(): boolean;\n\n  /**\n   * Decides whether to retry the retryFunc after some amount of backoff depending\n   * on the controller.\n   * @returns Whether the retry will be attempted\n   */\n  retryWithBackoff(retryFunc: () => void, cancelFunc: () => void): boolean;\n\n  /**\n   * Clones the controller.\n   */\n  clone(): ReconnectController;\n\n  /**\n   * Sets the last active external timestamp in milliseconds.\n   */\n  setLastActiveTimestampMs(timestampMs: number): void;\n}\n"]}