{"version":3,"file":"DefaultVideoCaptureAndEncodeParameter.js","sourceRoot":"","sources":["../../src/videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoCaptureAndEncodeParameter from './VideoCaptureAndEncodeParameter';\n\nexport default class DefaultVideoCaptureAndEncodeParameter\n  implements VideoCaptureAndEncodeParameter {\n  constructor(\n    private cameraWidth: number,\n    private cameraHeight: number,\n    private cameraFrameRate: number,\n    private maxEncodeBitrateKbps: number,\n    private isSimulcast: boolean,\n    private scaleResolutionDownBy: number = 1,\n    private isSVC: boolean = false\n  ) {}\n\n  equal(other: DefaultVideoCaptureAndEncodeParameter): boolean {\n    let checkForEqual: boolean =\n      other.captureWidth() === this.cameraWidth &&\n      other.captureHeight() === this.cameraHeight &&\n      other.captureFrameRate() === this.cameraFrameRate &&\n      other.encodeBitrates().length === this.encodeBitrates().length &&\n      other.encodeScaleResolutionDownBy().length === this.encodeScaleResolutionDownBy().length &&\n      other.encodeWidths().length === this.encodeWidths().length &&\n      other.encodeHeights().length === this.encodeHeights().length &&\n      other.isSVCEncoding() === this.isSVC;\n\n    if (checkForEqual) {\n      for (let i = 0; i < other.encodeWidths().length; i++) {\n        if (\n          other.encodeWidths()[i] !== this.encodeWidths()[i] ||\n          other.encodeHeights()[i] !== this.encodeHeights()[i] ||\n          other.encodeBitrates()[i] !== this.encodeBitrates()[i] ||\n          other.encodeScaleResolutionDownBy()[i] !== this.encodeScaleResolutionDownBy()[i]\n        ) {\n          checkForEqual = false;\n          return checkForEqual;\n        }\n      }\n    }\n\n    return checkForEqual;\n  }\n\n  clone(): DefaultVideoCaptureAndEncodeParameter {\n    return new DefaultVideoCaptureAndEncodeParameter(\n      this.cameraWidth,\n      this.cameraHeight,\n      this.cameraFrameRate,\n      this.maxEncodeBitrateKbps,\n      this.isSimulcast,\n      this.scaleResolutionDownBy,\n      this.isSVC\n    );\n  }\n\n  captureWidth(): number {\n    return this.cameraWidth;\n  }\n\n  captureHeight(): number {\n    return this.cameraHeight;\n  }\n\n  captureFrameRate(): number {\n    return this.cameraFrameRate;\n  }\n\n  encodeBitrates(): number[] {\n    // TODO: add simulcast layer\n    return [this.maxEncodeBitrateKbps];\n  }\n\n  encodeScaleResolutionDownBy(): number[] {\n    return [this.scaleResolutionDownBy];\n  }\n\n  encodeWidths(): number[] {\n    return [this.cameraWidth];\n  }\n\n  encodeHeights(): number[] {\n    return [this.cameraHeight];\n  }\n\n  isSVCEncoding(): boolean {\n    return this.isSVC;\n  }\n}\n"]}