{"version":3,"file":"AudioVideoObserver.js","sourceRoot":"","sources":["../../src/audiovideoobserver/AudioVideoObserver.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ClientMetricReport from '../clientmetricreport/ClientMetricReport';\nimport ConnectionHealthData from '../connectionhealthpolicy/ConnectionHealthData';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport MeetingSessionVideoAvailability from '../meetingsession/MeetingSessionVideoAvailability';\nimport SimulcastLayers from '../simulcastlayers/SimulcastLayers';\nimport VideoSource from '../videosource/VideoSource';\nimport VideoTileState from '../videotile/VideoTileState';\n\nexport default interface AudioVideoObserver {\n  /**\n   * Called when the session is connecting or reconnecting.\n   */\n  audioVideoDidStartConnecting?(reconnecting: boolean): void;\n\n  /**\n   * Called when the session has started.\n   */\n  audioVideoDidStart?(): void;\n\n  /**\n   * Called when the session has stopped from a started state with the reason\n   * provided in the status. See documentation for [[MeetingSessionStatus]]\n   * and [[MeetingSessionStatusCode]] for more information.\n   */\n  audioVideoDidStop?(sessionStatus: MeetingSessionStatus): void;\n\n  /**\n   * Called whenever a tile has been created or updated.\n   */\n  videoTileDidUpdate?(tileState: VideoTileState): void;\n\n  /**\n   * Called whenever a tile has been removed.\n   */\n  videoTileWasRemoved?(tileId: number): void;\n\n  /**\n   * Called when video availability has changed. This information can be used to decide whether to\n   * switch the connection type to video and whether or not to offer the option to start the local\n   * video tile.\n   */\n  videoAvailabilityDidChange?(availability: MeetingSessionVideoAvailability): void;\n\n  /**\n   * Called when the media stats are available.\n   */\n  metricsDidReceive?(clientMetricReport: ClientMetricReport): void;\n\n  /**\n   * Called when connection health has changed.\n   */\n  connectionHealthDidChange?(connectionHealthData: ConnectionHealthData): void;\n\n  /**\n   * Called when the connection has been poor for a while if meeting only uses audio.\n   */\n  connectionDidBecomePoor?(): void;\n\n  /**\n   * Called when the connection has been poor if meeting uses video so that the observer\n   * can prompt the user about turning off video.\n   */\n  connectionDidSuggestStopVideo?(): void;\n\n  /**\n   * Called when connection has changed to good from poor. This will be fired regardless whether the meeting\n   * is audio-only or uses audio video.\n   */\n  connectionDidBecomeGood?(): void;\n\n  /**\n   * Called when a user tries to start a video but by the time the backend processes the request,\n   * video capacity has been reached and starting local video is not possible. This can be used to\n   * trigger a message to the user about the situation.\n   */\n  videoSendDidBecomeUnavailable?(): void;\n\n  /**\n   * Called when the remote video sending sources get changed.\n   */\n  remoteVideoSourcesDidChange?(videoSources: VideoSource[]): void;\n\n  /**\n   * Called when simulcast is enabled and simulcast uplink encoding layers get changed.\n   */\n  encodingSimulcastLayersDidChange?(simulcastLayers: SimulcastLayers): void;\n\n  /**\n   * This observer callback will only be called for attendees in Replica meetings.\n   *\n   * Indicates that the client is no longer authenticated to the Primary meeting\n   * and can no longer share media. `status` will contain a `MeetingSessionStatusCode` of the following:\n   *\n   * * `MeetingSessionStatusCode.OK`: `demoteFromPrimaryMeeting` was used to remove the attendee.\n   * * `MeetingSessionStatusCode.AudioAuthenticationRejected`: `chime::DeleteAttendee` was called on the Primary\n   *   meeting attendee used in `promoteToPrimaryMeeting`.\n   * * `MeetingSessionStatusCode.AudioVideoDisconnectedWhilePromoted`: The client disconnected (and may be reconnecting).\n   *   Any disconnection will trigger an automatic demotion to avoid unexpected or unwanted promotion state on reconnection.\n   */\n  audioVideoWasDemotedFromPrimaryMeeting?(status: MeetingSessionStatus): void;\n}\n"]}