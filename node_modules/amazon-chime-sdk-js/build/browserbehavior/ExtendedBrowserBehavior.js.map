{"version":3,"file":"ExtendedBrowserBehavior.js","sourceRoot":"","sources":["../../src/browserbehavior/ExtendedBrowserBehavior.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BrowserBehavior } from '..';\n\n/**\n * This interface contains methods on {@link DefaultBrowserBehavior} that were\n * incorrectly omitted from {@link BrowserBehavior}, plus new methods that\n * were added since the last major version.\n *\n * Members of this interface can change without a major version bump to accommodate new browser\n * bugs and capabilities. If you extend this type, you might need to rework your code for new minor\n * versions of this library.\n */\nexport default interface ExtendedBrowserBehavior extends BrowserBehavior {\n  requiresResolutionAlignment(width: number, height: number): [number, number];\n  requiresGroupIdMediaStreamConstraints(): boolean;\n  isSimulcastSupported(): boolean;\n  supportsBackgroundFilter(): boolean;\n  disableResolutionScaleDown(): boolean;\n  requiresDisablingH264Encoding(): boolean;\n  /**\n   * Returns whether the browser will emit the metric 'availableIncomingBandwidth' or similar.\n   *\n   * This was previously meant to be used to avoid using a downlink policy dependent on that metric which may have unintended consequences,\n   * however with server side network adaptation this is no longer relevant. This function is deprecated and may be removed in a later\n   * release.\n   *\n   * @deprecated Please set `VideoPriorityBasedPolicyConfig.serverSideNetworkAdaption` to `ServerSideNetworkAdaption.BandwidthProbingAndRemoteVideoQualityAdaption`\n   */\n  supportDownlinkBandwidthEstimation(): boolean;\n  supportsVideoLayersAllocationRtpHeaderExtension(): boolean;\n  supportsDependencyDescriptorRtpHeaderExtension(): boolean;\n  supportsScalableVideoCoding(): boolean;\n  supportsAudioRedundancy(): boolean;\n  disable480pResolutionScaleDown(): boolean;\n  /**\n   * Returns whether the browser requires the \"playback\" latency hint for Web Audio.\n   */\n  requiresPlaybackLatencyHintForAudioContext(): boolean;\n  /**\n   * Returns whether the browser needs the audio context suspended and resumed when a device fails\n   */\n  requiresAudioContextResetOnDeviceFailureForWebAudio(): boolean;\n}\n"]}