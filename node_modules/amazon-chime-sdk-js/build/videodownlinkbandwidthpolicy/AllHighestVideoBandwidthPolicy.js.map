{"version":3,"file":"AllHighestVideoBandwidthPolicy.js","sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ClientMetricReport from '../clientmetricreport/ClientMetricReport';\nimport VideoSource from '../videosource/VideoSource';\nimport DefaultVideoStreamIdSet from '../videostreamidset/DefaultVideoStreamIdSet';\nimport VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';\nimport VideoStreamDescription from '../videostreamindex/VideoStreamDescription';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport VideoDownlinkBandwidthPolicy from './VideoDownlinkBandwidthPolicy';\n\n/**\n * [[AllHighestVideoBandwidthPolicy]] implements is a rudimentary policy that simply\n * always subscribes to the highest quality video stream available\n * for all non-self participants.\n */\nexport default class AllHighestVideoBandwidthPolicy implements VideoDownlinkBandwidthPolicy {\n  private optimalReceiveSet: VideoStreamIdSet;\n  private subscribedReceiveSet: VideoStreamIdSet;\n  private videoSources: VideoSource[] | undefined;\n  protected videoIndex: VideoStreamIndex;\n\n  // Cap total receive bitrate at 15000 kbps to avoid hitting per client connection limits\n  private static maxReceiveBitrateKbps = 15000;\n\n  constructor(private selfAttendeeId: string) {\n    this.reset();\n  }\n\n  reset(): void {\n    this.optimalReceiveSet = new DefaultVideoStreamIdSet();\n    this.subscribedReceiveSet = new DefaultVideoStreamIdSet();\n    this.videoSources = undefined;\n  }\n\n  updateIndex(videoIndex: VideoStreamIndex): void {\n    this.videoIndex = videoIndex;\n    this.optimalReceiveSet = this.calculateOptimalReceiveSet(videoIndex);\n  }\n\n  updateMetrics(_clientMetricReport: ClientMetricReport): void {}\n\n  wantsResubscribe(): boolean {\n    return !this.subscribedReceiveSet.equal(this.optimalReceiveSet);\n  }\n\n  chooseSubscriptions(): VideoStreamIdSet {\n    this.subscribedReceiveSet = this.optimalReceiveSet.clone();\n    return this.subscribedReceiveSet.clone();\n  }\n\n  chooseRemoteVideoSources(videoSources: VideoSource[]): void {\n    this.videoSources = videoSources;\n    this.optimalReceiveSet = this.calculateOptimalReceiveSet(this.videoIndex).clone();\n  }\n\n  private calculateOptimalReceiveSet(videoIndex: VideoStreamIndex): VideoStreamIdSet {\n    const streamSelectionSet = new DefaultVideoStreamIdSet();\n\n    if (!this.videoIndex || this.videoIndex.allStreams().empty()) {\n      return streamSelectionSet;\n    }\n\n    const receiveSet = videoIndex.highestQualityStreamFromEachGroupExcludingSelf(\n      this.selfAttendeeId\n    );\n\n    // If video sources are not chosen, then use all of them.\n    const videoSources = !!this.videoSources\n      ? this.videoSources\n      : this.videoIndex.allVideoSendingSourcesExcludingSelf(this.selfAttendeeId);\n\n    // Get the list of all the remote stream information\n    const remoteInfos = this.videoIndex.remoteStreamDescriptions();\n\n    const mapOfAttendeeIdToRemoteDescriptions = new Map<string, VideoStreamDescription>();\n\n    for (const info of remoteInfos) {\n      if (receiveSet.contain(info.streamId)) {\n        mapOfAttendeeIdToRemoteDescriptions.set(info.attendeeId, info);\n      }\n    }\n\n    let totalBitrateKbps = 0;\n    for (const videoSource of videoSources) {\n      const attendeeId = videoSource.attendee.attendeeId;\n      if (mapOfAttendeeIdToRemoteDescriptions.has(attendeeId)) {\n        const info = mapOfAttendeeIdToRemoteDescriptions.get(attendeeId);\n        if (\n          totalBitrateKbps + info.maxBitrateKbps <=\n          AllHighestVideoBandwidthPolicy.maxReceiveBitrateKbps\n        ) {\n          streamSelectionSet.add(info.streamId);\n          totalBitrateKbps += info.maxBitrateKbps;\n        } else {\n          console.warn(\n            'total bitrate ' +\n              (totalBitrateKbps + info.maxBitrateKbps) +\n              ' exceeds maximum limit (15000). Use chooseRemoteVideoSources to select a subset of participants to avoid this.'\n          );\n          // We could continue to check more sources (some of them might still fall under the limit).\n          // But we stop here to limit resubscribes if we're hovering near the cap.\n          break;\n        }\n      }\n    }\n\n    return streamSelectionSet;\n  }\n}\n"]}