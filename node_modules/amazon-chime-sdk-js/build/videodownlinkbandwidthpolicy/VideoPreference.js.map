{"version":3,"file":"VideoPreference.js","sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/VideoPreference.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,4EAAoD;AACpD,0GAAkF;AAElF,MAAqB,eAAe;IAclC;;;;;;OAMG;IACH,YACS,UAAkB,EAClB,QAAgB,EACvB,UAA8B,EAC9B,qBAAwD;QAHjD,eAAU,GAAV,UAAU,CAAQ;QAClB,aAAQ,GAAR,QAAQ,CAAQ;QAIvB,IAAI,CAAC,UAAU,GAAG,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,2BAAiB,CAAC,OAAO,CAAC;QACpF,IAAI,CAAC,qBAAqB;YACxB,qBAAqB,KAAK,SAAS;gBACjC,CAAC,CAAC,qBAAqB;gBACvB,CAAC,CAAC,0CAAgC,CAAC,QAAQ,CAAC;IAClD,CAAC;IAED,cAAc,CAAC,KAAW;QACxB,OAAO,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;IACxC,CAAC;IAED,MAAM,CAAC,KAAW;QAChB,OAAO,CACL,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU;YACpC,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU;YACpC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ;YAChC,IAAI,CAAC,qBAAqB,KAAK,KAAK,CAAC,qBAAqB,CAC3D,CAAC;IACJ,CAAC;IAED,KAAK;QACH,OAAO,IAAI,eAAe,CACxB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,qBAAqB,CAC3B,CAAC;IACJ,CAAC;IAOD,uBAAuB,CAAC,UAA6B;QACnD,QAAQ,UAAU,EAAE;YAClB,KAAK,2BAAiB,CAAC,OAAO;gBAC5B,OAAO,eAAe,CAAC,oBAAoB,CAAC;YAC9C,KAAK,2BAAiB,CAAC,IAAI;gBACzB,OAAO,eAAe,CAAC,iBAAiB,CAAC;YAC3C,KAAK,2BAAiB,CAAC,MAAM;gBAC3B,OAAO,eAAe,CAAC,gBAAgB,CAAC;YAC1C,KAAK,2BAAiB,CAAC,GAAG;gBACxB,OAAO,eAAe,CAAC,gBAAgB,CAAC;SAC3C;IACH,CAAC;;AAxEH,kCAyEC;AAjByB,gCAAgB,GAAG,GAAG,CAAC;AACvB,gCAAgB,GAAG,GAAG,CAAC;AACvB,iCAAiB,GAAG,IAAI,CAAC;AACzB,oCAAoB,GAAG,KAAK,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Eq, PartialOrd } from '../utils/Types';\nimport TargetDisplaySize from './TargetDisplaySize';\nimport VideoQualityAdaptationPreference from './VideoQualityAdaptationPreference';\n\nexport default class VideoPreference implements Eq, PartialOrd {\n  /**\n   * The desired maximum simulcast layers to receive.\n   */\n  targetSize: TargetDisplaySize;\n\n  /**\n   * The preference on how to select between resolution and framerate on network constraint.\n   *\n   * This preference will have no effect unless the sender is encoding in a way such that there\n   * are both variable framerate and resolution options available.\n   */\n  degradationPreference: VideoQualityAdaptationPreference;\n\n  /** Initializes a [[VideoPreference]] with the given properties.\n   *\n   * @param attendeeId Attendee ID of the client\n   * @param priority The relative priority of this attendee against others.\n   * @param targetSize The desired maximum simulcast layers to receive.\n   * @param degradationPreference The preference on how to select between resolution and framerate on network constraint\n   */\n  constructor(\n    public attendeeId: string,\n    public priority: number,\n    targetSize?: TargetDisplaySize,\n    degradationPreference?: VideoQualityAdaptationPreference\n  ) {\n    this.targetSize = targetSize !== undefined ? targetSize : TargetDisplaySize.Maximum;\n    this.degradationPreference =\n      degradationPreference !== undefined\n        ? degradationPreference\n        : VideoQualityAdaptationPreference.Balanced;\n  }\n\n  partialCompare(other: this): number {\n    return this.priority - other.priority;\n  }\n\n  equals(other: this): boolean {\n    return (\n      this.attendeeId === other.attendeeId &&\n      this.targetSize === other.targetSize &&\n      this.priority === other.priority &&\n      this.degradationPreference === other.degradationPreference\n    );\n  }\n\n  clone(): VideoPreference {\n    return new VideoPreference(\n      this.attendeeId,\n      this.priority,\n      this.targetSize,\n      this.degradationPreference\n    );\n  }\n\n  private static readonly LOW_BITRATE_KBPS = 300;\n  private static readonly MID_BITRATE_KBPS = 600;\n  private static readonly HIGH_BITRATE_KBPS = 1500;\n  private static readonly MAXIMUM_BITRATE_KBPS = 10000;\n\n  targetSizeToBitrateKbps(targetSize: TargetDisplaySize): number {\n    switch (targetSize) {\n      case TargetDisplaySize.Maximum:\n        return VideoPreference.MAXIMUM_BITRATE_KBPS;\n      case TargetDisplaySize.High:\n        return VideoPreference.HIGH_BITRATE_KBPS;\n      case TargetDisplaySize.Medium:\n        return VideoPreference.MID_BITRATE_KBPS;\n      case TargetDisplaySize.Low:\n        return VideoPreference.LOW_BITRATE_KBPS;\n    }\n  }\n}\n"]}