{"version":3,"file":"VideoPriorityBasedPolicyConfig.js","sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/VideoPriorityBasedPolicyConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ServerSideNetworkAdaption from '../signalingclient/ServerSideNetworkAdaption';\n\n/** @internal */\nconst enum NetworkEvent {\n  Stable,\n  Decrease,\n  Increase,\n}\n\n/**\n * [[VideoPriorityBasedPolicyConfig]] contains the network issue response delay and network issue recovery delay.\n */\nexport default class VideoPriorityBasedPolicyConfig {\n  private static readonly MINIMUM_DELAY_MS = 2000;\n  private static readonly MAXIMUM_DELAY_MS = 8000;\n\n  static readonly Default = new VideoPriorityBasedPolicyConfig(0, 0);\n  static readonly UnstableNetworkPreset = new VideoPriorityBasedPolicyConfig(0, 1);\n  static readonly StableNetworkPreset = new VideoPriorityBasedPolicyConfig(1, 0);\n\n  private currentNetworkEvent: NetworkEvent = NetworkEvent.Stable;\n  private bandwidthDecreaseTimestamp: number = 0; // the last time bandwidth decreases\n  private referenceBitrate: number = 0;\n\n  /**\n   * Additional server side features to be enabled for network adaption. The only currently\n   * recommended value is `ServerSideNetworkAdaption.BandwidthProbingAndRemoteVideoQualityAdaption`\n   */\n  serverSideNetworkAdaption =\n    ServerSideNetworkAdaption.BandwidthProbingAndRemoteVideoQualityAdaption;\n\n  /** Initializes a [[VideoPriorityBasedPolicyConfig]] with the network event delays.\n   *\n   * @deprecated These values are not used when server side network adaptation is used, which will\n   * become the default in the future. Therefore these constructors\n   * will be deprecated and removed in a later releases.\n   *\n   * @param networkIssueResponseDelayFactor Delays before reducing subscribed video bitrate. Input should be a value between 0 and 1.\n   * @param networkIssueRecoveryDelayFactor Delays before starting to increase bitrates after a network event and\n   * delays between increasing video bitrates on each individual stream. Input should be a value between 0 and 1.\n   */\n  constructor(\n    public networkIssueResponseDelayFactor: number = 0,\n    public networkIssueRecoveryDelayFactor: number = 0\n  ) {\n    if (networkIssueResponseDelayFactor < 0) {\n      networkIssueResponseDelayFactor = 0;\n    } else if (networkIssueResponseDelayFactor > 1) {\n      networkIssueResponseDelayFactor = 1;\n    }\n    this.networkIssueResponseDelayFactor = networkIssueResponseDelayFactor;\n\n    if (networkIssueRecoveryDelayFactor < 0) {\n      networkIssueRecoveryDelayFactor = 0;\n    } else if (networkIssueRecoveryDelayFactor > 1) {\n      networkIssueRecoveryDelayFactor = 1;\n    }\n    this.networkIssueRecoveryDelayFactor = networkIssueRecoveryDelayFactor;\n  }\n\n  // determine if subscribe is allowed based on network issue/recovery delays\n  allowSubscribe(numberOfParticipants: number, currentEstimated: number): boolean {\n    let timeBeforeAllowSubscribeMs = 0;\n    const previousNetworkEvent = this.currentNetworkEvent;\n\n    if (currentEstimated > this.referenceBitrate) {\n      // if bw increases\n      this.currentNetworkEvent = NetworkEvent.Increase;\n      this.referenceBitrate = currentEstimated;\n      return true;\n    } else if (currentEstimated < this.referenceBitrate) {\n      // if bw decreases, we use response delay\n      this.currentNetworkEvent = NetworkEvent.Decrease;\n      timeBeforeAllowSubscribeMs = this.getSubscribeDelay(\n        this.currentNetworkEvent,\n        numberOfParticipants\n      );\n\n      if (previousNetworkEvent !== NetworkEvent.Decrease) {\n        this.bandwidthDecreaseTimestamp = Date.now();\n      } else if (Date.now() - this.bandwidthDecreaseTimestamp > timeBeforeAllowSubscribeMs) {\n        this.referenceBitrate = currentEstimated;\n        return true;\n      }\n      return false;\n    } else {\n      this.currentNetworkEvent = NetworkEvent.Stable;\n      return false;\n    }\n  }\n\n  // convert network event delay factor to actual delay in ms\n  private getSubscribeDelay(event: NetworkEvent, numberOfParticipants: number): number {\n    // left and right boundary of the delay\n    let subscribeDelay = VideoPriorityBasedPolicyConfig.MINIMUM_DELAY_MS;\n    const range =\n      VideoPriorityBasedPolicyConfig.MAXIMUM_DELAY_MS -\n      VideoPriorityBasedPolicyConfig.MINIMUM_DELAY_MS;\n\n    const responseFactor = this.networkIssueResponseDelayFactor;\n\n    switch (event) {\n      case NetworkEvent.Decrease:\n        // we include number of participants here since bigger size of the meeting will generate higher bitrate\n        subscribeDelay += range * responseFactor * (1 + numberOfParticipants / 10);\n        subscribeDelay = Math.min(VideoPriorityBasedPolicyConfig.MAXIMUM_DELAY_MS, subscribeDelay);\n        break;\n    }\n\n    return subscribeDelay;\n  }\n}\n"]}