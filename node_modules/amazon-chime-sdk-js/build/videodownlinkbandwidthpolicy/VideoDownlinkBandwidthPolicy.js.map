{"version":3,"file":"VideoDownlinkBandwidthPolicy.js","sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/VideoDownlinkBandwidthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ClientMetricReport from '../clientmetricreport/ClientMetricReport';\nimport ServerSideNetworkAdaption from '../signalingclient/ServerSideNetworkAdaption';\nimport VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport VideoTileController from '../videotilecontroller/VideoTileController';\nimport VideoDownlinkObserver from './VideoDownlinkObserver';\nimport VideoPreferences from './VideoPreferences';\n\n/**\n * [[VideoDownlinkBandwidthPolicy]] makes decisions about downlink\n * video bandwidth usage.\n */\nexport default interface VideoDownlinkBandwidthPolicy {\n  /**\n   * Reset back to initial state\n   */\n  reset(): void;\n\n  /**\n   * Potentially update the desired set of video streams to receive\n   * based on the given [[VideoStreamIndex]].\n   */\n  updateIndex(videoIndex: VideoStreamIndex): void;\n\n  /**\n   * Update connection metrics\n   */\n  updateMetrics(clientMetricReport: ClientMetricReport): void;\n\n  /**\n   * Returns true if the policy has decided that a change to subscribed\n   * set of video streams to receive would be beneficial.\n   */\n  wantsResubscribe(): boolean;\n\n  /**\n   * Updates the internal state with the set of streams we expect to be\n   * subscribed to, and return the set. This value will be truncated\n   * to the maximum subscription limit of the call.\n   *\n   * When a policy is passed into a meeting session, this will be called\n   * once every second to check if the subscriptions have changed.\n   */\n  chooseSubscriptions(): VideoStreamIdSet;\n\n  /**\n   * (Optional) Add VideoDownlinkObserver to observer resubscribe requests\n   */\n  addObserver?(observer: VideoDownlinkObserver): void;\n\n  /**\n   * (Optional) Removes the VideoDownlinkObserver.\n   */\n  removeObserver?(observer: VideoDownlinkObserver): void;\n\n  /**\n   * (Optional) Call and observer function on all added `VideoDownlinkObserver`. Can be used to notify observers\n   * of video tile pauses.\n   */\n  forEachObserver?(observerFunc: (observer: VideoDownlinkObserver) => void): void;\n\n  /**\n   * (Optional) Add observer that allows policy to immediately request an update based off current choices. Only\n   * one observer can be set at a time.\n   */\n  setWantsResubscribeObserver?(observer: () => void): void;\n\n  /**\n   * (Optional) Bind the video tile controller to the policy to allow it to control the video tiles such as pause\n   * and unpause.\n   * The audio video controller should call this method to pass down a transceiver controller to the policy\n   * when the meeting starts and set it to undefined when the meeting ends.\n   * @param tileController the video tile controller\n   */\n  bindToTileController?(tileController: VideoTileController | undefined): void;\n\n  /**\n   * Additional server side features to be enabled for network adaption. Policy implementations\n   * must abide by the restrictions in the returned `ServerSideNetworkAdaption` enum value.\n   */\n  getServerSideNetworkAdaption?(): ServerSideNetworkAdaption;\n\n  /**\n   * Dynamically switch any client behavior to the adaption type which this policy indicated support\n   * to from `supportedServerSideNetworkAdaptions`.\n   */\n  setServerSideNetworkAdaption?(adaption: ServerSideNetworkAdaption): void;\n\n  /**\n   * Values which this policy supports being overriden to. The server may use this to transition\n   * clients to different values of `ServerSideNetworkAdaption`. Override this function\n   * to return an empty list to disable any server override attempts.\n   */\n  supportedServerSideNetworkAdaptions?(): ServerSideNetworkAdaption[];\n\n  /**\n   * Used in combination of `getServerSideNetworkAdaption` and `wantsResubscribe`\n   * to indicate any added, updated, or removed video preferences.\n   */\n  getVideoPreferences?(): VideoPreferences;\n\n  /**\n   * Used to indicate that this policy can handle the increased complexity\n   * required to deal with layers of different frame rates (i.e. balances\n   * tradeoffs of resolution vs. frame rate, will not degrade resolution or\n   * framerate during recovery, etc.)\n   */\n  wantsAllTemporalLayersInIndex?(): boolean;\n}\n"]}