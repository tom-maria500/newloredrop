{"version":3,"file":"VideoPreferences.js","sourceRoot":"","sources":["../../src/videodownlinkbandwidthpolicy/VideoPreferences.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport SignalingClientVideoSubscriptionConfiguration from '../signalingclient/SignalingClientVideoSubscriptionConfiguration';\nimport type { Eq, PartialOrd } from '../utils/Types';\nimport VideoPreference from './VideoPreference';\n\nexport function convertVideoPreferencesToSignalingClientVideoSubscriptionConfiguration(\n  context: AudioVideoControllerState,\n  receiveGroupIds: number[],\n  preferences: VideoPreferences\n): SignalingClientVideoSubscriptionConfiguration[] {\n  if (\n    context.transceiverController.getMidForGroupId === undefined ||\n    context.videoStreamIndex.attendeeIdForGroupId === undefined ||\n    preferences === undefined\n  ) {\n    return [];\n  }\n\n  const configurations = new Array<SignalingClientVideoSubscriptionConfiguration>();\n  const attendeeIdToMid = new Map<string, string>();\n  const attendeeIdToGroupId = new Map<string, number>();\n  for (const groupId of receiveGroupIds) {\n    // The local description will have been set by the time this task is running, so all\n    // of the transceivers should have `mid` set by now (see comment above `getMidForStreamId`)\n    const mid = context.transceiverController.getMidForGroupId(groupId);\n    if (mid === undefined) {\n      continue;\n    }\n    const attendeeId = context.videoStreamIndex.attendeeIdForGroupId(groupId);\n    attendeeIdToMid.set(attendeeId, mid);\n    attendeeIdToGroupId.set(attendeeId, groupId);\n  }\n  for (const preference of preferences) {\n    const configuration = new SignalingClientVideoSubscriptionConfiguration();\n    const mid = attendeeIdToMid.get(preference.attendeeId);\n    if (mid === undefined) {\n      continue;\n    }\n    configuration.mid = mid;\n    configuration.attendeeId = preference.attendeeId;\n    configuration.groupId = attendeeIdToGroupId.get(preference.attendeeId);\n    // The signaling protocol expects 'higher' values for 'higher' priorities\n    configuration.priority = Number.MAX_SAFE_INTEGER - preference.priority;\n    configuration.targetBitrateKbps = preference.targetSizeToBitrateKbps(preference.targetSize);\n    configuration.qualityAdaptationPreference = preference.degradationPreference;\n    configurations.push(configuration);\n  }\n  return configurations;\n}\nclass ObjectSet<T extends Eq & PartialOrd> implements Iterable<T> {\n  constructor(private items: T[] = []) {}\n\n  static default(): ObjectSet<VideoPreference> {\n    return new ObjectSet([]);\n  }\n\n  // Returns the items in sorted order.\n  [Symbol.iterator](): Iterator<T, T, undefined> {\n    let i = 0;\n    const items = this.items;\n    return {\n      next(): IteratorResult<T> {\n        if (i < items.length) {\n          return {\n            done: false,\n            value: items[i++],\n          };\n        }\n        return {\n          done: true,\n          value: null,\n        };\n      },\n    };\n  }\n\n  first(): T | undefined {\n    return this.items[0];\n  }\n\n  add(item: T): void {\n    // If this is used elsewhere, there needs to be a duplicate check here\n    this.items.push(item);\n  }\n\n  replaceFirst(newItem: T, f: (item: T) => boolean): void {\n    const pos = this.items.findIndex(f);\n    if (pos === -1) {\n      // If this is used elsewhere, there needs to be a duplicate check here\n      this.items.push(newItem);\n    } else if (!this.has(newItem)) {\n      this.items[pos] = newItem;\n    } else {\n      this.items.splice(pos, 1);\n    }\n  }\n\n  remove(item: T): void {\n    this.items = this.items.filter(a => !a.equals(item));\n  }\n\n  clear(): void {\n    this.items = [];\n  }\n\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  equals(other: this): boolean {\n    if (other === this) {\n      return true;\n    }\n\n    if (other.items.length !== this.items.length) {\n      return false;\n    }\n\n    // TODO: if we keep the arrays sorted correctly, not just by priority, then\n    // we don't need to do this painstaking O(n^2) work.\n    for (const item of this.items) {\n      if (!other.items.some(a => a.equals(item))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  has(item: T): boolean {\n    return this.items.some(a => a.equals(item));\n  }\n\n  some(f: (item: T) => boolean): boolean {\n    return this.items.some(f);\n  }\n\n  clone(): ObjectSet<T> {\n    return new ObjectSet([...this.items]);\n  }\n\n  sort(): void {\n    this.items.sort((a, b) => a.partialCompare(b));\n  }\n\n  modify(): SetBuilder<T> {\n    // COW.\n    return new SetBuilder(this);\n  }\n}\n\nclass SetBuilder<T extends Eq & PartialOrd> {\n  private copied = false;\n\n  constructor(private items: ObjectSet<T> = new ObjectSet()) {}\n\n  private cow(): void {\n    if (this.copied) {\n      return;\n    }\n    this.items = this.items.clone();\n    this.copied = true;\n  }\n\n  add(item: T): void {\n    // Don't actually need to COW unless the item is there to add.\n    if (this.items.has(item)) {\n      return;\n    }\n    this.cow();\n    this.items.add(item);\n  }\n\n  replaceFirst(newItem: T, f: (item: T) => boolean): void {\n    // Don't actually need to COW unless the item is already there\n    // and there are no items to replace\n    if (this.items.has(newItem) && !this.items.some(f)) {\n      return;\n    }\n    this.cow();\n    this.items.replaceFirst(newItem, f);\n  }\n\n  remove(item: T): void {\n    // Don't actually need to COW unless the item is there to remove.\n    if (!this.items.has(item)) {\n      return;\n    }\n    this.cow();\n    this.items.remove(item);\n  }\n\n  some(f: (preference: T) => boolean): boolean {\n    return this.items.some(f);\n  }\n\n  clear(): void {\n    if (this.items.isEmpty()) {\n      return;\n    }\n    this.cow();\n    this.items.clear();\n  }\n\n  build(): ObjectSet<T> {\n    // Immutable sets are always kept sorted!\n    if (this.copied) {\n      this.items.sort();\n    }\n    this.copied = false;\n    return this.items;\n  }\n}\n\nexport class MutableVideoPreferences {\n  constructor(private builder: SetBuilder<VideoPreference>) {}\n\n  add(pref: VideoPreference): void {\n    this.builder.add(pref);\n  }\n\n  replaceFirst(newPref: VideoPreference, f: (pref: VideoPreference) => boolean): void {\n    this.builder.replaceFirst(newPref, f);\n  }\n\n  remove(pref: VideoPreference): void {\n    this.builder.remove(pref);\n  }\n\n  some(f: (preference: VideoPreference) => boolean): boolean {\n    return this.builder.some(f);\n  }\n\n  clear(): void {\n    this.builder.clear();\n  }\n\n  build(): VideoPreferences {\n    return new VideoPreferences(this.builder.build());\n  }\n}\n\nexport class VideoPreferences implements Iterable<VideoPreference>, Eq {\n  static prepare(): MutableVideoPreferences {\n    return new MutableVideoPreferences(new SetBuilder<VideoPreference>());\n  }\n\n  static default(): VideoPreferences {\n    return new VideoPreferences(ObjectSet.default());\n  }\n\n  /** @internal */\n  constructor(private items: ObjectSet<VideoPreference>) {}\n\n  [Symbol.iterator](): Iterator<VideoPreference, VideoPreference, undefined> {\n    return this.items[Symbol.iterator]();\n  }\n\n  highestPriority(): number | undefined {\n    return this.items.first()?.priority;\n  }\n\n  // Our items happen to always be sorted!\n  sorted(): Iterator<VideoPreference, VideoPreference, undefined> {\n    return this.items[Symbol.iterator]();\n  }\n\n  equals(other: this): boolean {\n    return other === this || this.items.equals(other.items);\n  }\n\n  modify(): MutableVideoPreferences {\n    return new MutableVideoPreferences(this.items.modify());\n  }\n\n  some(f: (pref: VideoPreference) => boolean): boolean {\n    return this.items.some(f);\n  }\n\n  isEmpty(): boolean {\n    return this.items.isEmpty();\n  }\n\n  clone(): VideoPreferences {\n    const videoPreferences = VideoPreferences.prepare();\n    for (const preference of this.items) {\n      videoPreferences.add(preference.clone());\n    }\n    return videoPreferences.build();\n  }\n}\n\nexport default VideoPreferences;\n"]}