{"version":3,"file":"DefaultPingPong.js","sourceRoot":"","sources":["../../src/pingpong/DefaultPingPong.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport PingPongObserver from '../pingpongobserver/PingPongObserver';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport IntervalScheduler from '../scheduler/IntervalScheduler';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  SdkPingPongFrame,\n  SdkPingPongType,\n  SdkSignalFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport { Maybe } from '../utils/Types';\nimport PingPong from './PingPong';\n\n/**\n * [[DefaultPingPong]] implements the PingPong and SignalingClientObserver interface.\n */\nexport default class DefaultPingPong implements SignalingClientObserver, PingPong {\n  private observerQueue: Set<PingPongObserver> = new Set<PingPongObserver>();\n  intervalScheduler: IntervalScheduler;\n  pingTimestampLocalMs: number;\n  pingId: number;\n  consecutivePongsUnaccountedFor = 0;\n\n  constructor(\n    private signalingClient: SignalingClient,\n    private intervalMs: number,\n    private logger: Logger\n  ) {\n    this.intervalScheduler = new IntervalScheduler(this.intervalMs);\n    this.pingId = 0;\n  }\n\n  addObserver(observer: PingPongObserver): void {\n    this.logger.info('adding a ping-pong observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer: PingPongObserver): void {\n    this.logger.info('removing a ping-pong observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc: (observer: PingPongObserver) => void): void {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  start(): void {\n    this.stop();\n    this.signalingClient.registerObserver(this);\n    if (this.signalingClient.ready()) {\n      this.startPingInterval();\n    }\n  }\n\n  stop(): void {\n    this.stopPingInterval();\n    this.signalingClient.removeObserver(this);\n  }\n\n  private startPingInterval(): void {\n    this.intervalScheduler.start(() => {\n      this.ping();\n    });\n    this.ping();\n  }\n\n  private stopPingInterval(): void {\n    this.intervalScheduler.stop();\n    this.pingId = 0;\n    this.consecutivePongsUnaccountedFor = 0;\n  }\n\n  private ping(): void {\n    if (this.consecutivePongsUnaccountedFor > 0) {\n      this.logger.warn(`missed pong ${this.consecutivePongsUnaccountedFor} time(s)`);\n      this.forEachObserver((observer: PingPongObserver) => {\n        Maybe.of(observer.didMissPongs).map(f =>\n          f.bind(observer)(this.consecutivePongsUnaccountedFor)\n        );\n      });\n    }\n    this.consecutivePongsUnaccountedFor += 1;\n    this.pingId = (this.pingId + 1) & 0xffffffff;\n    const ping = SdkPingPongFrame.create();\n    ping.pingId = this.pingId;\n    ping.type = SdkPingPongType.PING;\n    this.pingTimestampLocalMs = this.signalingClient.pingPong(ping);\n    this.logger.debug(() => {\n      return `sent ping ${this.pingId}`;\n    });\n  }\n\n  private pong(pingId: number): void {\n    const pong = SdkPingPongFrame.create();\n    pong.pingId = pingId;\n    pong.type = SdkPingPongType.PONG;\n    this.signalingClient.pingPong(pong);\n  }\n\n  handleSignalingClientEvent(event: SignalingClientEvent): void {\n    switch (event.type) {\n      case SignalingClientEventType.WebSocketOpen:\n        this.startPingInterval();\n        break;\n      case SignalingClientEventType.WebSocketFailed:\n      case SignalingClientEventType.WebSocketError:\n        this.logger.warn(`stopped pinging (${SignalingClientEventType[event.type]})`);\n        this.stopPingInterval();\n        break;\n      case SignalingClientEventType.WebSocketClosing:\n      case SignalingClientEventType.WebSocketClosed:\n        this.logger.info(`stopped pinging (${SignalingClientEventType[event.type]})`);\n        this.stopPingInterval();\n        break;\n      case SignalingClientEventType.ReceivedSignalFrame:\n        if (event.message.type !== SdkSignalFrame.Type.PING_PONG) {\n          break;\n        }\n        if (event.message.pingPong.type === SdkPingPongType.PONG) {\n          const pingId = event.message.pingPong.pingId;\n          if (pingId !== this.pingId) {\n            this.logger.warn(`unexpected ping id ${pingId} (expected ${this.pingId})`);\n            break;\n          }\n          this.consecutivePongsUnaccountedFor = 0;\n          let pongTimestampRemoteMs: number;\n          if (typeof event.message.timestampMs === 'number') {\n            pongTimestampRemoteMs = event.message.timestampMs;\n          } else {\n            break;\n          }\n          this.logger.debug(() => {\n            return `received pong ${pingId} with timestamp ${pongTimestampRemoteMs}`;\n          });\n          const pongTimestampLocalMs = event.timestampMs;\n          const pingPongLocalIntervalMs = pongTimestampLocalMs - this.pingTimestampLocalMs;\n          const estimatedPingTimestampRemoteMs = Math.round(\n            pongTimestampRemoteMs - pingPongLocalIntervalMs / 2\n          );\n          const estimatedClockSkewMs = this.pingTimestampLocalMs - estimatedPingTimestampRemoteMs;\n          this.logger.info(\n            `local clock skew estimate=${estimatedClockSkewMs}ms from ping-pong time=${pingPongLocalIntervalMs}ms`\n          );\n          this.forEachObserver((observer: PingPongObserver) => {\n            Maybe.of(observer.didReceivePong).map(f =>\n              f.bind(observer)(pingId, estimatedClockSkewMs, pingPongLocalIntervalMs)\n            );\n          });\n        } else {\n          this.pong(event.message.pingPong.pingId);\n        }\n        break;\n    }\n  }\n}\n"]}