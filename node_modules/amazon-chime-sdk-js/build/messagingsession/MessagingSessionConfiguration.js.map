{"version":3,"file":"MessagingSessionConfiguration.js","sourceRoot":"","sources":["../../src/messagingsession/MessagingSessionConfiguration.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAEtC,0CAAiD;AAIjD;;;GAGG;AACH,yGAAyG;AACzG,MAAqB,6BAA6B;IAmChD;;;;;;;;;OASG;IACH,YACS,OAAe,EACf,kBAAiC,EACjC,WAA+B,EAC/B,WAAgB;QAHhB,YAAO,GAAP,OAAO,CAAQ;QACf,uBAAkB,GAAlB,kBAAkB,CAAe;QACjC,gBAAW,GAAX,WAAW,CAAoB;QAC/B,gBAAW,GAAX,WAAW,CAAK;QAhDzB;;WAEG;QACH,uBAAkB,GAAW,EAAE,GAAG,IAAI,CAAC;QAEvC;;WAEG;QACH,yBAAoB,GAAW,CAAC,CAAC;QAEjC;;WAEG;QACH,4BAAuB,GAAW,CAAC,GAAG,IAAI,CAAC;QAE3C;;WAEG;QACH,2BAAsB,GAAW,CAAC,GAAG,IAAI,CAAC;QAE1C;;;WAGG;QACH,eAAU,GAA2B,SAAS,CAAC;QAE/C;;;;;WAKG;QACH,mBAAc,GAA+B,SAAS,CAAC;QAkBrD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC5B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;SACpD;IACH,CAAC;IAEO,iBAAiB;QACvB,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;QAC/B,uBAAe,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;CACF;AA7DD,gDA6DC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getRandomValues } from '../utils/Utils';\nimport PrefetchOn from './PrefetchOn';\nimport PrefetchSortBy from './PrefetchSortBy';\n\n/**\n * [[MessagingSessionConfiguration]] contains the information necessary to start\n * a messaging session.\n */\n/* eslint  @typescript-eslint/no-explicit-any: 0, @typescript-eslint/explicit-module-boundary-types: 0 */\nexport default class MessagingSessionConfiguration {\n  /**\n   * Maximum amount of time in milliseconds to allow for reconnecting.\n   */\n  reconnectTimeoutMs: number = 10 * 1000;\n\n  /**\n   * Fixed wait amount in milliseconds between reconnecting attempts.\n   */\n  reconnectFixedWaitMs: number = 0;\n\n  /**\n   * The short back off time in milliseconds between reconnecting attempts.\n   */\n  reconnectShortBackoffMs: number = 1 * 1000;\n\n  /**\n   * The long back off time in milliseconds between reconnecting attempts.\n   */\n  reconnectLongBackoffMs: number = 5 * 1000;\n\n  /**\n   * The enum to indicate if we want to turn on prefetch feature. Prefetch feature will send out CHANNEL_DETAILS event\n   * upon websocket connection, which includes information about channel, channel messages, channel memberships etc.\n   */\n  prefetchOn: PrefetchOn | undefined = undefined;\n\n  /**\n   * The enum to indicate the sorting mechanism to use when deciding which channels to Prefetch. Prefetch feature will send out\n   * CHANNEL_DETAILS event upon websocket connection, which includes information about channel, channel messages, channel memberships etc.\n   * The first 50 channels matching the PrefetchSortBy will be sent.  If not set, channels will be returned first by those\n   * with unread messages and then those with the latest last sent message timestamp.\n   */\n  prefetchSortBy: PrefetchSortBy | undefined = undefined;\n\n  /**\n   * Constructs a MessagingSessionConfiguration optionally with userArn, messaging session id, a messaging session\n   * endpoint URL, and the chimeClient.\n   *\n   * endpointUrl is deprecated and should not be used. Internally it is resolved on connect via chimeClient if undefined, and\n   * always re-resolved on reconnect.\n   *\n   * The messaging session id is to uniquely identify this messaging session for the userArn.\n   * If messaging session id is passed in as null, it will be automatically generated.\n   */\n  constructor(\n    public userArn: string,\n    public messagingSessionId: string | null,\n    public endpointUrl: string | undefined,\n    public chimeClient: any\n  ) {\n    if (!this.messagingSessionId) {\n      this.messagingSessionId = this.generateSessionId();\n    }\n  }\n\n  private generateSessionId(): string {\n    const num = new Uint32Array(1);\n    getRandomValues(num);\n    return num[0].toString();\n  }\n}\n"]}