{"version":3,"file":"DefaultMessagingSession.js","sourceRoot":"","sources":["../../src/messagingsession/DefaultMessagingSession.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { GetMessagingSessionEndpointCommand } from '@aws-sdk/client-chime-sdk-messaging';\n\nimport FullJitterBackoff from '../backoff/FullJitterBackoff';\nimport CSPMonitor from '../cspmonitor/CSPMonitor';\nimport Logger from '../logger/Logger';\nimport Message from '../message/Message';\nimport MessagingSessionObserver from '../messagingsessionobserver/MessagingSessionObserver';\nimport DefaultReconnectController from '../reconnectcontroller/DefaultReconnectController';\nimport ReconnectController from '../reconnectcontroller/ReconnectController';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport DefaultSigV4 from '../sigv4/DefaultSigV4';\nimport SigV4 from '../sigv4/SigV4';\nimport DefaultWebSocketAdapter from '../websocketadapter/DefaultWebSocketAdapter';\nimport WebSocketAdapter from '../websocketadapter/WebSocketAdapter';\nimport WebSocketReadyState from '../websocketadapter/WebSocketReadyState';\nimport MessagingSession from './MessagingSession';\nimport MessagingSessionConfiguration from './MessagingSessionConfiguration';\nimport PrefetchOn from './PrefetchOn';\n\nexport default class DefaultMessagingSession implements MessagingSession {\n  private observerQueue: Set<MessagingSessionObserver> = new Set<MessagingSessionObserver>();\n  private isClosing: boolean;\n  private isSessionEstablished: boolean;\n  private bootstrapResolved: (value: PromiseLike<void> | void) => void; // Variable to determine that a session bootstrap was successful, resolves the StartSession promise\n  private bootstrapRejected: (reason?: CloseEvent) => void; // Variable to determine that a session disconnection was before bootstrap, rejects the StartSession promise\n  private preBootstrapMessages: Message[];\n\n  constructor(\n    private configuration: MessagingSessionConfiguration,\n    private logger: Logger,\n    private readonly webSocket?: WebSocketAdapter,\n    private readonly reconnectController?: ReconnectController,\n    private readonly sigV4?: SigV4\n  ) {\n    if (!this.webSocket) {\n      this.webSocket = new DefaultWebSocketAdapter(this.logger);\n    }\n    if (!this.reconnectController) {\n      this.reconnectController = new DefaultReconnectController(\n        configuration.reconnectTimeoutMs,\n        new FullJitterBackoff(\n          configuration.reconnectFixedWaitMs,\n          configuration.reconnectShortBackoffMs,\n          configuration.reconnectLongBackoffMs\n        )\n      );\n    }\n    if (!this.sigV4) {\n      this.sigV4 = new DefaultSigV4(this.configuration.chimeClient);\n    }\n\n    CSPMonitor.addLogger(this.logger);\n    CSPMonitor.register();\n    this.preBootstrapMessages = [];\n  }\n\n  addObserver(observer: MessagingSessionObserver): void {\n    this.logger.info('adding messaging observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer: MessagingSessionObserver): void {\n    this.logger.info('removing messaging observer');\n    this.observerQueue.delete(observer);\n  }\n\n  async start(): Promise<void> {\n    if (this.isClosed()) {\n      await this.startConnecting(false);\n    } else {\n      this.logger.info('messaging session already started');\n    }\n  }\n\n  stop(): void {\n    if (!this.isClosed()) {\n      this.isClosing = true;\n      this.webSocket.close();\n      CSPMonitor.removeLogger(this.logger);\n    } else {\n      this.logger.info('no existing messaging session needs closing');\n    }\n  }\n\n  forEachObserver(observerFunc: (observer: MessagingSessionObserver) => void): void {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  private setUpEventListeners(): void {\n    this.webSocket.addEventListener('open', () => {\n      this.openEventHandler();\n    });\n    this.webSocket.addEventListener('message', (event: MessageEvent) => {\n      this.receiveMessageHandler(event.data);\n    });\n    this.webSocket.addEventListener('close', (event: CloseEvent) => {\n      this.closeEventHandler(event);\n    });\n    this.webSocket.addEventListener('error', () => {\n      this.logger.error(`WebSocket error`);\n    });\n  }\n\n  private async startConnecting(reconnecting: boolean): Promise<void> {\n    await this.startConnectingInternal(reconnecting);\n    return await new Promise<void>((resolve, reject) => {\n      this.bootstrapResolved = resolve;\n      this.bootstrapRejected = reject;\n    });\n  }\n\n  private async startConnectingInternal(reconnecting: boolean): Promise<void> {\n    let endpointUrl = this.configuration.endpointUrl;\n\n    // Moving this reconnect logic can potentially result into an infinite reconnect loop on errors.\n    // Check https://github.com/aws/amazon-chime-sdk-js/issues/2372 for details.\n    if (!reconnecting) {\n      this.reconnectController.reset();\n    }\n    if (this.reconnectController.hasStartedConnectionAttempt()) {\n      this.reconnectController.startedConnectionAttempt(false);\n    } else {\n      this.reconnectController.startedConnectionAttempt(true);\n    }\n    // reconnect needs to re-resolve endpoint url, which will also refresh credentials on client if they are expired\n    if (reconnecting || endpointUrl === undefined) {\n      try {\n        if (this.configuration.chimeClient.getMessagingSessionEndpoint instanceof Function) {\n          const response = await this.configuration.chimeClient.getMessagingSessionEndpoint();\n          // Check for aws sdk v3 with v2 style compatibility first\n          if (response.Endpoint?.Url) {\n            endpointUrl = response.Endpoint.Url;\n          } else {\n            // Make aws sdk v2 call\n            const endpoint = await this.configuration.chimeClient\n              .getMessagingSessionEndpoint()\n              .promise();\n            endpointUrl = endpoint.Endpoint.Url;\n          }\n        } else {\n          endpointUrl = (\n            await this.configuration.chimeClient.send(new GetMessagingSessionEndpointCommand({}))\n          ).Endpoint.Url;\n        }\n        this.logger.debug(`Messaging endpoint resolved to: ${endpointUrl}`);\n      } catch (e) {\n        // send artificial close code event so the\n        // re-connect logic of underlying websocket client is\n        // triggered in the close handler\n        this.logger.error(`Messaging Session failed to resolve endpoint: ${e}`);\n        const closeEvent = new CloseEvent('close', {\n          wasClean: false,\n          code: 4999,\n          reason: 'Failed to get messaging session endpoint URL',\n          bubbles: false,\n        });\n        this.closeEventHandler(closeEvent);\n        return;\n      }\n    }\n\n    const signedUrl = await this.prepareWebSocketUrl(endpointUrl);\n    this.logger.info(`opening connection to ${signedUrl}`);\n    if (!reconnecting) {\n      this.reconnectController.reset();\n    }\n    if (this.reconnectController.hasStartedConnectionAttempt()) {\n      this.reconnectController.startedConnectionAttempt(false);\n    } else {\n      this.reconnectController.startedConnectionAttempt(true);\n    }\n    this.webSocket.create(signedUrl, [], true);\n    this.forEachObserver(observer => {\n      if (observer.messagingSessionDidStartConnecting) {\n        observer.messagingSessionDidStartConnecting(reconnecting);\n      }\n    });\n    this.setUpEventListeners();\n  }\n\n  private async prepareWebSocketUrl(endpointUrl: string): Promise<string> {\n    const queryParams = new Map<string, string[]>();\n    queryParams.set('userArn', [this.configuration.userArn]);\n    queryParams.set('sessionId', [this.configuration.messagingSessionId]);\n    if (this.configuration.prefetchOn === PrefetchOn.Connect) {\n      queryParams.set('prefetch-on', [PrefetchOn.Connect]);\n    }\n    if (this.configuration.prefetchSortBy) {\n      queryParams.set('prefetch-sort-by', [this.configuration.prefetchSortBy]);\n    }\n    return await this.sigV4.signURL(\n      'GET',\n      'wss',\n      'chime',\n      endpointUrl,\n      '/connect',\n      '',\n      queryParams\n    );\n  }\n\n  private isClosed(): boolean {\n    return (\n      this.webSocket.readyState() === WebSocketReadyState.None ||\n      this.webSocket.readyState() === WebSocketReadyState.Closed\n    );\n  }\n\n  private openEventHandler(): void {\n    this.reconnectController.reset();\n    this.isSessionEstablished = false;\n  }\n\n  private receiveMessageHandler(data: string): void {\n    try {\n      const jsonData = JSON.parse(data);\n      const messageType = jsonData.Headers['x-amz-chime-event-type'];\n      const message = new Message(messageType, jsonData.Headers, jsonData.Payload || null);\n      if (!this.isSessionEstablished && messageType === 'SESSION_ESTABLISHED') {\n        // Backend connects WebSocket and then either\n        // (1) Closes with WebSocket error code to reflect failure to authorize or other connection error OR\n        // (2) Sends SESSION_ESTABLISHED. SESSION_ESTABLISHED indicates that all messages and events on a channel\n        // the app instance user is a member of is guaranteed to be delivered on this WebSocket as long as the WebSocket\n        // connection stays opened.\n        this.forEachObserver(observer => {\n          if (observer.messagingSessionDidStart) {\n            observer.messagingSessionDidStart();\n          }\n        });\n        this.bootstrapResolved();\n        this.isSessionEstablished = true;\n\n        // Send message and flush the queue.\n        const preBootstrapMessageLength = this.preBootstrapMessages.length;\n        for (let iter = 0; iter < preBootstrapMessageLength; iter++) {\n          const preBootstrapMessage = this.preBootstrapMessages.shift();\n          this.forEachObserver(observer => {\n            this.sendMessageToObserver(observer, preBootstrapMessage);\n          });\n        }\n      } else if (!this.isSessionEstablished) {\n        // SESSION_ESTABLISHED is not guaranteed to be the first message, and in rare conditions a message or event from\n        // a channel the member is a member of might arrive prior to SESSION_ESTABLISHED.  Because SESSION_ESTABLISHED indicates\n        // it is safe to bootstrap the user application without any race conditions in losing events we opt to store messages prior\n        // to SESSION_ESTABLISHED being received and send when once SESSION_ESTABLISHED.\n        this.preBootstrapMessages.push(message);\n        return;\n      }\n      this.forEachObserver(observer => {\n        this.sendMessageToObserver(observer, message);\n      });\n    } catch (error) {\n      this.logger.error(`Messaging parsing failed: ${error}`);\n    }\n  }\n\n  private sendMessageToObserver(observer: MessagingSessionObserver, message: Message): void {\n    if (observer.messagingSessionDidReceiveMessage) {\n      observer.messagingSessionDidReceiveMessage(message);\n    }\n  }\n\n  private retryConnection(): boolean {\n    return this.reconnectController.retryWithBackoff(async () => {\n      await this.startConnecting(true);\n    }, null);\n  }\n\n  private closeEventHandler(event: CloseEvent): void {\n    this.logger.info(`WebSocket close: ${event.code} ${event.reason}`);\n    if (event.code !== 4999) {\n      this.webSocket.destroy();\n    }\n    if (!this.isClosing && this.canReconnect(event.code) && this.retryConnection()) {\n      return;\n    }\n    this.isClosing = false;\n    if (this.isSessionEstablished) {\n      this.forEachObserver(observer => {\n        if (observer.messagingSessionDidStop) {\n          observer.messagingSessionDidStop(event);\n        }\n      });\n    } else {\n      this.bootstrapRejected(event);\n    }\n  }\n\n  private canReconnect(closeCode: number): boolean {\n    // 4003 is Kicked closing event from the back end\n    return (\n      closeCode === 1001 ||\n      closeCode === 1006 ||\n      (closeCode >= 1011 && closeCode <= 1014) ||\n      (closeCode > 4000 && closeCode !== 4002 && closeCode !== 4003 && closeCode !== 4401)\n    );\n  }\n}\n"]}