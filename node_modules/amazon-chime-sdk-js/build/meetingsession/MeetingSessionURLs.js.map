{"version":3,"file":"MeetingSessionURLs.js","sourceRoot":"","sources":["../../src/meetingsession/MeetingSessionURLs.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAEtC;;;GAGG;AACH,MAAqB,kBAAkB;IAAvC;QACE;;WAEG;QACK,kBAAa,GAAkB,IAAI,CAAC;QAE5C;;WAEG;QACK,kBAAa,GAAkB,IAAI,CAAC;QAE5C;;WAEG;QACK,oBAAe,GAAkB,IAAI,CAAC;QAE9C;;WAEG;QACK,uBAAkB,GAAkB,IAAI,CAAC;QAmDjD;;;WAGG;QACH,gBAAW,GAA0C,CAAC,GAAkB,EAAE,EAAE;YAC1E,OAAO,GAAG,CAAC;QACb,CAAC,CAAC;IACJ,CAAC;IAxDC;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC;IAED,IAAI,YAAY,CAAC,KAAoB;QACnC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC;IAED,IAAI,YAAY,CAAC,KAAoB;QACnC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,IAAI,cAAc,CAAC,KAAoB;QACrC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,iBAAiB,CAAC,KAAoB;QACxC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAClC,CAAC;CASF;AA7ED,qCA6EC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * [[MeetingSessionURLs]] contains the URLs that will be used to reach the\n * meeting service.\n */\nexport default class MeetingSessionURLs {\n  /**\n   * The audio host URL of the session\n   */\n  private _audioHostURL: string | null = null;\n\n  /**\n   * The signaling URL of the session\n   */\n  private _signalingURL: string | null = null;\n\n  /**\n   * The TURN control URL of the session\n   */\n  private _turnControlURL: string | null = null;\n\n  /**\n   * The event ingestion URL to send the meeting events.\n   */\n  private _eventIngestionURL: string | null = null;\n\n  /**\n   * Gets or sets the audio host URL with gets reflecting the result of the {@link MeetingSessionURLs.urlRewriter} function.\n   */\n  get audioHostURL(): string | null {\n    return this.urlRewriter(this._audioHostURL);\n  }\n\n  set audioHostURL(value: string | null) {\n    this._audioHostURL = value;\n  }\n\n  /**\n   * Gets or sets the signaling URL with gets reflecting the result of the {@link MeetingSessionURLs.urlRewriter} function.\n   */\n  get signalingURL(): string | null {\n    return this.urlRewriter(this._signalingURL);\n  }\n\n  set signalingURL(value: string | null) {\n    this._signalingURL = value;\n  }\n\n  /**\n   * Gets or sets the TURN control URL with gets reflecting the result of the {@link MeetingSessionURLs.urlRewriter} function.\n   *\n   * This URL is currently unused by the SDK and will be removed in a later release.\n   */\n  get turnControlURL(): string | null {\n    return this.urlRewriter(this._turnControlURL);\n  }\n\n  /**\n   * This URL is currently unused by the SDK and will be removed in a later release.\n   */\n  set turnControlURL(value: string | null) {\n    this._turnControlURL = value;\n  }\n\n  /**\n   * Gets or sets the events ingestion URL with gets reflecting the result of the {@link MeetingSessionURLs.urlRewriter} function.\n   */\n  get eventIngestionURL(): string | null {\n    return this.urlRewriter(this._eventIngestionURL);\n  }\n\n  set eventIngestionURL(value: string | null) {\n    this._eventIngestionURL = value;\n  }\n\n  /**\n   * Function to transform URLs. Use this to rewrite URLs to traverse proxies.\n   * The default implementation returns the original URL unchanged.\n   */\n  urlRewriter: (url: string | null) => string | null = (url: string | null) => {\n    return url;\n  };\n}\n"]}