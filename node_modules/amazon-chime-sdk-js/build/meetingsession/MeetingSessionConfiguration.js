"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ConnectionHealthPolicyConfiguration_1 = __importDefault(require("../connectionhealthpolicy/ConnectionHealthPolicyConfiguration"));
const VideoQualitySettings_1 = __importDefault(require("../devicecontroller/VideoQualitySettings"));
const Utils_1 = require("../utils/Utils");
const MeetingFeatures_1 = __importDefault(require("./MeetingFeatures"));
const MeetingSessionCredentials_1 = __importDefault(require("./MeetingSessionCredentials"));
const MeetingSessionURLs_1 = __importDefault(require("./MeetingSessionURLs"));
/**
 * [[MeetingSessionConfiguration]] contains the information necessary to start
 * a session.
 */
class MeetingSessionConfiguration {
    /**
     * Constructs a MeetingSessionConfiguration optionally with a chime:CreateMeeting and
     * chime:CreateAttendee response. You can pass in either a JSON object containing the
     * responses, or a JSON object containing the information in the Meeting and Attendee
     * root-level fields. Examples:
     *
     * ```
     * const configuration = new MeetingSessionConfiguration({
     *   "Meeting": {
     *      "MeetingId": "...",
     *      "MediaPlacement": {
     *        "AudioHostUrl": "...",
     *        "SignalingUrl": "...",
     *        "TurnControlUrl": "..."
     *      },
     *      "MeetingFeatures":{
     *        "Audio":"...",
     *        "Video":"....",
     *        "Content":"...",
     *        "Attendee":"..."
     *      },
     *    }
     *   }
     * }, {
     *   "Attendee": {
     *     "ExternalUserId": "...",
     *     "AttendeeId": "...",
     *     "JoinToken": "..."
     *   }
     * });
     * ```
     *
     * ```
     * const configuration = new MeetingSessionConfiguration({
     *   "MeetingId": "...",
     *   "MediaPlacement": {
     *     "AudioHostUrl": "...",
     *     "SignalingUrl": "...",
     *     "TurnControlUrl": "..."
     *   }
     * }, {
     *   "ExternalUserId": "...",
     *   "AttendeeId": "...",
     *   "JoinToken": "..."
     * });
     * ```
     */
    constructor(createMeetingResponse, createAttendeeResponse) {
        var _a, _b;
        /**
         * The id of the meeting the session is joining.
         */
        this.meetingId = null;
        /**
         * The external meeting id of the meeting the session is joining.
         */
        this.externalMeetingId = null;
        /**
         * The credentials used to authenticate the session.
         */
        this.credentials = null;
        /**
         * The URLs the session uses to reach the meeting service.
         */
        this.urls = null;
        /**
         * Maximum amount of time in milliseconds to allow for connecting.
         */
        this.connectionTimeoutMs = 15000;
        /**
         * Maximum amount of time in milliseconds to wait for the current attendee to be present
         * after initial connection.
         */
        this.attendeePresenceTimeoutMs = 0;
        /**
         * Configuration for connection health policies: reconnection, unusable audio warning connection,
         * and signal strength bars connection.
         */
        this.connectionHealthPolicyConfiguration = new ConnectionHealthPolicyConfiguration_1.default();
        /**
         * Maximum amount of time in milliseconds to allow for reconnecting.
         */
        this.reconnectTimeoutMs = 120 * 1000;
        /**
         * Fixed wait amount in milliseconds between reconnecting attempts.
         */
        this.reconnectFixedWaitMs = 0;
        /**
         * The short back-off time in milliseconds between reconnecting attempts.
         */
        this.reconnectShortBackOffMs = 1 * 1000;
        /**
         * The long back-off time in milliseconds between reconnecting attempts.
         */
        this.reconnectLongBackOffMs = 5 * 1000;
        /**
         * Feature flag to enable Simulcast
         */
        this.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;
        /**
         * Feature flag to enable scalable video coding (SVC) on supported browsers, which is determined by `BrowserBehavior.supportsScalableVideoCoding`
         */
        this.enableSVC = false;
        /**
         * Video downlink bandwidth policy to determine which remote videos
         * are subscribed to.
         */
        this.videoDownlinkBandwidthPolicy = null;
        /**
         * Video uplink bandwidth policy to determine the bandwidth constraints
         * of the local video.
         */
        this.videoUplinkBandwidthPolicy = null;
        /**
         * Keep the last frame of the video when a remote video is paused via the pauseVideoTile API.
         * This is done by not clearing the srcObject property of the videoElement.
         */
        this.keepLastFrameWhenPaused = false;
        /**
         * The Amazon Chime SDK media backends currently send a keyframe request to content share senders every 10 seconds to help mitigate
         * decoder issues on receivers. This flag requests the backed to disable that feature.
         *
         * Setting this flag to true may or may not lead to issues with content received for your application, as it depends on browsers used
         * and whether they have fixed previous issues leading to the introduction of this periodic keyframe request. It will however
         * reduce CPU consumption on content senders which no longer have to generate as many expensive keyframes.
         */
        this.disablePeriodicKeyframeRequestOnContentSender = false;
        /**
         * Additional features in the meeting
         */
        this.meetingFeatures = new MeetingFeatures_1.default();
        if (createMeetingResponse) {
            createMeetingResponse = Utils_1.toLowerCasePropertyNames(createMeetingResponse);
            if (createMeetingResponse.meeting) {
                createMeetingResponse = createMeetingResponse.meeting;
            }
            this.meetingId = createMeetingResponse.meetingid;
            this.externalMeetingId = createMeetingResponse.externalmeetingid;
            this.urls = new MeetingSessionURLs_1.default();
            this.urls.audioHostURL = createMeetingResponse.mediaplacement.audiohosturl;
            this.urls.signalingURL = createMeetingResponse.mediaplacement.signalingurl;
            this.urls.turnControlURL = createMeetingResponse.mediaplacement.turncontrolurl;
            if (createMeetingResponse.mediaplacement.eventingestionurl) {
                this.urls.eventIngestionURL = createMeetingResponse.mediaplacement.eventingestionurl;
            }
            const parseVideoResolution = (resolution, defaultValue) => {
                switch (resolution) {
                    case 'None':
                        return VideoQualitySettings_1.default.VideoDisabled;
                    case 'HD':
                        return VideoQualitySettings_1.default.VideoResolutionHD;
                    case 'FHD':
                        return VideoQualitySettings_1.default.VideoResolutionFHD;
                    case 'UHD':
                        return VideoQualitySettings_1.default.VideoResolutionUHD;
                    default:
                        return defaultValue;
                }
            };
            if (((_a = createMeetingResponse.meetingfeatures) === null || _a === void 0 ? void 0 : _a.video) !== undefined ||
                ((_b = createMeetingResponse.meetingfeatures) === null || _b === void 0 ? void 0 : _b.content) !== undefined) {
                const videoMaxResolution = createMeetingResponse.meetingfeatures.video === undefined
                    ? 'HD'
                    : createMeetingResponse.meetingfeatures.video.maxresolution;
                const contentMaxResolution = createMeetingResponse.meetingfeatures.content === undefined
                    ? 'FHD'
                    : createMeetingResponse.meetingfeatures.content.maxresolution;
                this.meetingFeatures = new MeetingFeatures_1.default(parseVideoResolution(videoMaxResolution, VideoQualitySettings_1.default.VideoResolutionHD), parseVideoResolution(contentMaxResolution, VideoQualitySettings_1.default.VideoResolutionFHD));
            }
        }
        if (createAttendeeResponse) {
            createAttendeeResponse = Utils_1.toLowerCasePropertyNames(createAttendeeResponse);
            if (createAttendeeResponse.attendee) {
                createAttendeeResponse = createAttendeeResponse.attendee;
            }
            this.credentials = new MeetingSessionCredentials_1.default();
            this.credentials.attendeeId = createAttendeeResponse.attendeeid;
            this.credentials.externalUserId = createAttendeeResponse.externaluserid;
            this.credentials.joinToken = createAttendeeResponse.jointoken;
        }
    }
}
exports.default = MeetingSessionConfiguration;
//# sourceMappingURL=MeetingSessionConfiguration.js.map