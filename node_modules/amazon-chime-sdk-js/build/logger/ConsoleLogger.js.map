{"version":3,"file":"ConsoleLogger.js","sourceRoot":"","sources":["../../src/logger/ConsoleLogger.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,0DAAkC;AAElC;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAqB,aAAa;IAIhC,YAAY,IAAY,EAAE,KAAK,GAAG,kBAAQ,CAAC,IAAI;QAC7C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,GAAW;QACf,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,aAAsC;QAC1C,IAAI,kBAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE;YAC/B,OAAO;SACR;QAED,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACrC,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SACzC;aAAM,IAAI,aAAa,EAAE;YACxB,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;SAC3C;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,EAAE,GAAG,aAAa,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,WAAW,CAAC,KAAe;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEO,GAAG,CAAC,IAAc,EAAE,GAAW;QACrC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE;YACrB,OAAO;SACR;QAED,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,UAAU,GAAG,GAAG,SAAS,KAAK,kBAAQ,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,MAAM,GAAG,EAAE,CAAC;QAE5E,QAAQ,IAAI,EAAE;YACZ,KAAK,kBAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAC1B,MAAM;YACR,KAAK,kBAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,MAAM;YACR,KAAK,kBAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;gBACnD,MAAM;YACR,KAAK,kBAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,MAAM;SACT;IACH,CAAC;CACF;AAlED,gCAkEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from './Logger';\nimport LogLevel from './LogLevel';\n\n/**\n * ConsoleLogger writes logs with console\n *\n * ```typescript\n *   // working with the ConsoleLogger\n *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN\n *   logger.info('info');\n *   logger.debug('debug');\n *   logger.warn('warn');\n *   logger.error('error');\n *\n *   // setting logging levels\n *   const logger = new ConsoleLogger('demo', LogLevel.INFO)\n *   logger.debug(debugFunc()); // this will not show up\n *   logger.setLogLevel(LogLevel.DEBUG)\n *   logger.debug(debugFunc()); // this will show up\n *\n * ```\n */\nexport default class ConsoleLogger implements Logger {\n  name: string;\n  level: LogLevel;\n\n  constructor(name: string, level = LogLevel.WARN) {\n    this.name = name;\n    this.level = level;\n  }\n\n  info(msg: string): void {\n    this.log(LogLevel.INFO, msg);\n  }\n\n  warn(msg: string): void {\n    this.log(LogLevel.WARN, msg);\n  }\n\n  error(msg: string): void {\n    this.log(LogLevel.ERROR, msg);\n  }\n\n  debug(debugFunction: string | (() => string)): void {\n    if (LogLevel.DEBUG < this.level) {\n      return;\n    }\n\n    if (typeof debugFunction === 'string') {\n      this.log(LogLevel.DEBUG, debugFunction);\n    } else if (debugFunction) {\n      this.log(LogLevel.DEBUG, debugFunction());\n    } else {\n      this.log(LogLevel.DEBUG, '' + debugFunction);\n    }\n  }\n\n  setLogLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  getLogLevel(): LogLevel {\n    return this.level;\n  }\n\n  private log(type: LogLevel, msg: string): void {\n    if (type < this.level) {\n      return;\n    }\n\n    const timestamp = new Date().toISOString();\n    const logMessage = `${timestamp} [${LogLevel[type]}] ${this.name} - ${msg}`;\n\n    switch (type) {\n      case LogLevel.ERROR:\n        console.error(logMessage);\n        break;\n      case LogLevel.WARN:\n        console.warn(logMessage);\n        break;\n      case LogLevel.DEBUG:\n        console.debug(logMessage.replace(/\\\\r\\\\n/g, '\\n'));\n        break;\n      case LogLevel.INFO:\n        console.info(logMessage);\n        break;\n    }\n  }\n}\n"]}