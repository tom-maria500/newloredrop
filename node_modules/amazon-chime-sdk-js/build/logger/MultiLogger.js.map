{"version":3,"file":"MultiLogger.js","sourceRoot":"","sources":["../../src/logger/MultiLogger.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,0DAAkC;AAElC;;GAEG;AACH,MAAqB,WAAW;IAG9B,YAAY,GAAG,OAAiB;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAED,IAAI,CAAC,GAAW;QACd,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;IAED,IAAI,CAAC,GAAW;QACd,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;IAED,KAAK,CAAC,GAAW;QACf,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACnB;IACH,CAAC;IAED,KAAK,CAAC,aAAsC;QAC1C,IAAI,OAAe,CAAC;QACpB,IAAI,QAAiC,CAAC;QACtC,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACrC,QAAQ,GAAG,aAAa,CAAC;SAC1B;aAAM,IAAI,aAAa,EAAE;YACxB,QAAQ,GAAG,GAAG,EAAE;gBACd,IAAI,CAAC,OAAO,EAAE;oBACZ,OAAO,GAAG,aAAa,EAAE,CAAC;iBAC3B;gBACD,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC;SACH;aAAM;YACL,QAAQ,GAAG,EAAE,GAAG,aAAa,CAAC;SAC/B;QAED,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SACxB;IACH,CAAC;IAED,WAAW,CAAC,KAAe;QACzB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,WAAW;QACT,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,OAAO,MAAM,CAAC,WAAW,EAAE,CAAC;SAC7B;QACD,OAAO,kBAAQ,CAAC,GAAG,CAAC;IACtB,CAAC;CACF;AA1DD,8BA0DC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from './Logger';\nimport LogLevel from './LogLevel';\n\n/**\n * MultiLogger writes logs to multiple other loggers\n */\nexport default class MultiLogger implements Logger {\n  private _loggers: Logger[];\n\n  constructor(...loggers: Logger[]) {\n    this._loggers = loggers;\n  }\n\n  info(msg: string): void {\n    for (const logger of this._loggers) {\n      logger.info(msg);\n    }\n  }\n\n  warn(msg: string): void {\n    for (const logger of this._loggers) {\n      logger.warn(msg);\n    }\n  }\n\n  error(msg: string): void {\n    for (const logger of this._loggers) {\n      logger.error(msg);\n    }\n  }\n\n  debug(debugFunction: string | (() => string)): void {\n    let message: string;\n    let memoized: string | (() => string);\n    if (typeof debugFunction === 'string') {\n      memoized = debugFunction;\n    } else if (debugFunction) {\n      memoized = () => {\n        if (!message) {\n          message = debugFunction();\n        }\n        return message;\n      };\n    } else {\n      memoized = '' + debugFunction;\n    }\n\n    for (const logger of this._loggers) {\n      logger.debug(memoized);\n    }\n  }\n\n  setLogLevel(level: LogLevel): void {\n    for (const logger of this._loggers) {\n      logger.setLogLevel(level);\n    }\n  }\n\n  getLogLevel(): LogLevel {\n    for (const logger of this._loggers) {\n      return logger.getLogLevel();\n    }\n    return LogLevel.OFF;\n  }\n}\n"]}