{"version":3,"file":"POSTLogger.js","sourceRoot":"","sources":["../../src/logger/POSTLogger.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAGtC,uFAA+D;AAC/D,gDAAwB;AAExB,0DAAkC;AAGlC;;;;;;GAMG;AACH,MAAqB,UAAU;IAe7B,YAAY,OAA0B;QAN9B,eAAU,GAAU,EAAE,CAAC;QAEvB,SAAI,GAAG,KAAK,CAAC;QACb,mBAAc,GAAW,CAAC,CAAC;QAIjC,MAAM,EACJ,GAAG,EACH,SAAS,GAAG,UAAU,CAAC,UAAU,EACjC,UAAU,GAAG,UAAU,CAAC,WAAW,EACnC,QAAQ,GAAG,kBAAQ,CAAC,IAAI,EACxB,QAAQ,EACR,OAAO,GACR,GAAG,OAAO,CAAC;QACZ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,IAAI,CAAC,aAAa,GAAG,GAAG,EAAE;YACxB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC,CAAC;QAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC5E,OAAO;SACR;QACD,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;YAC/E,OAAO;SACR;QACD,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,aAAsC;QAC1C,IAAI,kBAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;YAClC,OAAO;SACR;QAED,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACrC,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SACzC;aAAM,IAAI,aAAa,EAAE;YACxB,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;SAC3C;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,EAAE,GAAG,aAAa,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,GAAW;QACf,IAAI,CAAC,GAAG,CAAC,kBAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,WAAW,CAAC,QAAkB;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IAChC,CAAC;IAEO,KAAK;QACX,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,iBAAiB,GAAG,IAAI,2BAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAS,EAAE;YACtC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAE;gBACxD,OAAO;aACR;YACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACvD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,GAAG,kBACnC,MAAM,EAAE,MAAM,EACd,IAAI,IACD,CAAC,IAAI,CAAC,OAAO;oBACd,CAAC,CAAC;wBACE,OAAO,EAAE,IAAI,CAAC,OAAO;qBACtB;oBACH,CAAC,CAAC,EAAE,CAAC,EACP,CAAC;gBACH,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;oBAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;iBACvD;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;aAC/C;oBAAS;gBACR,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;aACnB;QACH,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;IAEO,IAAI;;QACV,oCAAoC;QACpC,MAAA,IAAI,CAAC,iBAAiB,0CAAE,IAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACnC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAED;;;OAGG;IACG,OAAO;;YACX,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC1B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACvB,CAAC;KAAA;IAEO,eAAe,CAAC,KAAY;QAClC,OAAO,IAAI,CAAC,SAAS,iCAChB,IAAI,CAAC,QAAQ,KAChB,IAAI,EAAE,KAAK,IACX,CAAC;IACL,CAAC;IAEO,GAAG,CAAC,IAAc,EAAE,GAAW;QACrC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE;YACxB,OAAO;SACR;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,oBAAoB;QACpB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,aAAG,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,EAAE,kBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC;IAC3B,CAAC;;AArKH,6BAsKC;AArKyB,qBAAU,GAAG,EAAE,CAAC;AAChB,sBAAW,GAAG,IAAI,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Destroyable } from '../destroyable/Destroyable';\nimport IntervalScheduler from '../scheduler/IntervalScheduler';\nimport Log from './Log';\nimport Logger from './Logger';\nimport LogLevel from './LogLevel';\nimport POSTLoggerOptions from './POSTLoggerOptions';\n\n/**\n * `POSTLogger` publishes log messages in batches to a URL\n * supplied during its construction.\n *\n * Be sure to call {@link POSTLogger.destroy} when you're done\n * with the logger in order to avoid leaks.\n */\nexport default class POSTLogger implements Logger, Destroyable {\n  private static readonly BATCH_SIZE = 85;\n  private static readonly INTERVAL_MS = 2000;\n  private url: string;\n  private batchSize: number;\n  private eventListener: undefined | (() => void);\n  private headers: Record<string, string>;\n  private intervalMs: number;\n  private intervalScheduler: IntervalScheduler;\n  private logCapture: Log[] = [];\n  private logLevel: LogLevel;\n  private lock = false;\n  private sequenceNumber: number = 0;\n  metadata: Record<string, string>;\n\n  constructor(options: POSTLoggerOptions) {\n    const {\n      url,\n      batchSize = POSTLogger.BATCH_SIZE,\n      intervalMs = POSTLogger.INTERVAL_MS,\n      logLevel = LogLevel.WARN,\n      metadata,\n      headers,\n    } = options;\n    this.url = url;\n    this.batchSize = batchSize;\n    this.intervalMs = intervalMs;\n    this.logLevel = logLevel;\n    this.metadata = metadata;\n    this.headers = headers;\n\n    this.start();\n\n    this.eventListener = () => {\n      this.stop();\n    };\n\n    this.addEventListener();\n  }\n\n  addEventListener(): void {\n    if (!this.eventListener || !('window' in global) || !window.addEventListener) {\n      return;\n    }\n    window.addEventListener('unload', this.eventListener);\n  }\n\n  removeEventListener(): void {\n    if (!this.eventListener || !('window' in global) || !window.removeEventListener) {\n      return;\n    }\n    window.removeEventListener('unload', this.eventListener);\n  }\n\n  debug(debugFunction: string | (() => string)): void {\n    if (LogLevel.DEBUG < this.logLevel) {\n      return;\n    }\n\n    if (typeof debugFunction === 'string') {\n      this.log(LogLevel.DEBUG, debugFunction);\n    } else if (debugFunction) {\n      this.log(LogLevel.DEBUG, debugFunction());\n    } else {\n      this.log(LogLevel.DEBUG, '' + debugFunction);\n    }\n  }\n\n  info(msg: string): void {\n    this.log(LogLevel.INFO, msg);\n  }\n\n  warn(msg: string): void {\n    this.log(LogLevel.WARN, msg);\n  }\n\n  error(msg: string): void {\n    this.log(LogLevel.ERROR, msg);\n  }\n\n  setLogLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel;\n  }\n\n  getLogLevel(): LogLevel {\n    return this.logLevel;\n  }\n\n  getLogCaptureSize(): number {\n    return this.logCapture.length;\n  }\n\n  private start(): void {\n    this.addEventListener();\n    this.intervalScheduler = new IntervalScheduler(this.intervalMs);\n    this.intervalScheduler.start(async () => {\n      if (this.lock === true || this.getLogCaptureSize() === 0) {\n        return;\n      }\n      this.lock = true;\n      const batch = this.logCapture.slice(0, this.batchSize);\n      const body = this.makeRequestBody(batch);\n      try {\n        const response = await fetch(this.url, {\n          method: 'POST',\n          body,\n          ...(this.headers\n            ? {\n                headers: this.headers,\n              }\n            : {}),\n        });\n        if (response.status === 200) {\n          this.logCapture = this.logCapture.slice(batch.length);\n        }\n      } catch (error) {\n        console.warn('[POSTLogger] ' + error.message);\n      } finally {\n        this.lock = false;\n      }\n    });\n  }\n\n  private stop(): void {\n    // Clean up to avoid resource leaks.\n    this.intervalScheduler?.stop();\n    this.intervalScheduler = undefined;\n    this.removeEventListener();\n\n    const body = this.makeRequestBody(this.logCapture);\n    navigator.sendBeacon(this.url, body);\n  }\n\n  /**\n   * Permanently clean up the logger. A new logger must be created to\n   * resume logging.\n   */\n  async destroy(): Promise<void> {\n    this.stop();\n    this.metadata = undefined;\n    this.headers = undefined;\n    this.logCapture = [];\n    this.sequenceNumber = 0;\n    this.lock = false;\n    this.batchSize = 0;\n    this.intervalMs = 0;\n    this.url = undefined;\n  }\n\n  private makeRequestBody(batch: Log[]): string {\n    return JSON.stringify({\n      ...this.metadata,\n      logs: batch,\n    });\n  }\n\n  private log(type: LogLevel, msg: string): void {\n    if (type < this.logLevel) {\n      return;\n    }\n    const now = Date.now();\n\n    // Handle undefined.\n    this.logCapture.push(new Log(this.sequenceNumber, msg, now, LogLevel[type]));\n    this.sequenceNumber += 1;\n  }\n}\n"]}