{"version":3,"file":"TranscriptEvent.js","sourceRoot":"","sources":["../../src/transcript/TranscriptEvent.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;AAGtC,8EAIgD;AAChD,8DAAsC;AAGtC,gFAAwD;AACxD,wFAAgE;AAEhE,8EAAsD;AAItD,MAAM,wBAAwB,GAAG;IAC/B,CAAC,0CAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,iCAAuB,CAAC,OAAO;IACtE,CAAC,0CAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,iCAAuB,CAAC,WAAW;IAC9E,CAAC,0CAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,iCAAuB,CAAC,OAAO;IACtE,CAAC,0CAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,iCAAuB,CAAC,OAAO;IACtE,CAAC,0CAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,iCAAuB,CAAC,MAAM;CACrE,CAAC;AAIF,MAAa,wBAAwB;IACnC;;;;;OAKG;IACH,MAAM,CAAC,IAAI,CAAC,WAAwB;QAClC,IAAI,KAAK,CAAC;QACV,IAAI;YACF,KAAK,GAAG,sCAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACrD;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,GAAG,CAAC,CAAC,CAAC;SAChE;QAED,MAAM,gBAAgB,GAAsB,EAAE,CAAC;QAC/C,KAAK,MAAM,kBAAkB,IAAI,KAAK,CAAC,MAAM,EAAE;YAC7C,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBAC7B,MAAM,uBAAuB,GAAG,wBAAwB,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACzF,IAAI,CAAC,uBAAuB,EAAE;oBAC5B,SAAS;iBACV;gBACD,MAAM,mBAAmB,GAAG,IAAI,6BAAmB,EAAE,CAAC;gBACtD,mBAAmB,CAAC,IAAI,GAAG,uBAAuB,CAAC;gBACnD,mBAAmB,CAAC,WAAW,GAAG,kBAAkB,CAAC,MAAM,CAAC,SAAmB,CAAC;gBAChF,mBAAmB,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC;gBACxF,mBAAmB,CAAC,0BAA0B;oBAC5C,kBAAkB,CAAC,MAAM,CAAC,0BAA0B,CAAC;gBAEvD,IAAI,kBAAkB,CAAC,MAAM,CAAC,OAAO,EAAE;oBACrC,mBAAmB,CAAC,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC;iBACjE;gBAED,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;aAC5C;iBAAM,IAAI,kBAAkB,CAAC,UAAU,EAAE;gBACxC,MAAM,UAAU,GAAG,IAAI,oBAAU,EAAE,CAAC;gBACpC,UAAU,CAAC,OAAO,GAAG,EAAE,CAAC;gBAExB,KAAK,MAAM,MAAM,IAAI,kBAAkB,CAAC,UAAU,CAAC,OAAO,EAAE;oBAC1D,MAAM,gBAAgB,GAAqB;wBACzC,SAAS,EAAE,MAAM,CAAC,SAAS;wBAC3B,SAAS,EAAE,MAAM,CAAC,SAAS;wBAC3B,QAAQ,EAAE,MAAM,CAAC,QAAQ;wBACzB,WAAW,EAAE,MAAM,CAAC,SAAmB;wBACvC,SAAS,EAAE,MAAM,CAAC,OAAiB;wBACnC,YAAY,EAAE,EAAE;qBACjB,CAAC;oBAEF,IAAI,MAAM,CAAC,YAAY,EAAE;wBACvB,gBAAgB,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;qBACrD;oBAED,IAAI,MAAM,CAAC,sBAAsB,IAAI,MAAM,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC7E,gBAAgB,CAAC,sBAAsB,GAAG,EAAE,CAAC;wBAC7C,KAAK,MAAM,sBAAsB,IAAI,MAAM,CAAC,sBAAsB,EAAE;4BAClE,MAAM,2BAA2B,GAAgC;gCAC/D,YAAY,EAAE,sBAAsB,CAAC,YAAY;gCACjD,KAAK,EAAE,sBAAsB,CAAC,KAAK;6BACpC,CAAC;4BAEF,gBAAgB,CAAC,sBAAsB,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;yBAC3E;qBACF;oBAED,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,YAAY,EAAE;wBAC7C,MAAM,qBAAqB,GAA0B;4BACnD,KAAK,EAAE,EAAE;4BACT,UAAU,EAAE,WAAW,CAAC,UAAU;yBACnC,CAAC;wBAEF,KAAK,MAAM,IAAI,IAAI,WAAW,CAAC,KAAK,EAAE;4BACpC,MAAM,cAAc,GAAmB;gCACrC,OAAO,EAAE,IAAI,CAAC,OAAO;gCACrB,QAAQ,EAAE;oCACR,UAAU,EAAE,IAAI,CAAC,iBAAiB;oCAClC,cAAc,EAAE,IAAI,CAAC,qBAAqB;iCAC3C;gCACD,WAAW,EAAE,IAAI,CAAC,SAAmB;gCACrC,SAAS,EAAE,IAAI,CAAC,OAAiB;gCACjC,IAAI,EAAE,IAAI;6BACX,CAAC;4BAEF,IAAI,IAAI,CAAC,qBAAqB,EAAE;gCAC9B,cAAc,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;6BACnE;4BAED,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gCACjC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;6BACrC;4BAED,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;gCACrC,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;6BAC7C;4BAED,QAAQ,IAAI,CAAC,IAAI,EAAE;gCACjB,KAAK,qCAAiB,CAAC,IAAI,CAAC,aAAa;oCACvC,cAAc,CAAC,IAAI,GAAG,4BAAkB,CAAC,aAAa,CAAC;oCACvD,MAAM;gCACR,KAAK,qCAAiB,CAAC,IAAI,CAAC,WAAW;oCACrC,cAAc,CAAC,IAAI,GAAG,4BAAkB,CAAC,WAAW,CAAC;oCACrD,MAAM;6BACT;4BAED,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;yBAClD;wBAED,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,QAAQ,EAAE;4BACzC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE;gCACnC,qBAAqB,CAAC,QAAQ,GAAG,EAAE,CAAC;6BACrC;4BACD,MAAM,gBAAgB,GAAqB;gCACzC,QAAQ,EAAE,MAAM,CAAC,QAAQ;gCACzB,UAAU,EAAE,MAAM,CAAC,UAAU;gCAC7B,OAAO,EAAE,MAAM,CAAC,OAAO;gCACvB,WAAW,EAAE,MAAM,CAAC,SAAmB;gCACvC,SAAS,EAAE,MAAM,CAAC,OAAiB;6BACpC,CAAC;4BAEF,IAAI,MAAM,CAAC,IAAI,EAAE;gCACf,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;6BACrC;4BACD,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;yBACvD;wBAED,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;qBAC3D;oBAED,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;iBAC3C;gBAED,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACnC;SACF;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;CACF;AAxID,4DAwIC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DataMessage from '../datamessage/DataMessage';\nimport {\n  SdkTranscriptFrame,\n  SdkTranscriptionStatus,\n  SdkTranscriptItem,\n} from '../signalingprotocol/SignalingProtocol';\nimport Transcript from './Transcript';\nimport TranscriptAlternative from './TranscriptAlternative';\nimport TranscriptEntity from './TranscriptEntity';\nimport TranscriptionStatus from './TranscriptionStatus';\nimport TranscriptionStatusType from './TranscriptionStatusType';\nimport TranscriptItem from './TranscriptItem';\nimport TranscriptItemType from './TranscriptItemType';\nimport TranscriptLanguageWithScore from './TranscriptLanguageWithScore';\nimport TranscriptResult from './TranscriptResult';\n\nconst TranscriptionStatusTypes = {\n  [SdkTranscriptionStatus.Type.STARTED]: TranscriptionStatusType.STARTED,\n  [SdkTranscriptionStatus.Type.INTERRUPTED]: TranscriptionStatusType.INTERRUPTED,\n  [SdkTranscriptionStatus.Type.RESUMED]: TranscriptionStatusType.RESUMED,\n  [SdkTranscriptionStatus.Type.STOPPED]: TranscriptionStatusType.STOPPED,\n  [SdkTranscriptionStatus.Type.FAILED]: TranscriptionStatusType.FAILED,\n};\n\ntype TranscriptEvent = Transcript | TranscriptionStatus;\n\nexport class TranscriptEventConverter {\n  /**\n   * Decodes a list of TranscriptEvent from a data message.\n   * @param dataMessage Data message to decode from\n   * @returns List of TranscriptEvent\n   * @throws {Error} If the data message payload cannot be decoded\n   */\n  static from(dataMessage: DataMessage): TranscriptEvent[] {\n    let frame;\n    try {\n      frame = SdkTranscriptFrame.decode(dataMessage.data);\n    } catch (e) {\n      throw new Error('Cannot decode transcript data message: ' + e);\n    }\n\n    const transcriptEvents: TranscriptEvent[] = [];\n    for (const sdkTranscriptEvent of frame.events) {\n      if (sdkTranscriptEvent.status) {\n        const transcriptionStatusType = TranscriptionStatusTypes[sdkTranscriptEvent.status.type];\n        if (!transcriptionStatusType) {\n          continue;\n        }\n        const transcriptionStatus = new TranscriptionStatus();\n        transcriptionStatus.type = transcriptionStatusType;\n        transcriptionStatus.eventTimeMs = sdkTranscriptEvent.status.eventTime as number;\n        transcriptionStatus.transcriptionRegion = sdkTranscriptEvent.status.transcriptionRegion;\n        transcriptionStatus.transcriptionConfiguration =\n          sdkTranscriptEvent.status.transcriptionConfiguration;\n\n        if (sdkTranscriptEvent.status.message) {\n          transcriptionStatus.message = sdkTranscriptEvent.status.message;\n        }\n\n        transcriptEvents.push(transcriptionStatus);\n      } else if (sdkTranscriptEvent.transcript) {\n        const transcript = new Transcript();\n        transcript.results = [];\n\n        for (const result of sdkTranscriptEvent.transcript.results) {\n          const transcriptResult: TranscriptResult = {\n            channelId: result.channelId,\n            isPartial: result.isPartial,\n            resultId: result.resultId,\n            startTimeMs: result.startTime as number,\n            endTimeMs: result.endTime as number,\n            alternatives: [],\n          };\n\n          if (result.languageCode) {\n            transcriptResult.languageCode = result.languageCode;\n          }\n\n          if (result.languageIdentification && result.languageIdentification.length > 0) {\n            transcriptResult.languageIdentification = [];\n            for (const languageIdentification of result.languageIdentification) {\n              const transcriptLanguageWithScore: TranscriptLanguageWithScore = {\n                languageCode: languageIdentification.languageCode,\n                score: languageIdentification.score,\n              };\n\n              transcriptResult.languageIdentification.push(transcriptLanguageWithScore);\n            }\n          }\n\n          for (const alternative of result.alternatives) {\n            const transcriptAlternative: TranscriptAlternative = {\n              items: [],\n              transcript: alternative.transcript,\n            };\n\n            for (const item of alternative.items) {\n              const transcriptItem: TranscriptItem = {\n                content: item.content,\n                attendee: {\n                  attendeeId: item.speakerAttendeeId,\n                  externalUserId: item.speakerExternalUserId,\n                },\n                startTimeMs: item.startTime as number,\n                endTimeMs: item.endTime as number,\n                type: null,\n              };\n\n              if (item.vocabularyFilterMatch) {\n                transcriptItem.vocabularyFilterMatch = item.vocabularyFilterMatch;\n              }\n\n              if (item.hasOwnProperty('stable')) {\n                transcriptItem.stable = item.stable;\n              }\n\n              if (item.hasOwnProperty('confidence')) {\n                transcriptItem.confidence = item.confidence;\n              }\n\n              switch (item.type) {\n                case SdkTranscriptItem.Type.PRONUNCIATION:\n                  transcriptItem.type = TranscriptItemType.PRONUNCIATION;\n                  break;\n                case SdkTranscriptItem.Type.PUNCTUATION:\n                  transcriptItem.type = TranscriptItemType.PUNCTUATION;\n                  break;\n              }\n\n              transcriptAlternative.items.push(transcriptItem);\n            }\n\n            for (const entity of alternative.entities) {\n              if (!transcriptAlternative.entities) {\n                transcriptAlternative.entities = [];\n              }\n              const transcriptEntity: TranscriptEntity = {\n                category: entity.category,\n                confidence: entity.confidence,\n                content: entity.content,\n                startTimeMs: entity.startTime as number,\n                endTimeMs: entity.endTime as number,\n              };\n\n              if (entity.type) {\n                transcriptEntity.type = entity.type;\n              }\n              transcriptAlternative.entities.push(transcriptEntity);\n            }\n\n            transcriptResult.alternatives.push(transcriptAlternative);\n          }\n\n          transcript.results.push(transcriptResult);\n        }\n\n        transcriptEvents.push(transcript);\n      }\n    }\n\n    return transcriptEvents;\n  }\n}\n\nexport default TranscriptEvent;\n"]}