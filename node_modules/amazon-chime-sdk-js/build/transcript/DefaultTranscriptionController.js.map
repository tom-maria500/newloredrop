{"version":3,"file":"DefaultTranscriptionController.js","sourceRoot":"","sources":["../../src/transcript/DefaultTranscriptionController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAItC,uDAA8E;AAGjE,QAAA,gCAAgC,GAAG,yBAAyB,CAAC;AAE1E,MAAqB,8BAA8B;IAGjD,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACxD,IAAI,CAAC,wBAAwB,GAAG,IAAI,GAAG,EAA8C,CAAC;IACxF,CAAC;IAED,0BAA0B,CAAC,QAAoD;QAC7E,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,KAAK,CAAC,EAAE;YAC5C,IAAI,CAAC,kBAAkB,CAAC,qCAAqC,CAC3D,wCAAgC,EAChC,CAAC,WAAwB,EAAE,EAAE;gBAC3B,KAAK,MAAM,eAAe,IAAI,0CAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBACxE,KAAK,MAAM,uBAAuB,IAAI,IAAI,CAAC,wBAAwB,EAAE;wBACnE,uBAAuB,CAAC,eAAe,CAAC,CAAC;qBAC1C;iBACF;YACH,CAAC,CACF,CAAC;SACH;QAED,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,8BAA8B,CAAC,QAAoD;QACjF,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,KAAK,CAAC,EAAE;YAC5C,IAAI,CAAC,kBAAkB,CAAC,yCAAyC,CAC/D,wCAAgC,CACjC,CAAC;SACH;IACH,CAAC;CACF;AAjCD,iDAiCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DataMessage from '../datamessage/DataMessage';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport TranscriptEvent, { TranscriptEventConverter } from './TranscriptEvent';\nimport TranscriptionController from './TranscriptionController';\n\nexport const TRANSCRIPTION_DATA_MESSAGE_TOPIC = 'aws:chime:transcription';\n\nexport default class DefaultTranscriptionController implements TranscriptionController {\n  private readonly transcriptEventCallbacks: Set<(transcriptEvent: TranscriptEvent) => void>;\n\n  constructor(private realtimeController: RealtimeController) {\n    this.transcriptEventCallbacks = new Set<(transcriptEvent: TranscriptEvent) => void>();\n  }\n\n  subscribeToTranscriptEvent(callback: (transcriptEvent: TranscriptEvent) => void): void {\n    if (this.transcriptEventCallbacks.size === 0) {\n      this.realtimeController.realtimeSubscribeToReceiveDataMessage(\n        TRANSCRIPTION_DATA_MESSAGE_TOPIC,\n        (dataMessage: DataMessage) => {\n          for (const transcriptEvent of TranscriptEventConverter.from(dataMessage)) {\n            for (const transcriptEventCallback of this.transcriptEventCallbacks) {\n              transcriptEventCallback(transcriptEvent);\n            }\n          }\n        }\n      );\n    }\n\n    this.transcriptEventCallbacks.add(callback);\n  }\n\n  unsubscribeFromTranscriptEvent(callback: (transcriptEvent: TranscriptEvent) => void): void {\n    this.transcriptEventCallbacks.delete(callback);\n\n    if (this.transcriptEventCallbacks.size === 0) {\n      this.realtimeController.realtimeUnsubscribeFromReceiveDataMessage(\n        TRANSCRIPTION_DATA_MESSAGE_TOPIC\n      );\n    }\n  }\n}\n"]}