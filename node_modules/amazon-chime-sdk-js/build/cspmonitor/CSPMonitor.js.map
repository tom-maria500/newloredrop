{"version":3,"file":"CSPMonitor.js","sourceRoot":"","sources":["../../src/cspmonitor/CSPMonitor.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAItC,MAAqB,UAAU;IAK7B,0BAA0B;IAC1B,MAAM,CAAC,QAAQ;QACb,IAAI,CAAC,CAAC,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE;YACzD,OAAO;SACR;QACD,IAAI,UAAU,CAAC,wBAAwB,EAAE;YACvC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;gBACrB,QAAQ,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC1E,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC;aACzB;SACF;IACH,CAAC;IAED,0BAA0B;IAC1B,MAAM,CAAC,UAAU;QACf,IAAI,CAAC,CAAC,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE;YAC5D,OAAO;SACR;QACD,QAAQ,CAAC,mBAAmB,CAAC,yBAAyB,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC7E,UAAU,CAAC,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;QACvC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,UAAU,CAAC,wBAAwB,GAAG,KAAK,CAAC;QAC5C,UAAU,CAAC,UAAU,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,MAAc;QAC7B,IAAI,MAAM,EAAE;YACV,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAChC;IACH,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,MAAc;QAChC,IAAI,MAAM,EAAE;YACV,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACnC;IACH,CAAC;;AA3CH,6BA+DC;AA9DgB,kBAAO,GAAgB,IAAI,GAAG,EAAU,CAAC;AACzC,mCAAwB,GAAY,IAAI,CAAC;AACzC,gBAAK,GAAG,KAAK,CAAC;AA0C7B,0BAA0B;AACX,mBAAQ,GAAG,CAAC,KAAmC,EAAQ,EAAE;IACtE,MAAM,OAAO,GACX,6BAA6B;QAC7B,gBAAgB,KAAK,CAAC,UAAU,IAAI;QACpC,uBAAuB,KAAK,CAAC,iBAAiB,IAAI;QAClD,oBAAoB,KAAK,CAAC,cAAc,IAAI;QAC5C,iBAAiB,KAAK,CAAC,WAAW,IAAI;QACtC,gBAAgB,KAAK,CAAC,UAAU,IAAI;QACpC,aAAa,KAAK,CAAC,UAAU,IAAI,CAAC;IAEpC,KAAK,MAAM,MAAM,IAAI,UAAU,CAAC,OAAO,EAAE;QACvC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KACvB;IACD,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,EAAE;QACjC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KACxB;AACH,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\n\nexport default class CSPMonitor {\n  private static loggers: Set<Logger> = new Set<Logger>();\n  private static shouldRegisterCSPMonitor: boolean = true;\n  private static added = false;\n\n  /* istanbul ignore next */\n  static register(): void {\n    if (!('document' in global) || !document.addEventListener) {\n      return;\n    }\n    if (CSPMonitor.shouldRegisterCSPMonitor) {\n      if (!CSPMonitor.added) {\n        document.addEventListener('securitypolicyviolation', CSPMonitor.listener);\n        CSPMonitor.added = true;\n      }\n    }\n  }\n\n  /* istanbul ignore next */\n  static unregister(): void {\n    if (!('document' in global) || !document.removeEventListener) {\n      return;\n    }\n    document.removeEventListener('securitypolicyviolation', CSPMonitor.listener);\n    CSPMonitor.loggers = new Set<Logger>();\n    CSPMonitor.added = false;\n  }\n\n  static disable(): void {\n    CSPMonitor.shouldRegisterCSPMonitor = false;\n    CSPMonitor.unregister();\n  }\n\n  static addLogger(logger: Logger): void {\n    if (logger) {\n      CSPMonitor.loggers.add(logger);\n    }\n  }\n\n  static removeLogger(logger: Logger): void {\n    if (logger) {\n      CSPMonitor.loggers.delete(logger);\n    }\n  }\n\n  /* istanbul ignore next */\n  private static listener = (event: SecurityPolicyViolationEvent): void => {\n    const message =\n      'Security Policy Violation\\n' +\n      `Blocked URI: ${event.blockedURI}\\n` +\n      `Violated Directive: ${event.violatedDirective}\\n` +\n      `Original Policy: ${event.originalPolicy}\\n` +\n      `Document URI: ${event.documentURI}\\n` +\n      `Source File: ${event.sourceFile}\\n` +\n      `Line No.: ${event.lineNumber}\\n`;\n\n    for (const logger of CSPMonitor.loggers) {\n      logger.error(message);\n    }\n    if (CSPMonitor.loggers.size === 0) {\n      console.error(message);\n    }\n  };\n}\n"]}