{"version":3,"file":"FullJitterLimitedBackoff.js","sourceRoot":"","sources":["../../src/backoff/FullJitterLimitedBackoff.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAEtC,4EAAoD;AAEpD,MAAqB,wBAAyB,SAAQ,2BAAiB;IAGrE,YACE,WAAmB,EACnB,cAAsB,EACtB,aAAqB,EACb,KAAa;QAErB,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;QAF1C,UAAK,GAAL,KAAK,CAAQ;QANf,aAAQ,GAAG,CAAC,CAAC;IASrB,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QACD,OAAO,KAAK,CAAC,mBAAmB,EAAE,CAAC;IACrC,CAAC;CACF;AAnBD,2CAmBC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport FullJitterBackoff from './FullJitterBackoff';\n\nexport default class FullJitterLimitedBackoff extends FullJitterBackoff {\n  private attempts = 0;\n\n  constructor(\n    fixedWaitMs: number,\n    shortBackoffMs: number,\n    longBackoffMs: number,\n    private limit: number\n  ) {\n    super(fixedWaitMs, shortBackoffMs, longBackoffMs);\n  }\n\n  nextBackoffAmountMs(): number {\n    this.attempts++;\n    if (this.attempts > this.limit) {\n      throw new Error('retry limit exceeded');\n    }\n    return super.nextBackoffAmountMs();\n  }\n}\n"]}