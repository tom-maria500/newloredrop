{"version":3,"file":"FullJitterBackoff.js","sourceRoot":"","sources":["../../src/backoff/FullJitterBackoff.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAItC;;;;;GAKG;AACH,MAAqB,iBAAiB;IAGpC,YACU,WAAmB,EACnB,cAAsB,EACtB,aAAqB;QAFrB,gBAAW,GAAX,WAAW,CAAQ;QACnB,mBAAc,GAAd,cAAc,CAAQ;QACtB,kBAAa,GAAb,aAAa,CAAQ;QALvB,iBAAY,GAAW,CAAC,CAAC;QAO/B,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;YACxB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;SACzB;QACD,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;SACxB;QACD,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,KAAK;QACH,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,mBAAmB;QACjB,MAAM,YAAY,GAChB,IAAI,CAAC,MAAM,EAAE;YACX,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACtF,IAAI,CAAC,WAAW,CAAC;QACnB,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;QACvB,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;AAhCD,oCAgCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Backoff from './Backoff';\n\n/**\n * Implements the [Full Jitter algorithm](\n * https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/)\n * and also allows for specifying a fixed wait added to the full jitter backoff\n * (which can be zero).\n */\nexport default class FullJitterBackoff implements Backoff {\n  private currentRetry: number = 0;\n\n  constructor(\n    private fixedWaitMs: number,\n    private shortBackoffMs: number,\n    private longBackoffMs: number\n  ) {\n    if (this.fixedWaitMs < 0) {\n      this.fixedWaitMs = 0;\n    }\n    if (this.shortBackoffMs < 0) {\n      this.shortBackoffMs = 0;\n    }\n    if (this.longBackoffMs < 0) {\n      this.longBackoffMs = 0;\n    }\n    this.reset();\n  }\n\n  reset(): void {\n    this.currentRetry = 0;\n  }\n\n  nextBackoffAmountMs(): number {\n    const fullJitterMs =\n      Math.random() *\n        Math.min(this.longBackoffMs, this.shortBackoffMs * Math.pow(2.0, this.currentRetry)) +\n      this.fixedWaitMs;\n    this.currentRetry += 1;\n    return fullJitterMs;\n  }\n}\n"]}