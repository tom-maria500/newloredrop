{"version":3,"file":"ContentShareControllerFacade.js","sourceRoot":"","sources":["../../src/contentsharecontroller/ContentShareControllerFacade.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioProfile from '../audioprofile/AudioProfile';\nimport ContentShareObserver from '../contentshareobserver/ContentShareObserver';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport ContentShareSimulcastEncodingParameters from '../videouplinkbandwidthpolicy/ContentShareSimulcastEncodingParameters';\n\nexport default interface ContentShareControllerFacade {\n  /**\n   * Sets the audio profile to use for content sharing. The new audio profile takes effect\n   * on the next call to `startContentShare` or `startContentShareFromScreenCapture` or if\n   * already started, upon the next reconnect.\n   */\n  setContentAudioProfile(audioProfile: AudioProfile): void;\n\n  /**\n   * Toggle simulcast for content share. This should be called before calling `startContentShare` or\n   * `startContentShareFromScreenCapture`. The default encoding parameters are:\n   * - High layer: 1200 kbps max bitrate\n   * - Low layer: 300 kbps max bitrate, scale down resolution by 2, and 5 fps max frame rate.\n   * @param enable Enable/disable simulcast\n   * @param encodingParams Overide the default encoding params for either layer in max bitrate, scale resolution\n   * down by, or max frame rate.\n   */\n  enableSimulcastForContentShare(\n    enable: boolean,\n    encodingParams?: ContentShareSimulcastEncodingParameters\n  ): void;\n\n  /**\n   * Toggle SVC for content share. This should be called before calling `startContentShare` or\n   * `startContentShareFromScreenCapture`. This will only have impact if using an SVC supporting\n   * codec like VP9. It cannot be enabled at the same time as simulcast.\n   *\n   * @param enable Enable/disable SVC\n   */\n  enableSVCForContentShare(enable: boolean): void;\n\n  /**\n   * Start content sharing\n   */\n  startContentShare(stream: MediaStream): Promise<void>;\n\n  /**\n   * Start screen sharing\n   */\n  startContentShareFromScreenCapture(sourceId?: string, frameRate?: number): Promise<MediaStream>;\n\n  /**\n   * Pause content sharing. This (combined with `unpauseContentShare` is a lightweight alternative to stopping and\n   * starting content share which requires use of a seperate peer connection and therefore has increased latency.\n   *\n   * Remote receivers will continue to subscribe to content share video but there will be nothing transmitting\n   * (e.g. it may be a black frame)\n   */\n  pauseContentShare(): void;\n\n  /**\n   * Unpause content sharing\n   */\n  unpauseContentShare(): void;\n\n  /**\n   * Stop content sharing\n   */\n  stopContentShare(): void;\n\n  /**\n   * Add an observer\n   */\n  addContentShareObserver(observer: ContentShareObserver): void;\n\n  /**\n   * Remove an observer\n   */\n  removeContentShareObserver(observer: ContentShareObserver): void;\n\n  /**\n   * Set codec preferences for this content send stream. See `AudioVideoControllerFacade.setVideoCodecSendPreferences`\n   * for more information.\n   *\n   * @param Array of [[VideoCodecCapability]].\n   */\n  setContentShareVideoCodecPreferences?(preferences: VideoCodecCapability[]): void;\n}\n"]}