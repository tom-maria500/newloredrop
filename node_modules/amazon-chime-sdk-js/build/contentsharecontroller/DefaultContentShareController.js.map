{"version":3,"file":"DefaultContentShareController.js","sourceRoot":"","sources":["../../src/contentsharecontroller/DefaultContentShareController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioProfile from '../audioprofile/AudioProfile';\nimport AudioVideoController from '../audiovideocontroller/AudioVideoController';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport ContentShareObserver from '../contentshareobserver/ContentShareObserver';\nimport Destroyable from '../destroyable/Destroyable';\nimport VideoQualitySettings from '../devicecontroller/VideoQualitySettings';\nimport MeetingSessionConfiguration from '../meetingsession/MeetingSessionConfiguration';\nimport MeetingSessionCredentials from '../meetingsession/MeetingSessionCredentials';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport DefaultModality from '../modality/DefaultModality';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport { Maybe } from '../utils/Types';\nimport NoVideoDownlinkBandwidthPolicy from '../videodownlinkbandwidthpolicy/NoVideoDownlinkBandwidthPolicy';\nimport VideoTile from '../videotile/VideoTile';\nimport ContentShareSimulcastEncodingParameters from '../videouplinkbandwidthpolicy/ContentShareSimulcastEncodingParameters';\nimport DefaultSimulcastUplinkPolicyForContentShare from '../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicyForContentShare';\nimport ContentShareConstants from './ContentShareConstants';\nimport ContentShareController from './ContentShareController';\nimport ContentShareMediaStreamBroker from './ContentShareMediaStreamBroker';\n\nexport default class DefaultContentShareController\n  implements ContentShareController, AudioVideoObserver, Destroyable {\n  static createContentShareMeetingSessionConfigure(\n    configuration: MeetingSessionConfiguration\n  ): MeetingSessionConfiguration {\n    const contentShareConfiguration = new MeetingSessionConfiguration();\n    contentShareConfiguration.meetingId = configuration.meetingId;\n    contentShareConfiguration.externalMeetingId = configuration.externalMeetingId;\n    contentShareConfiguration.urls = configuration.urls;\n    contentShareConfiguration.disablePeriodicKeyframeRequestOnContentSender =\n      configuration.disablePeriodicKeyframeRequestOnContentSender;\n    contentShareConfiguration.credentials = new MeetingSessionCredentials();\n    contentShareConfiguration.credentials.attendeeId =\n      configuration.credentials.attendeeId + ContentShareConstants.Modality;\n    contentShareConfiguration.credentials.externalUserId = configuration.credentials.externalUserId;\n    contentShareConfiguration.credentials.joinToken =\n      configuration.credentials.joinToken + ContentShareConstants.Modality;\n    contentShareConfiguration.meetingFeatures = configuration.meetingFeatures.clone();\n    contentShareConfiguration.videoDownlinkBandwidthPolicy = new NoVideoDownlinkBandwidthPolicy();\n    return contentShareConfiguration;\n  }\n\n  private observerQueue: Set<ContentShareObserver> = new Set<ContentShareObserver>();\n  private contentShareTile: VideoTile;\n  destroyed = false;\n\n  constructor(\n    private mediaStreamBroker: ContentShareMediaStreamBroker,\n    private contentAudioVideo: AudioVideoController,\n    private attendeeAudioVideo: AudioVideoController\n  ) {\n    this.contentAudioVideo.addObserver(this);\n    this.setupContentShareEvents();\n  }\n\n  setContentAudioProfile(audioProfile: AudioProfile): void {\n    this.contentAudioVideo.setAudioProfile(audioProfile);\n  }\n\n  enableSimulcastForContentShare(\n    enable: boolean,\n    encodingParams?: ContentShareSimulcastEncodingParameters\n  ): void {\n    if (enable) {\n      this.contentAudioVideo.configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = true;\n      this.contentAudioVideo.configuration.videoUplinkBandwidthPolicy = new DefaultSimulcastUplinkPolicyForContentShare(\n        this.contentAudioVideo.logger,\n        encodingParams\n      );\n    } else {\n      this.contentAudioVideo.configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;\n      this.contentAudioVideo.configuration.videoUplinkBandwidthPolicy = undefined;\n    }\n  }\n\n  enableSVCForContentShare(enable: boolean): void {\n    if (enable) {\n      this.contentAudioVideo.configuration.enableSVC = true;\n    } else {\n      this.contentAudioVideo.configuration.enableSVC = false;\n    }\n  }\n\n  async startContentShare(stream: MediaStream): Promise<void> {\n    if (!stream) {\n      return;\n    }\n    if (\n      this.contentAudioVideo.configuration.meetingFeatures.contentMaxResolution ===\n      VideoQualitySettings.VideoDisabled\n    ) {\n      this.contentAudioVideo.logger.info(\n        'Could not start content because max content resolution was set to None'\n      );\n      return;\n    }\n    this.mediaStreamBroker.mediaStream = stream;\n    for (let i = 0; i < this.mediaStreamBroker.mediaStream.getTracks().length; i++) {\n      this.mediaStreamBroker.mediaStream.getTracks()[i].addEventListener('ended', () => {\n        this.stopContentShare();\n      });\n    }\n    this.contentAudioVideo.start();\n  }\n\n  async startContentShareFromScreenCapture(\n    sourceId?: string,\n    frameRate?: number\n  ): Promise<MediaStream> {\n    const mediaStream = await this.mediaStreamBroker.acquireScreenCaptureDisplayInputStream(\n      sourceId,\n      frameRate\n    );\n    await this.startContentShare(mediaStream);\n    return mediaStream;\n  }\n\n  pauseContentShare(): void {\n    if (this.mediaStreamBroker.toggleMediaStream(false)) {\n      this.forEachContentShareObserver(observer => {\n        Maybe.of(observer.contentShareDidPause).map(f => f.call(observer));\n      });\n    }\n  }\n\n  unpauseContentShare(): void {\n    if (this.mediaStreamBroker.toggleMediaStream(true)) {\n      this.forEachContentShareObserver(observer => {\n        Maybe.of(observer.contentShareDidUnpause).map(f => f.call(observer));\n      });\n    }\n  }\n\n  setContentShareVideoCodecPreferences(preferences: VideoCodecCapability[]): void {\n    this.contentAudioVideo.setVideoCodecSendPreferences(preferences);\n  }\n\n  async destroy(): Promise<void> {\n    // Idempotency.\n    /* istanbul ignore if */\n    if (!this.contentAudioVideo) {\n      return;\n    }\n    this.destroyed = true;\n    this.contentAudioVideo.removeObserver(this);\n    this.stopContentShare();\n    this.observerQueue.clear();\n    this.contentAudioVideo = undefined;\n    this.attendeeAudioVideo = undefined;\n    this.mediaStreamBroker = undefined;\n  }\n\n  stopContentShare(): void {\n    this.contentAudioVideo.stop();\n    this.mediaStreamBroker.cleanup();\n  }\n\n  addContentShareObserver(observer: ContentShareObserver): void {\n    this.observerQueue.add(observer);\n  }\n\n  removeContentShareObserver(observer: ContentShareObserver): void {\n    this.observerQueue.delete(observer);\n  }\n\n  forEachContentShareObserver(observerFunc: (observer: ContentShareObserver) => void): void {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  audioVideoDidStart(): void {\n    if (this.mediaStreamBroker.mediaStream?.getVideoTracks().length > 0) {\n      this.contentAudioVideo.videoTileController.startLocalVideoTile();\n    }\n  }\n\n  audioVideoDidStop(_sessionStatus: MeetingSessionStatus): void {\n    // If the content attendee got dropped or could not connect, stopContentShare will not be called\n    // so make sure to clean up the media stream.\n    this.mediaStreamBroker.cleanup();\n    if (this.contentShareTile) {\n      this.attendeeAudioVideo.videoTileController.removeVideoTile(this.contentShareTile.id());\n      this.contentShareTile = null;\n    }\n    this.forEachContentShareObserver(observer => {\n      Maybe.of(observer.contentShareDidStop).map(f => f.call(observer));\n    });\n  }\n\n  private setupContentShareEvents(): void {\n    // We use realtimeSubscribeToAttendeeIdPresence instead of audioVideoDidStart because audioVideoDidStart fires\n    // before the capacity check in the media backend while when realtimeSubscribeToAttendeeIdPresence fires, we know the\n    // content attendee has been able to pass the capacity check and join the call so we can start the local\n    // content share video\n    this.attendeeAudioVideo.realtimeController.realtimeSubscribeToAttendeeIdPresence(\n      (attendeeId: string, present: boolean, _externalUserId: string, _dropped: boolean): void => {\n        const isContentAttendee = new DefaultModality(attendeeId).hasModality(\n          DefaultModality.MODALITY_CONTENT\n        );\n        const isSelfAttendee =\n          new DefaultModality(attendeeId).base() ===\n          this.attendeeAudioVideo.configuration.credentials.attendeeId;\n        if (!isContentAttendee || !isSelfAttendee || !present || this.contentShareTile) {\n          return;\n        }\n        const stream = this.mediaStreamBroker.mediaStream;\n        if (stream?.getVideoTracks().length) {\n          this.contentShareTile = this.attendeeAudioVideo.videoTileController.addVideoTile();\n          const track = stream.getVideoTracks()[0];\n          let width, height;\n          if (track.getSettings) {\n            const cap: MediaTrackSettings = track.getSettings();\n            width = cap.width as number;\n            height = cap.height as number;\n          } else {\n            const cap: MediaTrackCapabilities = track.getCapabilities();\n            width = cap.width as number;\n            height = cap.height as number;\n          }\n          this.contentShareTile.bindVideoStream(\n            this.contentAudioVideo.configuration.credentials.attendeeId,\n            false,\n            stream,\n            width,\n            height,\n            null,\n            this.contentAudioVideo.configuration.credentials.externalUserId\n          );\n        }\n        this.forEachContentShareObserver(observer => {\n          Maybe.of(observer.contentShareDidStart).map(f => f.call(observer));\n        });\n      }\n    );\n  }\n}\n"]}