{"version":3,"file":"ContentShareMediaStreamBroker.js","sourceRoot":"","sources":["../../src/contentsharecontroller/ContentShareMediaStreamBroker.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport DefaultDeviceController from '../devicecontroller/DefaultDeviceController';\nimport Logger from '../logger/Logger';\nimport MediaStreamBroker from '../mediastreambroker/MediaStreamBroker';\nimport MediaStreamBrokerObserver from '../mediastreambrokerobserver/MediaStreamBrokerObserver';\n\nexport default class ContentShareMediaStreamBroker implements MediaStreamBroker {\n  private static defaultFrameRate = 15;\n  private _mediaStream: MediaStream;\n\n  constructor(private logger: Logger) {}\n\n  get mediaStream(): MediaStream {\n    return this._mediaStream;\n  }\n\n  set mediaStream(mediaStream: MediaStream) {\n    this._mediaStream = mediaStream;\n  }\n\n  async acquireAudioInputStream(): Promise<MediaStream> {\n    if (this._mediaStream.getAudioTracks().length === 0) {\n      this.logger.info('No audio stream available. Synthesizing an audio stream.');\n      return DefaultDeviceController.synthesizeAudioDevice(0) as MediaStream;\n    }\n    return this._mediaStream;\n  }\n\n  async acquireVideoInputStream(): Promise<MediaStream> {\n    return this._mediaStream;\n  }\n\n  async acquireDisplayInputStream(streamConstraints: MediaStreamConstraints): Promise<MediaStream> {\n    if (\n      streamConstraints &&\n      streamConstraints.video &&\n      // @ts-ignore\n      streamConstraints.video.mandatory &&\n      // @ts-ignore\n      streamConstraints.video.mandatory.chromeMediaSource &&\n      // @ts-ignore\n      streamConstraints.video.mandatory.chromeMediaSourceId\n    ) {\n      return navigator.mediaDevices.getUserMedia(streamConstraints);\n    }\n    // @ts-ignore https://github.com/microsoft/TypeScript/issues/31821\n    return navigator.mediaDevices.getDisplayMedia(streamConstraints);\n  }\n\n  async acquireScreenCaptureDisplayInputStream(\n    sourceId?: string,\n    frameRate?: number\n  ): Promise<MediaStream> {\n    return this.acquireDisplayInputStream(\n      this.screenCaptureDisplayMediaConstraints(sourceId, frameRate)\n    );\n  }\n\n  private screenCaptureDisplayMediaConstraints(\n    sourceId?: string,\n    frameRate?: number\n  ): MediaStreamConstraints {\n    return {\n      audio:\n        !sourceId && new DefaultBrowserBehavior().getDisplayMediaAudioCaptureSupport()\n          ? true\n          : false,\n      video: {\n        ...(!sourceId && {\n          frameRate: {\n            max: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate,\n          },\n        }),\n        ...(sourceId && {\n          mandatory: {\n            chromeMediaSource: 'desktop',\n            chromeMediaSourceId: sourceId,\n            maxFrameRate: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate,\n          },\n        }),\n      },\n    };\n  }\n\n  toggleMediaStream(enable: boolean): boolean {\n    let changed = false;\n    if (this.mediaStream) {\n      for (let i = 0; i < this.mediaStream.getTracks().length; i++) {\n        if (this.mediaStream.getTracks()[i].enabled !== enable) {\n          this.mediaStream.getTracks()[i].enabled = enable;\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  cleanup(): void {\n    if (this.mediaStream) {\n      for (let i = 0; i < this.mediaStream.getTracks().length; i++) {\n        const track = this.mediaStream.getTracks()[i];\n        track.stop();\n      }\n    }\n    this.mediaStream = null;\n  }\n\n  muteLocalAudioInputStream(): void {\n    throw new Error('unsupported');\n  }\n\n  unmuteLocalAudioInputStream(): void {\n    throw new Error('unsupported');\n  }\n\n  addMediaStreamBrokerObserver(_observer: MediaStreamBrokerObserver): void {}\n\n  removeMediaStreamBrokerObserver(_observer: MediaStreamBrokerObserver): void {}\n}\n"]}