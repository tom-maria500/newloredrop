{"version":3,"file":"DefaultActiveSpeakerPolicy.js","sourceRoot":"","sources":["../../src/activespeakerpolicy/DefaultActiveSpeakerPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAItC,MAAqB,0BAA0B;IAM7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6BG;IACH,YACU,gBAAwB,GAAG,EAC3B,kBAA0B,IAAI,EAC9B,mBAAmB,GAAG,EACtB,eAAe,GAAG;QAHlB,kBAAa,GAAb,aAAa,CAAc;QAC3B,oBAAe,GAAf,eAAe,CAAe;QAC9B,qBAAgB,GAAhB,gBAAgB,CAAM;QACtB,iBAAY,GAAZ,YAAY,CAAM;QAvC5B;;WAEG;QACK,YAAO,GAAqC,EAAE,CAAC;IAqCpD,CAAC;IAEJ,cAAc,CAAC,UAAkB,EAAE,MAAqB,EAAE,KAAqB;QAC7E,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI,EAAE;YAC5B,MAAM,GAAG,CAAC,CAAC;SACZ;QACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;YAC5C,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SAC9B;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE;YAClC,MAAM,GAAG,GAAG,CAAC;SACd;aAAM;YACL,MAAM,GAAG,GAAG,CAAC;SACd;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QAChG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;QACjC,KAAK,MAAM,eAAe,IAAI,IAAI,CAAC,OAAO,EAAE;YAC1C,IAAI,eAAe,KAAK,UAAU,EAAE;gBAClC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,GAAG,CACtC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,MAAM,EAC1D,CAAC,CACF,CAAC;aACH;SACF;QACD,IAAI,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE;YAChC,OAAO,CAAC,CAAC;SACV;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,4CAA4C;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA1ED,6CA0EC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ActiveSpeakerPolicy from './ActiveSpeakerPolicy';\n\nexport default class DefaultActiveSpeakerPolicy implements ActiveSpeakerPolicy {\n  /**\n   * The map of attendeeIds to their active speaker score values\n   */\n  private volumes: { [attendeeId: string]: number } = {};\n\n  /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.\n   *\n   * @param speakerWeight\n   * The number used to calculate new active speaker score for current attendee.\n   * ```js\n   * Formula:\n   * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)\n   * ```\n   *\n   * @param cutoffThreshold\n   * The threshold number compared with updated active speaker score.\n   * If the updated active speaker score is less than this threshold value,\n   * the updated score is returned as 0, else the updated score is returned.\n   *\n   * @param silenceThreshold\n   * The threshold number compared with current received volume.\n   * While calculating the new active speaker score, if the current received\n   * volume is less than this threshold value, the current received volume is considered as 0,\n   * else 1.\n   *\n   * @param takeoverRate\n   * The number used to calculate other attendee's active speaker score, other than the current attendee.\n   * ```js\n   * Formula:\n   *  updatedOtherAttendeeActiveSpeakerScore = Math.max(\n   *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,\n   *    0\n   *  );\n   * ```\n   */\n  constructor(\n    private speakerWeight: number = 0.9,\n    private cutoffThreshold: number = 0.01,\n    private silenceThreshold = 0.2,\n    private takeoverRate = 0.2\n  ) {}\n\n  calculateScore(attendeeId: string, volume: number | null, muted: boolean | null): number {\n    if (muted || volume === null) {\n      volume = 0;\n    }\n    if (!this.volumes.hasOwnProperty(attendeeId)) {\n      this.volumes[attendeeId] = 0;\n    }\n    if (volume > this.silenceThreshold) {\n      volume = 1.0;\n    } else {\n      volume = 0.0;\n    }\n    const score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);\n    this.volumes[attendeeId] = score;\n    for (const otherAttendeeId in this.volumes) {\n      if (otherAttendeeId !== attendeeId) {\n        this.volumes[otherAttendeeId] = Math.max(\n          this.volumes[otherAttendeeId] - this.takeoverRate * volume,\n          0\n        );\n      }\n    }\n    if (score < this.cutoffThreshold) {\n      return 0;\n    }\n    return score;\n  }\n\n  prioritizeVideoSendBandwidthForActiveSpeaker(): boolean {\n    return true;\n  }\n}\n"]}