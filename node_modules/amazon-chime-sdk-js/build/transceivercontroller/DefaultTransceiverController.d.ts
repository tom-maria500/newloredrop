import AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';
import AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';
import BrowserBehavior from '../browserbehavior/BrowserBehavior';
import ClientMetricReport from '../clientmetricreport/ClientMetricReport';
import Logger from '../logger/Logger';
import RedundantAudioRecoveryMetricsObserver from '../redundantaudiorecoverymetricsobserver/RedundantAudioRecoveryMetricsObserver';
import VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';
import VideoStreamIndex from '../videostreamindex/VideoStreamIndex';
import TransceiverController from './TransceiverController';
export default class DefaultTransceiverController implements TransceiverController, AudioVideoObserver {
    protected logger: Logger;
    protected browserBehavior: BrowserBehavior;
    protected meetingSessionContext?: AudioVideoControllerState;
    protected _localCameraTransceiver: RTCRtpTransceiver | null;
    protected _localAudioTransceiver: RTCRtpTransceiver | null;
    protected videoSubscriptions: number[];
    protected defaultMediaStream: MediaStream | null;
    protected peer: RTCPeerConnection | null;
    protected streamIdToTransceiver: Map<number, RTCRtpTransceiver>;
    protected groupIdToTransceiver: Map<number, RTCRtpTransceiver>;
    private audioRedWorker;
    private audioRedWorkerURL;
    private audioMetricsHistory;
    private redMetricsObservers;
    private audioRedEnabled;
    private currentNumRedundantEncodings;
    private lastRedHolddownTimerStartTimestampMs;
    private lastHighPacketLossEventTimestampMs;
    private lastAudioRedTurnOffTimestampMs;
    private readonly maxAudioMetricsHistory;
    private readonly audioRedPacketLossShortEvalPeriodMs;
    private readonly audioRedPacketLossLongEvalPeriodMs;
    private readonly audioRedHoldDownTimeMs;
    private readonly redRecoveryTimeMs;
    constructor(logger: Logger, browserBehavior: BrowserBehavior, meetingSessionContext?: AudioVideoControllerState);
    setEncodingParameters(encodingParamMap: Map<string, RTCRtpEncodingParameters>): Promise<void>;
    localAudioTransceiver(): RTCRtpTransceiver;
    localVideoTransceiver(): RTCRtpTransceiver;
    setVideoSendingBitrateKbps(bitrateKbps: number): Promise<void>;
    setPeer(peer: RTCPeerConnection): void;
    reset(): void;
    useTransceivers(): boolean;
    hasVideoInput(): boolean;
    trackIsVideoInput(track: MediaStreamTrack): boolean;
    setupLocalTransceivers(): void;
    replaceAudioTrack(track: MediaStreamTrack): Promise<boolean>;
    setAudioInput(track: MediaStreamTrack | null): Promise<void>;
    setVideoInput(track: MediaStreamTrack | null): Promise<void>;
    updateVideoTransceivers(videoStreamIndex: VideoStreamIndex, videosToReceive: VideoStreamIdSet): number[];
    private updateTransceivers;
    private updateTransceiverWithStop;
    private updateTransceiverWithoutStop;
    getMidForStreamId(streamId: number): string | undefined;
    setStreamIdForMid(mid: string, newStreamId: number): void;
    getMidForGroupId(groupId: number): string | undefined;
    protected transceiverIsVideo(transceiver: RTCRtpTransceiver): boolean;
    private debugDumpTransceivers;
    private setTransceiverInput;
    private forEachRedMetricsObserver;
    private disableAudioRedundancy;
    protected setupAudioRedWorker(): void;
    /**
     * Adds a transceiver to the peer connection and performs additional necessary setup.
     */
    protected addTransceiver(trackOrKind: string | MediaStreamTrack, init?: RTCRtpTransceiverInit): RTCRtpTransceiver;
    private destroyAudioRedWorkerAndStates;
    setAudioPayloadTypes(payloadTypeMap: Map<string, number>): void;
    metricsDidReceive(clientMetricReport: ClientMetricReport): void;
    private maybeResetHoldDownTimer;
    private lossPercent;
    private shouldUpdateAudioRedWorkerEncodings;
    addRedundantAudioRecoveryMetricsObserver(observer: RedundantAudioRecoveryMetricsObserver): void;
    removeRedundantAudioRecoveryMetricsObserver(observer: RedundantAudioRecoveryMetricsObserver): void;
}
