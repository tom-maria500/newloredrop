{"version":3,"file":"SimulcastTransceiverController.js","sourceRoot":"","sources":["../../src/transceivercontroller/SimulcastTransceiverController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAKtC,kGAA0E;AAE1E,MAAqB,8BAA+B,SAAQ,sCAA4B;IAWtF,YACE,MAAc,EACd,eAAgC,EAChC,qBAAiD;QAEjD,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAV9C,oCAA+B,GAA0C,IAAI,GAAG,EAGvF,CAAC;QAQF,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,8BAA8B,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjF,MAAM,OAAO,GAAG,8BAA8B,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,OAAO,EAAE;gBAChD,GAAG,EAAE,OAAO;gBACZ,qBAAqB,EAAE,KAAK;gBAC5B,UAAU,EAAE,8BAA8B,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,IAAI;aAC3E,CAAC,CAAC;YACH,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;SACnB;IACH,CAAC;IAED,8EAA8E;IACxE,qBAAqB,CACzB,gBAAuD;;YAEvD,IAAI,CAAC,IAAI,CAAC,uBAAuB,IAAI,IAAI,CAAC,uBAAuB,CAAC,SAAS,KAAK,UAAU,EAAE;gBAC1F,OAAO;aACR;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;YACnD,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;YAChE,IAAI,iBAAiB,CAAC,MAAM,IAAI,CAAC,EAAE;gBACjC,OAAO;aACR;YAED,MAAM,QAAQ,GAAyB,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9D,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBACvB,QAAQ,CAAC,SAAS,GAAG,iBAAiB,CAAC;aACxC;iBAAM;gBACL,KAAK,MAAM,QAAQ,IAAI,QAAQ,CAAC,SAAS,EAAE;oBACzC,IAAI,QAAQ,CAAC,GAAG,KAAK,8BAA8B,CAAC,cAAc,EAAE;wBAClE,IAAI,CAAC,kBAAkB,CACrB,gBAAgB,CAAC,GAAG,CAAC,8BAA8B,CAAC,cAAc,CAAC,EACnE,QAAQ,CACT,CAAC;qBACH;oBACD,IAAI,QAAQ,CAAC,GAAG,KAAK,8BAA8B,CAAC,cAAc,EAAE;wBAClE,IAAI,CAAC,kBAAkB,CACrB,gBAAgB,CAAC,GAAG,CAAC,8BAA8B,CAAC,cAAc,CAAC,EACnE,QAAQ,CACT,CAAC;qBACH;oBACD,IAAI,QAAQ,CAAC,GAAG,KAAK,8BAA8B,CAAC,eAAe,EAAE;wBACnE,IAAI,CAAC,kBAAkB,CACrB,gBAAgB,CAAC,GAAG,CAAC,8BAA8B,CAAC,eAAe,CAAC,EACpE,QAAQ,CACT,CAAC;qBACH;iBACF;aACF;YAED,MAAM,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAErC,IAAI,CAAC,6BAA6B,EAAE,CAAC;QACvC,CAAC;KAAA;IAEK,0BAA0B,CAAC,YAAoB;;YACnD,OAAO;QACT,CAAC;KAAA;IAED,sBAAsB;;QACpB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;YAC3B,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE;YAClE,IAAI,CAAC,kBAAkB,GAAG,IAAI,WAAW,EAAE,CAAC;SAC7C;QAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAChC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;gBAC9D,SAAS,EAAE,UAAU;gBACrB,OAAO,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC;aACnC,CAAC,CAAC;YAEH,IAAI,MAAA,MAAA,IAAI,CAAC,qBAAqB,0CAAE,YAAY,0CAAE,oBAAoB,EAAE,EAAE;gBACpE,0EAA0E;gBAC1E,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAC5B;SACF;QAED,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;YACjC,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,MAAM,EAAE,CAAC,CAAC;YACjF,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;gBAC1D,SAAS,EAAE,UAAU;gBACrB,OAAO,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC;gBAClC,aAAa,EAAE,cAAc;aAC9B,CAAC,CAAC;SACJ;IACH,CAAC;IAES,6BAA6B;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;QACnE,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QACnC,IAAI,GAAG,GAAG,2CAA2C,CAAC;QACtD,KAAK,MAAM,aAAa,IAAI,SAAS,EAAE;YACrC,GAAG,IAAI,OAAO,aAAa,CAAC,GAAG,eAAe,aAAa,CAAC,UAAU,WAAW,aAAa,CAAC,MAAM,gBAAgB,aAAa,CAAC,qBAAqB,mBAAmB,aAAa,CAAC,YAAY,KAAK,CAAC;SAC5M;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAES,kBAAkB,CAC1B,kBAA4C,EAC5C,gBAA0C;QAE1C,gBAAgB,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;QACpD,gBAAgB,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC;QAC5D,gBAAgB,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,qBAAqB,CAAC;QAClF,gBAAgB,CAAC,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;IAClE,CAAC;;AA/HH,iDAgIC;AA/HiB,6CAAc,GAAW,KAAK,CAAC;AAC/B,6CAAc,GAAW,KAAK,CAAC;AAC/B,8CAAe,GAAW,IAAI,CAAC;AAC/B,iDAAkB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1C,oDAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport BrowserBehavior from '../browserbehavior/BrowserBehavior';\nimport Logger from '../logger/Logger';\nimport DefaultTransceiverController from './DefaultTransceiverController';\n\nexport default class SimulcastTransceiverController extends DefaultTransceiverController {\n  static readonly LOW_LEVEL_NAME: string = 'low';\n  static readonly MID_LEVEL_NAME: string = 'mid';\n  static readonly HIGH_LEVEL_NAME: string = 'hi';\n  static readonly NAME_ARR_ASCENDING = ['low', 'mid', 'hi'];\n  static readonly BITRATE_ARR_ASCENDING = [200, 400, 1100];\n  protected videoQualityControlParameterMap: Map<string, RTCRtpEncodingParameters> = new Map<\n    string,\n    RTCRtpEncodingParameters\n  >();\n\n  constructor(\n    logger: Logger,\n    browserBehavior: BrowserBehavior,\n    meetingSessionContext?: AudioVideoControllerState\n  ) {\n    super(logger, browserBehavior, meetingSessionContext);\n    let scale = 4;\n    for (let i = 0; i < SimulcastTransceiverController.NAME_ARR_ASCENDING.length; i++) {\n      const ridName = SimulcastTransceiverController.NAME_ARR_ASCENDING[i];\n      this.videoQualityControlParameterMap.set(ridName, {\n        rid: ridName,\n        scaleResolutionDownBy: scale,\n        maxBitrate: SimulcastTransceiverController.BITRATE_ARR_ASCENDING[i] * 1000,\n      });\n      scale = scale / 2;\n    }\n  }\n\n  // Note: `scaleResolutionDownBy` has only been tested with values 1, 2, and 4.\n  async setEncodingParameters(\n    encodingParamMap: Map<string, RTCRtpEncodingParameters>\n  ): Promise<void> {\n    if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n      return;\n    }\n\n    const sender = this._localCameraTransceiver.sender;\n    const newEncodingParams = Array.from(encodingParamMap.values());\n    if (newEncodingParams.length <= 0) {\n      return;\n    }\n\n    const oldParam: RTCRtpSendParameters = sender.getParameters();\n    if (!oldParam.encodings) {\n      oldParam.encodings = newEncodingParams;\n    } else {\n      for (const encoding of oldParam.encodings) {\n        if (encoding.rid === SimulcastTransceiverController.LOW_LEVEL_NAME) {\n          this.copyEncodingParams(\n            encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME),\n            encoding\n          );\n        }\n        if (encoding.rid === SimulcastTransceiverController.MID_LEVEL_NAME) {\n          this.copyEncodingParams(\n            encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME),\n            encoding\n          );\n        }\n        if (encoding.rid === SimulcastTransceiverController.HIGH_LEVEL_NAME) {\n          this.copyEncodingParams(\n            encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME),\n            encoding\n          );\n        }\n      }\n    }\n\n    await sender.setParameters(oldParam);\n\n    this.logVideoTransceiverParameters();\n  }\n\n  async setVideoSendingBitrateKbps(_bitrateKbps: number): Promise<void> {\n    return;\n  }\n\n  setupLocalTransceivers(): void {\n    if (!this.useTransceivers()) {\n      return;\n    }\n\n    if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {\n      this.defaultMediaStream = new MediaStream();\n    }\n\n    if (!this._localAudioTransceiver) {\n      this._localAudioTransceiver = this.peer.addTransceiver('audio', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream],\n      });\n\n      if (this.meetingSessionContext?.audioProfile?.hasRedundancyEnabled()) {\n        // This will perform additional necessary setup for the audio transceiver.\n        this.setupAudioRedWorker();\n      }\n    }\n\n    if (!this._localCameraTransceiver) {\n      const encodingParams = Array.from(this.videoQualityControlParameterMap.values());\n      this._localCameraTransceiver = this.addTransceiver('video', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream],\n        sendEncodings: encodingParams,\n      });\n    }\n  }\n\n  protected logVideoTransceiverParameters(): void {\n    const params = this._localCameraTransceiver.sender.getParameters();\n    const encodings = params.encodings;\n    let msg = 'simulcast: current encoding parameters \\n';\n    for (const encodingParam of encodings) {\n      msg += `rid=${encodingParam.rid} maxBitrate=${encodingParam.maxBitrate} active=${encodingParam.active} scaleDownBy=${encodingParam.scaleResolutionDownBy} maxFrameRate = ${encodingParam.maxFramerate} \\n`;\n    }\n    this.logger.info(msg);\n  }\n\n  protected copyEncodingParams(\n    fromEncodingParams: RTCRtpEncodingParameters,\n    toEncodingParams: RTCRtpEncodingParameters\n  ): void {\n    toEncodingParams.active = fromEncodingParams.active;\n    toEncodingParams.maxBitrate = fromEncodingParams.maxBitrate;\n    toEncodingParams.scaleResolutionDownBy = fromEncodingParams.scaleResolutionDownBy;\n    toEncodingParams.maxFramerate = fromEncodingParams.maxFramerate;\n  }\n}\n"]}