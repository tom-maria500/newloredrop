{"version":3,"file":"SimulcastContentShareTransceiverController.js","sourceRoot":"","sources":["../../src/transceivercontroller/SimulcastContentShareTransceiverController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAKtC,sGAA8E;AAE9E,MAAqB,0CAA2C,SAAQ,wCAA8B;IAIpG,YACE,MAAc,EACd,eAAgC,EAChC,qBAAiD;QAEjD,KAAK,CAAC,MAAM,EAAE,eAAe,EAAE,qBAAqB,CAAC,CAAC;QACtD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,+BAA+B,GAAG,IAAI,GAAG,EAAoC,CAAC;QACnF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,0CAA0C,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7F,MAAM,OAAO,GAAG,0CAA0C,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACjF,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,OAAO,EAAE;gBAChD,GAAG,EAAE,OAAO;gBACZ,qBAAqB,EAAE,KAAK;gBAC5B,UAAU,EAAE,0CAA0C,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,IAAI;aACvF,CAAC,CAAC;YACH,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;SACnB;IACH,CAAC;IAED,8EAA8E;IACxE,qBAAqB,CACzB,gBAAuD;;YAEvD,IAAI,CAAC,IAAI,CAAC,uBAAuB,IAAI,IAAI,CAAC,uBAAuB,CAAC,SAAS,KAAK,UAAU,EAAE;gBAC1F,OAAO;aACR;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;YACnD,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;YAChE,IAAI,iBAAiB,CAAC,MAAM,IAAI,CAAC,EAAE;gBACjC,OAAO;aACR;YAED,MAAM,QAAQ,GAAyB,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9D,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;gBACvB,QAAQ,CAAC,SAAS,GAAG,iBAAiB,CAAC;aACxC;iBAAM;gBACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClD,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,wCAA8B,CAAC,cAAc,EAAE;wBAC/E,IAAI,CAAC,kBAAkB,CACrB,gBAAgB,CAAC,GAAG,CAAC,wCAA8B,CAAC,cAAc,CAAC,EACnE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CACtB,CAAC;qBACH;oBACD,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,wCAA8B,CAAC,eAAe,EAAE;wBAChF,IAAI,CAAC,kBAAkB,CACrB,gBAAgB,CAAC,GAAG,CAAC,wCAA8B,CAAC,eAAe,CAAC,EACpE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CACtB,CAAC;qBACH;iBACF;aACF;YAED,MAAM,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAErC,IAAI,CAAC,6BAA6B,EAAE,CAAC;QACvC,CAAC;KAAA;;AA5DH,6DA6DC;AA5DiB,6DAAkB,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACnC,gEAAqB,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport BrowserBehavior from '../browserbehavior/BrowserBehavior';\nimport Logger from '../logger/Logger';\nimport SimulcastTransceiverController from './SimulcastTransceiverController';\n\nexport default class SimulcastContentShareTransceiverController extends SimulcastTransceiverController {\n  static readonly NAME_ARR_ASCENDING = ['low', 'hi'];\n  static readonly BITRATE_ARR_ASCENDING = [300, 1200];\n\n  constructor(\n    logger: Logger,\n    browserBehavior: BrowserBehavior,\n    meetingSessionContext?: AudioVideoControllerState\n  ) {\n    super(logger, browserBehavior, meetingSessionContext);\n    let scale = 2;\n    this.videoQualityControlParameterMap = new Map<string, RTCRtpEncodingParameters>();\n    for (let i = 0; i < SimulcastContentShareTransceiverController.NAME_ARR_ASCENDING.length; i++) {\n      const ridName = SimulcastContentShareTransceiverController.NAME_ARR_ASCENDING[i];\n      this.videoQualityControlParameterMap.set(ridName, {\n        rid: ridName,\n        scaleResolutionDownBy: scale,\n        maxBitrate: SimulcastContentShareTransceiverController.BITRATE_ARR_ASCENDING[i] * 1000,\n      });\n      scale = scale / 2;\n    }\n  }\n\n  // Note: `scaleResolutionDownBy` has only been tested with values 1, 2, and 4.\n  async setEncodingParameters(\n    encodingParamMap: Map<string, RTCRtpEncodingParameters>\n  ): Promise<void> {\n    if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n      return;\n    }\n\n    const sender = this._localCameraTransceiver.sender;\n    const newEncodingParams = Array.from(encodingParamMap.values());\n    if (newEncodingParams.length <= 0) {\n      return;\n    }\n\n    const oldParam: RTCRtpSendParameters = sender.getParameters();\n    if (!oldParam.encodings) {\n      oldParam.encodings = newEncodingParams;\n    } else {\n      for (let i = 0; i < oldParam.encodings.length; i++) {\n        if (oldParam.encodings[i].rid === SimulcastTransceiverController.LOW_LEVEL_NAME) {\n          this.copyEncodingParams(\n            encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME),\n            oldParam.encodings[i]\n          );\n        }\n        if (oldParam.encodings[i].rid === SimulcastTransceiverController.HIGH_LEVEL_NAME) {\n          this.copyEncodingParams(\n            encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME),\n            oldParam.encodings[i]\n          );\n        }\n      }\n    }\n\n    await sender.setParameters(oldParam);\n\n    this.logVideoTransceiverParameters();\n  }\n}\n"]}