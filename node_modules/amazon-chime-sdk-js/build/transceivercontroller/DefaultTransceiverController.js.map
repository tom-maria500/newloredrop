{"version":3,"file":"DefaultTransceiverController.js","sourceRoot":"","sources":["../../src/transceivercontroller/DefaultTransceiverController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioProfile from '../audioprofile/AudioProfile';\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport BrowserBehavior from '../browserbehavior/BrowserBehavior';\nimport ClientMetricReport from '../clientmetricreport/ClientMetricReport';\nimport RedundantAudioRecoveryMetricReport from '../clientmetricreport/RedundantAudioRecoveryMetricReport';\nimport Logger from '../logger/Logger';\nimport RedundantAudioEncoder from '../redundantaudioencoder/RedundantAudioEncoder';\nimport RedundantAudioEncoderWorkerCode from '../redundantaudioencoderworkercode/RedundantAudioEncoderWorkerCode';\nimport RedundantAudioRecoveryMetricsObserver from '../redundantaudiorecoverymetricsobserver/RedundantAudioRecoveryMetricsObserver';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport TransceiverController from './TransceiverController';\n\nexport default class DefaultTransceiverController\n  implements TransceiverController, AudioVideoObserver {\n  protected _localCameraTransceiver: RTCRtpTransceiver | null = null;\n  protected _localAudioTransceiver: RTCRtpTransceiver | null = null;\n  protected videoSubscriptions: number[] = [];\n  protected defaultMediaStream: MediaStream | null = null;\n  protected peer: RTCPeerConnection | null = null;\n  protected streamIdToTransceiver: Map<number, RTCRtpTransceiver> = new Map();\n  protected groupIdToTransceiver: Map<number, RTCRtpTransceiver> = new Map();\n  private audioRedWorker: Worker | null = null;\n  private audioRedWorkerURL: string | null = null;\n  private audioMetricsHistory: Array<{\n    timestampMs: number;\n    totalPacketsSent: number;\n    totalPacketsLost: number;\n  }> = new Array();\n  private redMetricsObservers: Set<RedundantAudioRecoveryMetricsObserver> = new Set<\n    RedundantAudioRecoveryMetricsObserver\n  >();\n  private audioRedEnabled: boolean;\n  private currentNumRedundantEncodings: number = 0;\n  private lastRedHolddownTimerStartTimestampMs: number = 0;\n  private lastHighPacketLossEventTimestampMs: number = 0;\n  private lastAudioRedTurnOffTimestampMs: number = 0;\n  private readonly maxAudioMetricsHistory: number = 20;\n  private readonly audioRedPacketLossShortEvalPeriodMs = 5 * 1000; // 5s\n  private readonly audioRedPacketLossLongEvalPeriodMs = 15 * 1000; // 15s\n  private readonly audioRedHoldDownTimeMs: number = 5 * 60 * 1000; // 5m\n  private readonly redRecoveryTimeMs: number = 1 * 60 * 1000; // 1m\n\n  constructor(\n    protected logger: Logger,\n    protected browserBehavior: BrowserBehavior,\n    protected meetingSessionContext?: AudioVideoControllerState\n  ) {}\n\n  async setEncodingParameters(\n    encodingParamMap: Map<string, RTCRtpEncodingParameters>\n  ): Promise<void> {\n    if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n      return;\n    }\n\n    const sender = this._localCameraTransceiver.sender;\n    if (!encodingParamMap || encodingParamMap.size === 0) {\n      return;\n    }\n    const newEncodingParams = Array.from(encodingParamMap.values());\n\n    const oldParam: RTCRtpSendParameters = sender.getParameters();\n    if (!oldParam.encodings || oldParam.encodings.length === 0) {\n      oldParam.encodings = newEncodingParams;\n    } else {\n      for (const existing of oldParam.encodings) {\n        for (const changed of newEncodingParams) {\n          if ((existing.rid || changed.rid) && existing.rid !== changed.rid) {\n            continue;\n          }\n          let key: keyof RTCRtpEncodingParameters;\n          for (key in changed) {\n            // These properties can't be changed.\n            if (key === 'rid' || key === 'codecPayloadType') {\n              continue;\n            }\n            /* istanbul ignore else */\n            if (changed.hasOwnProperty(key)) {\n              (existing[key] as RTCRtpEncodingParameters[keyof RTCRtpEncodingParameters]) = changed[\n                key\n              ];\n            }\n          }\n        }\n      }\n    }\n\n    await sender.setParameters(oldParam);\n  }\n\n  localAudioTransceiver(): RTCRtpTransceiver {\n    return this._localAudioTransceiver;\n  }\n\n  localVideoTransceiver(): RTCRtpTransceiver {\n    return this._localCameraTransceiver;\n  }\n\n  async setVideoSendingBitrateKbps(bitrateKbps: number): Promise<void> {\n    if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n      return;\n    }\n    const sender: RTCRtpSender = this._localCameraTransceiver.sender;\n    if (!sender || bitrateKbps <= 0) {\n      return;\n    }\n    const param: RTCRtpSendParameters = sender.getParameters();\n    if (!param.encodings) {\n      param.encodings = [{}];\n    }\n    for (const encodeParam of param.encodings) {\n      encodeParam.maxBitrate = bitrateKbps * 1000;\n    }\n    await sender.setParameters(param);\n  }\n\n  setPeer(peer: RTCPeerConnection): void {\n    this.peer = peer;\n  }\n\n  reset(): void {\n    this.destroyAudioRedWorkerAndStates();\n    this._localCameraTransceiver = null;\n    this._localAudioTransceiver = null;\n    this.videoSubscriptions = [];\n    this.defaultMediaStream = null;\n    this.peer = null;\n  }\n\n  useTransceivers(): boolean {\n    return !!this.peer && typeof this.peer.getTransceivers !== 'undefined';\n  }\n\n  hasVideoInput(): boolean {\n    if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv')\n      return false;\n\n    return true;\n  }\n\n  trackIsVideoInput(track: MediaStreamTrack): boolean {\n    if (!this._localCameraTransceiver) {\n      return false;\n    }\n    return (\n      track === this._localCameraTransceiver.sender.track ||\n      track === this._localCameraTransceiver.receiver.track\n    );\n  }\n\n  setupLocalTransceivers(): void {\n    if (!this.useTransceivers()) {\n      return;\n    }\n\n    if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {\n      this.defaultMediaStream = new MediaStream();\n    }\n\n    if (!this._localAudioTransceiver) {\n      this._localAudioTransceiver = this.peer.addTransceiver('audio', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream],\n      });\n\n      if (this.meetingSessionContext?.audioProfile?.hasRedundancyEnabled()) {\n        // This will perform additional necessary setup for the audio transceiver.\n        this.setupAudioRedWorker();\n      }\n    }\n\n    if (!this._localCameraTransceiver) {\n      this._localCameraTransceiver = this.addTransceiver('video', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream],\n      });\n    }\n  }\n\n  async replaceAudioTrack(track: MediaStreamTrack): Promise<boolean> {\n    if (!this._localAudioTransceiver || this._localAudioTransceiver.direction !== 'sendrecv') {\n      this.logger.info(`audio transceiver direction is not set up or not activated`);\n      return false;\n    }\n    await this._localAudioTransceiver.sender.replaceTrack(track);\n    return true;\n  }\n\n  async setAudioInput(track: MediaStreamTrack | null): Promise<void> {\n    await this.setTransceiverInput(this._localAudioTransceiver, track);\n    return;\n  }\n\n  async setVideoInput(track: MediaStreamTrack | null): Promise<void> {\n    await this.setTransceiverInput(this._localCameraTransceiver, track);\n    return;\n  }\n\n  updateVideoTransceivers(\n    videoStreamIndex: VideoStreamIndex,\n    videosToReceive: VideoStreamIdSet\n  ): number[] {\n    if (!this.useTransceivers()) {\n      return videosToReceive.array();\n    }\n\n    // See https://blog.mozilla.org/webrtc/rtcrtptransceiver-explored/ for details on transceivers\n    const transceivers: RTCRtpTransceiver[] = this.peer.getTransceivers();\n\n    // Subscription index 0 is reserved for transmitting camera.\n    // We mark inactive slots with 0 in the subscription array.\n    this.videoSubscriptions = [0];\n    videosToReceive = videosToReceive.clone();\n    this.updateTransceivers(transceivers, videoStreamIndex, videosToReceive);\n    this.logger.debug(() => {\n      return this.debugDumpTransceivers();\n    });\n    return this.videoSubscriptions;\n  }\n\n  private updateTransceivers(\n    transceivers: RTCRtpTransceiver[],\n    videoStreamIndex: VideoStreamIndex,\n    videosToReceive: VideoStreamIdSet\n  ): void {\n    const videosRemaining = videosToReceive.array();\n    if (transceivers.length !== 0 && !transceivers[0].stop) {\n      // This function and its usage can be removed once we raise Chrome browser requirements\n      // to M88 (when `RTCRtpTransceiver.stop` was added)\n      this.logger.info('Updating transceivers without `stop` function');\n      this.updateTransceiverWithoutStop(transceivers, videoStreamIndex, videosRemaining);\n    } else if (transceivers.length !== 0) {\n      this.updateTransceiverWithStop(transceivers, videoStreamIndex, videosRemaining);\n    }\n\n    // Add transceivers for the remaining subscriptions\n    for (const index of videosRemaining) {\n      // @ts-ignore\n      const transceiver = this.addTransceiver('video', {\n        direction: 'recvonly',\n        streams: [new MediaStream()],\n      });\n      this.streamIdToTransceiver.set(index, transceiver);\n      this.groupIdToTransceiver.set(videoStreamIndex.groupIdForStreamId(index), transceiver);\n      this.videoSubscriptions.push(index);\n      this.logger.info(\n        `adding transceiver mid: ${transceiver.mid} subscription: ${index} direction: recvonly`\n      );\n    }\n  }\n\n  private updateTransceiverWithStop(\n    transceivers: RTCRtpTransceiver[],\n    videoStreamIndex: VideoStreamIndex,\n    videosRemaining: number[]\n  ): void {\n    // Begin counting out index in the the subscription array at 1 since the camera.\n    // Always occupies position 0 (whether active or not).\n    let n = 1;\n    // Reset since otherwise there will be stale indexes corresponding to\n    // stopped transceivers.\n    this.videoSubscriptions = [0];\n\n    for (const transceiver of transceivers) {\n      if (\n        transceiver === this._localCameraTransceiver ||\n        !this.transceiverIsVideo(transceiver) ||\n        !transceiver.mid\n      ) {\n        continue;\n      }\n\n      let reusingTranceiver = false;\n      // See if we want this existing transceiver for a simulcast stream switch\n      //\n      // By convention with the service backend, msid is equal to the media section mid, prefixed with the string \"v_\";\n      // we use this to get the stream ID for the track\n      const streamId = videoStreamIndex.streamIdForTrack('v_' + transceiver.mid);\n      if (transceiver.direction !== 'inactive' && streamId !== undefined) {\n        for (const [index, recvStreamId] of videosRemaining.entries()) {\n          // `streamId` may still be the same as `recvStreamId`\n          if (videoStreamIndex.StreamIdsInSameGroup(streamId, recvStreamId)) {\n            transceiver.direction = 'recvonly';\n            this.videoSubscriptions[n] = recvStreamId;\n            reusingTranceiver = true;\n\n            this.streamIdToTransceiver.delete(streamId);\n            this.streamIdToTransceiver.set(recvStreamId, transceiver);\n            videosRemaining.splice(index, 1);\n            break;\n          }\n        }\n      }\n\n      if (!reusingTranceiver) {\n        this.videoSubscriptions[n] = 0;\n        this.logger.info(\n          `Stopping MID: ${transceiver.mid}, direction: ${transceiver.direction}, current direction: ${transceiver.currentDirection}`\n        );\n        // Clean up transceiver and mappings for streams that have been unsubscribed from.  Note we do not try to reuse\n        // old inactive transceivers for new streams as Firefox will reuse the last frame from\n        // that transceiver, and additionally we simply don't want to risk wiring up a transceiver\n        // to the incorrect video stream for no real benefit besides possible a smaller SDP size.\n        transceiver.stop(); // Note (as of Firefox 94): Firefox will keep these around forever\n        for (const [streamId, previousTransceiver] of this.streamIdToTransceiver.entries()) {\n          if (transceiver.mid === previousTransceiver.mid) {\n            this.streamIdToTransceiver.delete(streamId);\n            this.groupIdToTransceiver.delete(videoStreamIndex.groupIdForStreamId(streamId));\n          }\n        }\n      }\n      n += 1;\n    }\n  }\n\n  // This function operates similarily to `updateTransceiverWithStop` with the following changes to account\n  // for the fact RTCRtpTransceiver.stop is not available on all supported browsers:\n  //  * We attempt to reuse inactive transceivers because libwebrtc will not remove them otherwise and\n  //    the SDP will grow endlessly.\n  //  * We mark unsubscribed transceivers as 'inactive' so that they can be reused. This requires using a\n  //    second for loop.\n  private updateTransceiverWithoutStop(\n    transceivers: RTCRtpTransceiver[],\n    videoStreamIndex: VideoStreamIndex,\n    videosRemaining: number[]\n  ): void {\n    let n = 1;\n    for (const transceiver of transceivers) {\n      if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver)) {\n        continue;\n      }\n      this.videoSubscriptions[n] = 0;\n      if (transceiver.direction !== 'inactive') {\n        const streamId = videoStreamIndex.streamIdForTrack('v_' + transceiver.mid);\n        if (streamId !== undefined) {\n          for (const [index, recvStreamId] of videosRemaining.entries()) {\n            if (videoStreamIndex.StreamIdsInSameGroup(streamId, recvStreamId)) {\n              transceiver.direction = 'recvonly';\n              this.videoSubscriptions[n] = recvStreamId;\n\n              this.streamIdToTransceiver.delete(streamId);\n              this.streamIdToTransceiver.set(recvStreamId, transceiver);\n              videosRemaining.splice(index, 1);\n              break;\n            }\n          }\n        }\n      }\n      n += 1;\n    }\n\n    // Next fill in open slots and remove unused\n    n = 1;\n    for (const transceiver of transceivers) {\n      if (transceiver === this._localCameraTransceiver || !this.transceiverIsVideo(transceiver)) {\n        continue;\n      }\n\n      if (transceiver.direction === 'inactive' && videosRemaining.length > 0) {\n        // Fill available slot\n        transceiver.direction = 'recvonly';\n        const streamId = videosRemaining.shift();\n        this.videoSubscriptions[n] = streamId;\n        this.streamIdToTransceiver.set(streamId, transceiver);\n        this.groupIdToTransceiver.set(videoStreamIndex.groupIdForStreamId(streamId), transceiver);\n      } else {\n        // Remove if no longer subscribed\n        if (this.videoSubscriptions[n] === 0) {\n          transceiver.direction = 'inactive';\n          for (const [streamId, previousTransceiver] of this.streamIdToTransceiver.entries()) {\n            if (transceiver === previousTransceiver) {\n              this.streamIdToTransceiver.delete(streamId);\n              this.groupIdToTransceiver.delete(videoStreamIndex.groupIdForStreamId(streamId));\n            }\n          }\n        }\n      }\n      n += 1;\n    }\n  }\n\n  getMidForStreamId(streamId: number): string | undefined {\n    return this.streamIdToTransceiver.get(streamId)?.mid;\n  }\n\n  setStreamIdForMid(mid: string, newStreamId: number): void {\n    for (const [streamId, transceiver] of this.streamIdToTransceiver.entries()) {\n      if (transceiver.mid === mid) {\n        this.streamIdToTransceiver.delete(streamId);\n        this.streamIdToTransceiver.set(newStreamId, transceiver);\n        return;\n      }\n    }\n  }\n\n  getMidForGroupId(groupId: number): string | undefined {\n    return this.groupIdToTransceiver.get(groupId)?.mid ?? undefined;\n  }\n\n  protected transceiverIsVideo(transceiver: RTCRtpTransceiver): boolean {\n    return (\n      (transceiver.receiver &&\n        transceiver.receiver.track &&\n        transceiver.receiver.track.kind === 'video') ||\n      (transceiver.sender && transceiver.sender.track && transceiver.sender.track.kind === 'video')\n    );\n  }\n\n  private debugDumpTransceivers(): string {\n    let msg = '';\n    let n = 0;\n\n    for (const transceiver of this.peer.getTransceivers()) {\n      if (!this.transceiverIsVideo(transceiver)) {\n        continue;\n      }\n      msg += `transceiver index=${n} mid=${transceiver.mid} subscription=${this.videoSubscriptions[n]} direction=${transceiver.direction}\\n`;\n      n += 1;\n    }\n    return msg;\n  }\n\n  private async setTransceiverInput(\n    transceiver: RTCRtpTransceiver | null,\n    track: MediaStreamTrack\n  ): Promise<void> {\n    if (!transceiver) {\n      return;\n    }\n\n    if (track) {\n      transceiver.direction = 'sendrecv';\n    } else {\n      transceiver.direction = 'inactive';\n    }\n\n    await transceiver.sender.replaceTrack(track);\n  }\n\n  private forEachRedMetricsObserver(redMetricReport: RedundantAudioRecoveryMetricReport): void {\n    for (const observer of this.redMetricsObservers) {\n      AsyncScheduler.nextTick(() => {\n        /* istanbul ignore else */\n        // Since this executes asynchronously, we need to check if the observer has not been removed.\n        if (this.redMetricsObservers.has(observer)) {\n          observer.recoveryMetricsDidReceive(redMetricReport);\n        }\n      });\n    }\n  }\n\n  private disableAudioRedundancy(): void {\n    // Reset the audio profile with the configured bitrate and force redundancy to be false.\n    this.meetingSessionContext.audioProfile = new AudioProfile(\n      this.meetingSessionContext.audioProfile.audioBitrateBps,\n      false\n    );\n    this.meetingSessionContext.audioVideoController.setAudioProfile(\n      this.meetingSessionContext.audioProfile\n    );\n  }\n\n  protected setupAudioRedWorker(): void {\n    // @ts-ignore\n    const supportsRTCScriptTransform = !!window.RTCRtpScriptTransform;\n    // @ts-ignore\n    const supportsInsertableStreams = !!RTCRtpSender.prototype.createEncodedStreams;\n\n    if (supportsRTCScriptTransform) {\n      // This is the prefered approach according to\n      // https://github.com/w3c/webrtc-encoded-transform/blob/main/explainer.md.\n      this.logger.info(\n        '[AudioRed] Supports encoded insertable streams using RTCRtpScriptTransform'\n      );\n    } else if (supportsInsertableStreams) {\n      this.logger.info('[AudioRed] Supports encoded insertable streams using TransformStream');\n    } else {\n      this.disableAudioRedundancy();\n      // We need to recreate the peer connection without encodedInsertableStreams in the\n      // peer connection config otherwise we would need to create pass through transforms\n      // for all media streams. Throwing the error here and having AttackMediaInputTask throw the\n      // error again will result in a full reconnect.\n      throw new Error(\n        '[AudioRed] Encoded insertable streams not supported. Recreating peer connection with audio redundancy disabled.'\n      );\n    }\n\n    // Run the entire redundant audio worker setup in a `try` block to allow any errors to trigger a reconnect with\n    // audio redundancy disabled.\n    try {\n      this.audioRedWorkerURL = URL.createObjectURL(\n        new Blob([RedundantAudioEncoderWorkerCode], {\n          type: 'application/javascript',\n        })\n      );\n      this.logger.info(`[AudioRed] Redundant audio worker URL ${this.audioRedWorkerURL}`);\n      this.audioRedWorker = new Worker(this.audioRedWorkerURL);\n    } catch (error) {\n      this.logger.error(`[AudioRed] Unable to create audio red worker due to ${error}`);\n      URL.revokeObjectURL(this.audioRedWorkerURL);\n      this.audioRedWorkerURL = null;\n      this.audioRedWorker = null;\n\n      this.disableAudioRedundancy();\n      this.logger.info(`[AudioRed] Recreating peer connection with audio redundancy disabled`);\n\n      // We need to recreate the peer connection without encodedInsertableStreams in the\n      // peer connection config otherwise we would need to create pass through transforms\n      // for all media streams. Throwing the error here and having AttackMediaInputTask throw the\n      // error again will result in a full reconnect.\n      throw error;\n    }\n    this.audioRedEnabled = true;\n\n    // We cannot use console.log in production code and we cannot\n    // transfer the logger object so we need the worker to post messages\n    // to the main thread for logging\n    this.audioRedWorker.onmessage = (event: MessageEvent) => {\n      /* istanbul ignore else */\n      if (event.data.type === 'REDWorkerLog') {\n        this.logger.info(event.data.log);\n      } /* istanbul ignore next */ else if (event.data.type === 'RedundantAudioEncoderStats') {\n        const redMetricReport = new RedundantAudioRecoveryMetricReport();\n        redMetricReport.currentTimestampMs = Date.now();\n        redMetricReport.ssrc = event.data.ssrc;\n        redMetricReport.totalAudioPacketsLost = event.data.totalAudioPacketsLost;\n        redMetricReport.totalAudioPacketsExpected = event.data.totalAudioPacketsExpected;\n        redMetricReport.totalAudioPacketsRecoveredRed = event.data.totalAudioPacketsRecoveredRed;\n        redMetricReport.totalAudioPacketsRecoveredFec = event.data.totalAudioPacketsRecoveredFec;\n        this.forEachRedMetricsObserver(redMetricReport);\n      }\n    };\n\n    if (supportsRTCScriptTransform) {\n      // @ts-ignore\n      this._localAudioTransceiver.sender.transform = new RTCRtpScriptTransform(\n        this.audioRedWorker,\n        { type: 'SenderTransform' }\n      );\n      // @ts-ignore\n      this._localAudioTransceiver.receiver.transform = new RTCRtpScriptTransform(\n        this.audioRedWorker,\n        { type: 'ReceiverTransform' }\n      );\n      // eslint-disable-next-line\n    } else /* istanbul ignore else */ if (supportsInsertableStreams) {\n      // @ts-ignore\n      const sendStreams = this._localAudioTransceiver.sender.createEncodedStreams();\n      // @ts-ignore\n      const receiveStreams = this._localAudioTransceiver.receiver.createEncodedStreams();\n      this.audioRedWorker.postMessage(\n        {\n          msgType: 'StartRedWorker',\n          send: sendStreams,\n          receive: receiveStreams,\n        },\n        [\n          sendStreams.readable,\n          sendStreams.writable,\n          receiveStreams.readable,\n          receiveStreams.writable,\n        ]\n      );\n    }\n    /* istanbul ignore next */\n    this.meetingSessionContext?.audioVideoController.addObserver(this);\n    /* istanbul ignore next */\n    this.addRedundantAudioRecoveryMetricsObserver(this.meetingSessionContext?.statsCollector);\n  }\n\n  /**\n   * Adds a transceiver to the peer connection and performs additional necessary setup.\n   */\n  protected addTransceiver(\n    trackOrKind: string | MediaStreamTrack,\n    init?: RTCRtpTransceiverInit\n  ): RTCRtpTransceiver {\n    const transceiver = this.peer.addTransceiver(trackOrKind, init);\n\n    // @ts-ignore\n    // Transforms need to be setup for every transceiver to allow media flow for the given transceiver if WebRTC Encoded\n    // Transform (https://github.com/w3c/webrtc-encoded-transform/blob/main/explainer.md) is used.\n    if (!this.peer.getConfiguration()?.encodedInsertableStreams || !this.audioRedWorker)\n      return transceiver;\n\n    // @ts-ignore\n    const supportsRTCScriptTransform = !!window.RTCRtpScriptTransform;\n    // @ts-ignore\n    const supportsInsertableStreams = !!RTCRtpSender.prototype.createEncodedStreams;\n\n    if (supportsRTCScriptTransform) {\n      // @ts-ignore\n      transceiver.sender.transform = new RTCRtpScriptTransform(this.audioRedWorker, {\n        type: 'PassthroughTransform',\n      });\n      // @ts-ignore\n      transceiver.receiver.transform = new RTCRtpScriptTransform(this.audioRedWorker, {\n        type: 'PassthroughTransform',\n      });\n      // eslint-disable-next-line\n    } else /* istanbul ignore else */ if (supportsInsertableStreams) {\n      // @ts-ignore\n      const sendStreams = transceiver.sender.createEncodedStreams();\n      // @ts-ignore\n      const receiveStreams = transceiver.receiver.createEncodedStreams();\n      this.audioRedWorker.postMessage(\n        {\n          msgType: 'PassthroughTransform',\n          send: sendStreams,\n          receive: receiveStreams,\n        },\n        [\n          sendStreams.readable,\n          sendStreams.writable,\n          receiveStreams.readable,\n          receiveStreams.writable,\n        ]\n      );\n    }\n\n    return transceiver;\n  }\n\n  private destroyAudioRedWorkerAndStates(): void {\n    if (this.audioRedWorker) {\n      URL.revokeObjectURL(this.audioRedWorkerURL);\n      this.audioRedWorkerURL = null;\n      this.audioRedWorker.terminate();\n      this.audioRedWorker = null;\n      this.currentNumRedundantEncodings = 0;\n      this.lastRedHolddownTimerStartTimestampMs = 0;\n      this.lastAudioRedTurnOffTimestampMs = 0;\n      this.lastHighPacketLossEventTimestampMs = 0;\n      this.audioRedEnabled = true;\n      /* istanbul ignore next */\n      this.meetingSessionContext?.audioVideoController.removeObserver(this);\n      /* istanbul ignore next */\n      this.removeRedundantAudioRecoveryMetricsObserver(this.meetingSessionContext?.statsCollector);\n    }\n  }\n\n  setAudioPayloadTypes(payloadTypeMap: Map<string, number>): void {\n    if (this.audioRedWorker) {\n      this.audioRedWorker.postMessage({\n        msgType: 'RedPayloadType',\n        payloadType: payloadTypeMap.get('red'),\n      });\n\n      this.audioRedWorker.postMessage({\n        msgType: 'OpusPayloadType',\n        payloadType: payloadTypeMap.get('opus'),\n      });\n    }\n  }\n\n  metricsDidReceive(clientMetricReport: ClientMetricReport): void {\n    const { currentTimestampMs } = clientMetricReport;\n    const rtcStatsReport = clientMetricReport.getRTCStatsReport();\n    let receiverReportReceptionTimestampMs: number = 0;\n    let currentTotalPacketsSent: number = 0;\n    let currentTotalPacketsLost: number = 0;\n\n    rtcStatsReport.forEach(report => {\n      /* istanbul ignore else */\n      if (report.kind === 'audio') {\n        /* istanbul ignore else */\n        if (report.type === 'outbound-rtp') {\n          currentTotalPacketsSent = report.packetsSent;\n        } /* istanbul ignore else */ else if (report.type === 'remote-inbound-rtp') {\n          // Use the timestamp that the receiver report was received on the client side to get a more accurate time\n          // interval for the metrics.\n          receiverReportReceptionTimestampMs = report.timestamp;\n          currentTotalPacketsLost = report.packetsLost;\n        }\n      }\n    });\n\n    // Since the timestamp from the server side is only updated when a new receiver report is generated, only add\n    // metrics with new timestamps to our metrics history.\n    //\n    // Also, make sure that the total packets sent is greater than the most recent value in the history before consuming\n    // to avoid divide-by-zero while calculating uplink loss percent.\n    if (\n      this.audioMetricsHistory.length === 0 ||\n      (receiverReportReceptionTimestampMs >\n        this.audioMetricsHistory[this.audioMetricsHistory.length - 1].timestampMs &&\n        currentTotalPacketsSent >\n          this.audioMetricsHistory[this.audioMetricsHistory.length - 1].totalPacketsSent)\n    ) {\n      // Note that although the total packets sent is updated anytime we get the WebRTC stats, we are only adding a new\n      // metric for total packets sent when we receive a new receiver report. We only care about the total packets that\n      // the server was expected to receive at the time that the latest `packetsLost` metric was calculated in order to\n      // do our uplink loss calculation. Therefore, we only record the total packets sent when we receive a new receiver\n      // report, which will give us an estimate of the number of packets that the server was supposed to receive at the\n      // time when the latest `packetsLost` metric was calculated.\n      this.audioMetricsHistory.push({\n        timestampMs: receiverReportReceptionTimestampMs,\n        totalPacketsSent: currentTotalPacketsSent,\n        totalPacketsLost: currentTotalPacketsLost,\n      });\n    }\n\n    // Remove the oldest metric report from our list\n    if (this.audioMetricsHistory.length > this.maxAudioMetricsHistory) {\n      this.audioMetricsHistory.shift();\n    }\n\n    // As the minimum RTCP frequency is about 1 every 5 seconds,\n    // we are limited to using a minimum timewindow of 5 seconds.\n    // This is because the cumulative packetsLost metric remains\n    // the same for 5 consecutive client metric reports.\n    const lossPercent5sTimewindow = this.lossPercent(this.audioRedPacketLossShortEvalPeriodMs);\n    const lossPercent15sTimewindow = this.lossPercent(this.audioRedPacketLossLongEvalPeriodMs);\n\n    // Taking the max loss percent between a short and long time window will allow\n    // us to increase the number of encodings fast but will slowly decrease the\n    // number of encodings on loss recovery.\n    const maxLossPercent = Math.max(lossPercent5sTimewindow, lossPercent15sTimewindow);\n\n    const [\n      newNumRedundantEncodings,\n      shouldTurnOffRed,\n    ] = RedundantAudioEncoder.getNumRedundantEncodingsForPacketLoss(maxLossPercent);\n\n    if (shouldTurnOffRed) {\n      this.lastHighPacketLossEventTimestampMs = currentTimestampMs;\n      /* istanbul ignore next */\n      if (this.audioRedEnabled) {\n        if (this.audioRedWorker) {\n          this.audioRedWorker.postMessage({\n            msgType: 'Disable',\n          });\n        }\n        this.audioRedEnabled = false;\n        this.lastAudioRedTurnOffTimestampMs = currentTimestampMs;\n      }\n      return;\n    } else if (!this.audioRedEnabled) {\n      const timeSinceRedOff = currentTimestampMs - this.lastAudioRedTurnOffTimestampMs;\n      const timeSinceLastHighPacketLossEvent =\n        currentTimestampMs - this.lastHighPacketLossEventTimestampMs;\n      if (\n        timeSinceRedOff >= this.audioRedPacketLossLongEvalPeriodMs &&\n        timeSinceLastHighPacketLossEvent < this.redRecoveryTimeMs\n      ) {\n        // This is probably not a transient high packet loss spike.\n        // We need to turn off RED for awhile to avoid congestion collapse.\n        return;\n      } else {\n        // Enable red as we've completed the recovery wait time.\n        /* istanbul ignore next */\n        if (this.audioRedWorker) {\n          this.audioRedWorker.postMessage({\n            msgType: 'Enable',\n          });\n        }\n        this.audioRedEnabled = true;\n        this.maybeResetHoldDownTimer(currentTimestampMs);\n      }\n    }\n\n    if (this.shouldUpdateAudioRedWorkerEncodings(currentTimestampMs, newNumRedundantEncodings)) {\n      /* istanbul ignore next */\n      if (this.audioRedWorker) {\n        this.audioRedWorker.postMessage({\n          msgType: 'UpdateNumRedundantEncodings',\n          numRedundantEncodings: newNumRedundantEncodings,\n        });\n      }\n    }\n  }\n\n  private maybeResetHoldDownTimer(currentTimestampMs: number): void {\n    if (this.currentNumRedundantEncodings > 0) {\n      this.lastRedHolddownTimerStartTimestampMs = currentTimestampMs;\n    }\n  }\n\n  private lossPercent(timeWindowMs: number): number {\n    if (this.audioMetricsHistory.length < 2) {\n      return 0;\n    }\n    const latestReceiverReportTimestampMs: number = this.audioMetricsHistory[\n      this.audioMetricsHistory.length - 1\n    ].timestampMs;\n    const currentTotalPacketsSent: number = this.audioMetricsHistory[\n      this.audioMetricsHistory.length - 1\n    ].totalPacketsSent;\n    const currentTotalPacketsLost: number = this.audioMetricsHistory[\n      this.audioMetricsHistory.length - 1\n    ].totalPacketsLost;\n\n    // Iterate backwards in the metrics history, from the report immediately preceeding\n    // the latest one, until we find the first metric report whose timestamp differs\n    // from the latest report by atleast timeWindowMs\n    for (let i = this.audioMetricsHistory.length - 2; i >= 0; i--) {\n      if (\n        latestReceiverReportTimestampMs - this.audioMetricsHistory[i].timestampMs >=\n        timeWindowMs\n      ) {\n        const lossDelta = currentTotalPacketsLost - this.audioMetricsHistory[i].totalPacketsLost;\n        const sentDelta = currentTotalPacketsSent - this.audioMetricsHistory[i].totalPacketsSent;\n        const lossPercent = 100 * (lossDelta / sentDelta);\n        return Math.max(0, Math.min(lossPercent, 100));\n      }\n    }\n    // If we are here, we don't have enough entries in history\n    // to calculate the loss for the given time window\n    return 0;\n  }\n\n  private shouldUpdateAudioRedWorkerEncodings(\n    currentTimestampMs: number,\n    newNumRedundantEncodings: number\n  ): boolean {\n    // If newNumRedundantEncodings is the same as the current\n    // then we don't need to send a message to the red worker.\n    if (this.currentNumRedundantEncodings === newNumRedundantEncodings) {\n      this.maybeResetHoldDownTimer(currentTimestampMs);\n      return false;\n    }\n    // If newNumRedundantEncodings is less than the current\n    // check if we've cleared the hold down time and only\n    // then allow the update to be sent to the red worker\n    if (\n      newNumRedundantEncodings < this.currentNumRedundantEncodings &&\n      currentTimestampMs - this.lastRedHolddownTimerStartTimestampMs < this.audioRedHoldDownTimeMs\n    ) {\n      return false;\n    }\n    this.currentNumRedundantEncodings = newNumRedundantEncodings;\n    this.maybeResetHoldDownTimer(currentTimestampMs);\n    return true;\n  }\n\n  addRedundantAudioRecoveryMetricsObserver(observer: RedundantAudioRecoveryMetricsObserver): void {\n    this.redMetricsObservers.add(observer);\n  }\n\n  removeRedundantAudioRecoveryMetricsObserver(\n    observer: RedundantAudioRecoveryMetricsObserver\n  ): void {\n    this.redMetricsObservers.delete(observer);\n  }\n}\n"]}