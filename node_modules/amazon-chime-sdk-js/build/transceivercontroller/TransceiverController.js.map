{"version":3,"file":"TransceiverController.js","sourceRoot":"","sources":["../../src/transceivercontroller/TransceiverController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport RedundantAudioRecoveryMetricsObserver from '../redundantaudiorecoverymetricsobserver/RedundantAudioRecoveryMetricsObserver';\nimport VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\n\n/**\n * [[TransceiverController]] provides an interface for managing transceivers\n * associated with peer connection.\n */\nexport default interface TransceiverController {\n  /**\n   * Sets the peer connection.\n   */\n  setPeer(peer: RTCPeerConnection): void;\n\n  /**\n   * Resets the transceiver controller states.\n   */\n  reset(): void;\n\n  /**\n   * Indicates whether the transceiver is used.\n   */\n  useTransceivers(): boolean;\n\n  /**\n   *  Indicates if there is a video input attached\n   */\n  hasVideoInput(): boolean;\n\n  /**\n   * Returns whether the track is a video track.\n   */\n  trackIsVideoInput(track: MediaStreamTrack): boolean;\n\n  /**\n   * Creates audio and video transceivers.\n   */\n  setupLocalTransceivers(): void;\n\n  /**\n   * Sets the audio track.\n   */\n  setAudioInput(track: MediaStreamTrack | null): Promise<void>;\n\n  /**\n   * Replaces [[MediaStreamTrack]] on audio transceiver of sendrecv direction.\n   */\n  replaceAudioTrack(track: MediaStreamTrack): Promise<boolean>;\n\n  /**\n   * Sets the video track.\n   */\n  setVideoInput(track: MediaStreamTrack | null): Promise<void>;\n\n  /**\n   * Updates video transceivers.\n   */\n  updateVideoTransceivers(\n    videoStreamIndex: VideoStreamIndex,\n    videosToReceive: VideoStreamIdSet\n  ): number[];\n\n  /**\n   * Get the associated MID for a given stream ID, either set via `updateVideoTransceivers`\n   * or overriden through `setStreamIdForMid`.\n   *\n   * Note: According to https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpTransceiver/mid\n   * `mid` may not exist yet even if the transceiver has been created:\n   * \"This association is established, when possible, whenever either a local or remote description is applied.\n   * This field is null if neither a local or remote description has been applied,\n   * or if its associated m-line is rejected by either a remote offer or any answer.\"\n   */\n  getMidForStreamId?(streamId: number): string | undefined;\n\n  /**\n   * Override or set an internal mapping of stream ID to MID.\n   */\n  setStreamIdForMid?(mid: string, streamId: number): void;\n\n  /**\n   * Get the associated MID for a given group ID, set during `updateVideoTransceivers`\n   */\n  getMidForGroupId?(groupId: number): string | undefined;\n\n  /**\n   * Sets video sending bitrate in Kilo-bit-per-second\n   */\n  setVideoSendingBitrateKbps(bitrateKbps: number): void;\n\n  /**\n   * Returns the [[RTCRtpTransceiver]] for audio\n   */\n  localAudioTransceiver(): RTCRtpTransceiver;\n\n  /**\n   * Returns the [[RTCRtpTransceiver]] for local camera\n   */\n  localVideoTransceiver(): RTCRtpTransceiver;\n\n  /**\n   * Set [[RTCRtpEncodingParameters]] on the sender of transceiver.\n   * This method should be called whenever the sender's encoding parameters of the local video transceiver need to\n   * be updated.\n   * For example, the default NScaleVideoUplinkBandwidthPolicy calls this method whenever a video is on/off or the\n   * active speaker changes.\n   * This method assumes that the sender of the local video transceiver is available and the input parameters should\n   * not be empty.\n   * The encoding parameters for sender should be retrieved using sender.getParameters and updated using\n   * sender.setParameters method.\n   * @param {Map<string, RTCRtpEncodingParameters>} params - The encoding parameters. If you have multiple encoding\n   * parameters for different video layers, the key should be the rid corresponding to the RTCRtpEncodingParameters.\n   */\n  setEncodingParameters(params: Map<string, RTCRtpEncodingParameters>): void;\n\n  /**\n   * Set the audio payload types.\n   * This method can be used to make the transceiver controller aware of the codec types from the SDP offer.\n   * The keys are the codec names, eg red, opus.\n   * The values are the types or numbers used to represent these codecs, eg 63 for red, 111 for opus in chrome.\n   * Currently, the SetLocalDescription task uses this method to notify the DefaultTransceiverController of opus\n   * and red codec types that are passed on to the audio red worker.\n   */\n  setAudioPayloadTypes?(payloadType: Map<string, number>): void;\n\n  /**\n   * Adds RedundantAudioRecoveryMetricsObserver to observe redundant audio recovery metrics\n   * that will be generated by the audio red worker.\n   */\n  addRedundantAudioRecoveryMetricsObserver?(observer: RedundantAudioRecoveryMetricsObserver): void;\n\n  /**\n   * Removes RedundantAudioRecoveryMetricsObserver.\n   */\n  removeRedundantAudioRecoveryMetricsObserver?(\n    observer: RedundantAudioRecoveryMetricsObserver\n  ): void;\n}\n"]}