{"version":3,"file":"TimeoutTask.js","sourceRoot":"","sources":["../../src/task/TimeoutTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAGtC,qFAA6D;AAC7D,0DAAkC;AAGlC;;;GAGG;AACH,MAAqB,WAAY,SAAQ,kBAAQ;IAG/C,YAAY,MAAc,EAAU,sBAA4B,EAAU,SAAiB;QACzF,KAAK,CAAC,MAAM,CAAC,CAAC;QADoB,2BAAsB,GAAtB,sBAAsB,CAAM;QAAU,cAAS,GAAT,SAAS,CAAQ;QAEzF,IAAI,CAAC,QAAQ,GAAG,UAAU,IAAI,CAAC,SAAS,IAAI,CAAC;QAC7C,sBAAsB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,0BAA0B,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,CAAC,sBAAsB,EAAE,CAC/E,CAAC;QACF,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC;IACvC,CAAC;IAEK,GAAG;;YACP,MAAM,KAAK,GAAG,IAAI,0BAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnD,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE;gBACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC5D,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,CAAC;YACvC,CAAC,CAAC,CAAC;YACH,IAAI;gBACF,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC;aACzC;oBAAS;gBACR,KAAK,CAAC,IAAI,EAAE,CAAC;aACd;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC5D,CAAC;KAAA;CACF;AA7BD,8BA6BC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport TimeoutScheduler from '../scheduler/TimeoutScheduler';\nimport BaseTask from './BaseTask';\nimport Task from './Task';\n\n/**\n * [[TimeoutTask]] runs a subtask until it either succeeds or reaches a\n * timeout, at which point the subtask is canceled.\n */\nexport default class TimeoutTask extends BaseTask {\n  protected taskName: string;\n\n  constructor(logger: Logger, private taskToRunBeforeTimeout: Task, private timeoutMs: number) {\n    super(logger);\n    this.taskName = `Timeout${this.timeoutMs}ms`;\n    taskToRunBeforeTimeout.setParent(this);\n  }\n\n  cancel(): void {\n    this.logger.info(\n      `canceling timeout task ${this.name()} subtask ${this.taskToRunBeforeTimeout}`\n    );\n    this.taskToRunBeforeTimeout.cancel();\n  }\n\n  async run(): Promise<void> {\n    const timer = new TimeoutScheduler(this.timeoutMs);\n    timer.start(() => {\n      this.logger.info(`timeout reached for task ${this.name()}`);\n      this.taskToRunBeforeTimeout.cancel();\n    });\n    try {\n      await this.taskToRunBeforeTimeout.run();\n    } finally {\n      timer.stop();\n    }\n    this.logger.info(`timeout task ${this.name()} completed`);\n  }\n}\n"]}