{"version":3,"file":"SendAndReceiveDataMessagesTask.js","sourceRoot":"","sources":["../../src/task/SendAndReceiveDataMessagesTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport DataMessage from '../datamessage/DataMessage';\nimport RemovableObserver from '../removableobserver/RemovableObserver';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  SdkDataMessageFrame,\n  SdkDataMessagePayload,\n  SdkSignalFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport BaseTask from './BaseTask';\n\nexport default class SendAndReceiveDataMessagesTask\n  extends BaseTask\n  implements RemovableObserver, SignalingClientObserver {\n  protected taskName = 'SendAndReceiveDataMessagesTask';\n\n  private static TOPIC_REGEX = new RegExp(/^[a-zA-Z0-9_-]{1,36}$/);\n  private static DATA_SIZE = 2048;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  async run(): Promise<void> {\n    this.context.removableObservers.push(this);\n    this.context.signalingClient.registerObserver(this);\n    this.context.realtimeController.realtimeSubscribeToSendDataMessage(this.sendDataMessageHandler);\n  }\n\n  removeObserver(): void {\n    this.context.realtimeController.realtimeUnsubscribeFromSendDataMessage(\n      this.sendDataMessageHandler\n    );\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  handleSignalingClientEvent(event: SignalingClientEvent): void {\n    if (\n      event.type === SignalingClientEventType.ReceivedSignalFrame &&\n      event.message.type === SdkSignalFrame.Type.DATA_MESSAGE\n    ) {\n      for (const message of event.message.dataMessage.messages) {\n        const dataMessage = new DataMessage(\n          (message.ingestTimeNs as number) / 1000000,\n          message.topic,\n          message.data,\n          message.senderAttendeeId,\n          message.senderExternalUserId,\n          (message.ingestTimeNs as number) === 0\n        );\n        this.context.realtimeController.realtimeReceiveDataMessage(dataMessage);\n      }\n    }\n  }\n\n  sendDataMessageHandler = (\n    topic: string,\n    data: Uint8Array | string | any, // eslint-disable-line @typescript-eslint/no-explicit-any\n    lifetimeMs?: number\n  ): void => {\n    if (this.context.signalingClient.ready()) {\n      let uint8Data;\n      if (data instanceof Uint8Array) {\n        uint8Data = data;\n      } else if (typeof data === 'string') {\n        uint8Data = new TextEncoder().encode(data);\n      } else {\n        uint8Data = new TextEncoder().encode(JSON.stringify(data));\n      }\n      this.validateDataMessage(topic, uint8Data, lifetimeMs);\n      const message = SdkDataMessagePayload.create();\n      message.topic = topic;\n      message.lifetimeMs = lifetimeMs;\n      message.data = uint8Data;\n      const messageFrame = SdkDataMessageFrame.create();\n      messageFrame.messages = [message];\n      this.context.signalingClient.sendDataMessage(messageFrame);\n    } else {\n      this.context.logger.error('Cannot send data message because signaling client is not ready');\n    }\n  };\n\n  private validateDataMessage(topic: string, data: Uint8Array, lifetimeMs?: number): void {\n    if (!SendAndReceiveDataMessagesTask.TOPIC_REGEX.test(topic)) {\n      throw new Error('Invalid topic');\n    }\n\n    if (data.length > SendAndReceiveDataMessagesTask.DATA_SIZE) {\n      throw new Error('Data size has to be less than 2048 bytes');\n    }\n\n    if (lifetimeMs && lifetimeMs < 0) {\n      throw new Error('The life time of the message has to be non negative');\n    }\n  }\n}\n"]}