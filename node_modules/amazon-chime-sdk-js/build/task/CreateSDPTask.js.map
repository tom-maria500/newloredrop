{"version":3,"file":"CreateSDPTask.js","sourceRoot":"","sources":["../../src/task/CreateSDPTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport MeetingSessionStatusCode from '../meetingsession/MeetingSessionStatusCode';\nimport SDP from '../sdp/SDP';\nimport BaseTask from './BaseTask';\n\n/*\n * [[CreateSDPTask]] asynchronously calls [[createOffer]] on peer connection.\n */\nexport default class CreateSDPTask extends BaseTask {\n  protected taskName = 'CreateSDPTask';\n\n  private cancelPromise: undefined | ((error: Error) => void);\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    // Just in case. The baseCancel behavior should prevent this.\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  sessionUsesAudio(): boolean {\n    return !!this.context.meetingSessionConfiguration?.urls?.audioHostURL;\n  }\n\n  sessionUsesVideo(): boolean {\n    const enabled = true;\n    let sending: boolean;\n    if (this.context.transceiverController.useTransceivers()) {\n      sending = this.context.transceiverController.hasVideoInput();\n    } else {\n      sending = this.context.videoTileController.hasStartedLocalVideoTile();\n    }\n    const receiving = !!this.context.videosToReceive && !this.context.videosToReceive.empty();\n    const usesVideo = enabled && (sending || receiving);\n    this.context.logger.info(\n      `uses video: ${usesVideo} (enabled: ${enabled}, sending: ${sending}, receiving: ${receiving})`\n    );\n    return usesVideo;\n  }\n\n  async run(): Promise<void> {\n    const offerOptions = {\n      offerToReceiveAudio: this.sessionUsesAudio(),\n      offerToReceiveVideo: this.sessionUsesVideo(),\n    };\n    this.logger.info(`peer connection offerOptions: ${JSON.stringify(offerOptions)}`);\n\n    await new Promise<void>(async (resolve, reject) => {\n      this.cancelPromise = (error: Error) => {\n        reject(error);\n      };\n\n      try {\n        this.context.sdpOfferInit = await this.context.peer.createOffer(offerOptions);\n        this.context.logger.info('peer connection created offer');\n        if (this.context.previousSdpOffer) {\n          if (\n            new SDP(this.context.sdpOfferInit.sdp).videoSendSectionHasDifferentSSRC(\n              this.context.previousSdpOffer\n            )\n          ) {\n            const error = new Error(\n              `canceling ${this.name()} due to the meeting status code: ${\n                MeetingSessionStatusCode.IncompatibleSDP\n              }`\n            );\n            this.context.previousSdpOffer = null;\n            reject(error);\n            return;\n          }\n        }\n        resolve();\n      } catch (error) {\n        reject(error);\n      } finally {\n        delete this.cancelPromise;\n      }\n    });\n  }\n}\n"]}