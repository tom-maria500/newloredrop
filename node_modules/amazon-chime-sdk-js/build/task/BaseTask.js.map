{"version":3,"file":"BaseTask.js","sourceRoot":"","sources":["../../src/task/BaseTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport OnceTask from './OnceTask';\nimport Task from './Task';\nimport TaskStatus from './TaskStatus';\n\n/*\n * [[BaseTask]] provides common utilities for task implementations.\n */\nexport default abstract class BaseTask implements Task {\n  protected taskName = 'BaseTask';\n\n  private parentTask: Task | null = null;\n  private status: TaskStatus = TaskStatus.IDLE;\n\n  abstract run(): Promise<void>;\n\n  constructor(protected logger: Logger) {\n    this.run = this.baseRun.bind(this, this.run);\n    this.cancel = this.baseCancel.bind(this, this.cancel);\n  }\n\n  once(...dependencies: (Task | undefined)[]): OnceTask {\n    return new OnceTask(this.logger, this, dependencies);\n  }\n\n  cancel(): void {}\n\n  name(): string {\n    return this.parentTask ? `${this.parentTask.name()}/${this.taskName}` : this.taskName;\n  }\n\n  setParent(parentTask: Task): void {\n    this.parentTask = parentTask;\n  }\n\n  protected getStatus(): TaskStatus {\n    return this.status;\n  }\n\n  protected logAndThrow(message: string): void {\n    this.logger.info(message);\n    throw new Error(message);\n  }\n\n  private async baseRun(originalRun: () => Promise<void>): Promise<void> {\n    try {\n      const startTime = Date.now();\n      this.logger.info(`running task ${this.name()}`);\n\n      switch (this.status) {\n        case TaskStatus.RUNNING:\n          this.logAndThrow(`${this.name()} is already running`);\n        case TaskStatus.CANCELED:\n          this.logAndThrow(`${this.name()} was canceled before running`);\n        case TaskStatus.FINISHED:\n          this.logAndThrow(`${this.name()} was already finished`);\n      }\n\n      this.status = TaskStatus.RUNNING;\n      await originalRun.call(this);\n      this.logger.info(`${this.name()} took ${Math.round(Date.now() - startTime)} ms`);\n    } catch (err) {\n      throw err;\n    } finally {\n      if (this.status !== TaskStatus.CANCELED) {\n        this.status = TaskStatus.FINISHED;\n      }\n    }\n  }\n\n  private baseCancel(originalCancel: () => void): void {\n    if (this.status === TaskStatus.CANCELED || this.status === TaskStatus.FINISHED) {\n      this.logger.info(`Not canceling ${this.name()}: state is ${this.status}`);\n      return;\n    }\n    this.logger.info(`canceling task ${this.name()}`);\n    this.status = TaskStatus.CANCELED;\n\n    originalCancel.call(this);\n  }\n}\n"]}