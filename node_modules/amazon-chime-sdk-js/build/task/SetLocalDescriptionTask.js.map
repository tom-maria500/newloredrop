{"version":3,"file":"SetLocalDescriptionTask.js","sourceRoot":"","sources":["../../src/task/SetLocalDescriptionTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport SDP from '../sdp/SDP';\nimport BaseTask from './BaseTask';\n\n/*\n * [[SetLocalDescriptionTask]] asynchronously calls [[setLocalDescription]] on peer connection.\n */\nexport default class SetLocalDescriptionTask extends BaseTask {\n  protected taskName = 'SetLocalDescriptionTask';\n\n  private cancelPromise: undefined | ((error: Error) => void);\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    // Just in case. The baseCancel behavior should prevent this.\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  async run(): Promise<void> {\n    const peer = this.context.peer;\n    const sdpOfferInit = this.context.sdpOfferInit;\n    let sdp = sdpOfferInit.sdp;\n\n    if (this.context.browserBehavior.supportsVideoLayersAllocationRtpHeaderExtension()) {\n      // This will be negotiatiated with backend, and we will only use it to skip resubscribes\n      // if we confirm support/negotiation via `RTCRtpTranceiver.sender.getParams`\n      sdp = new SDP(sdp).withVideoLayersAllocationRtpHeaderExtension(this.context.previousSdpOffer)\n        .sdp;\n    }\n    // We will remove the dependency descriptor RTP header extension after set if this branch is not hit, as\n    // browsers will not remove it from the send section. We don't do it here, so that we don't lose track of\n    // the header extension IDs being used when we store `this.context.previousSdpOffer`.\n    if (\n      this.context.browserBehavior.supportsDependencyDescriptorRtpHeaderExtension() &&\n      this.context.videoUplinkBandwidthPolicy.wantsVideoDependencyDescriptorRtpHeaderExtension !==\n        undefined &&\n      this.context.videoUplinkBandwidthPolicy.wantsVideoDependencyDescriptorRtpHeaderExtension()\n    ) {\n      sdp = new SDP(sdp).withDependencyDescriptorRtpHeaderExtension(this.context.previousSdpOffer)\n        .sdp;\n    }\n    if (new DefaultBrowserBehavior().requiresDisablingH264Encoding()) {\n      sdp = new SDP(sdp).removeH264SupportFromSendSection().sdp;\n    }\n\n    // The default start bitrate is 300kbps. While this is a reasonable starting point with respect\n    // to network adaptation, the encoding bitrate does not adjust as quickly as the estimate, which\n    // can quickly max out on a clear network after a few seconds. Thus it will often take 10-25 seconds\n    // for the encode bitrate/resolution to reach the intended value. The network adaptation detects issues quick enough\n    // that raising it to 1000kbps is not much concern, on most networks the congestion controller\n    // will react to network restrictions before the first keyframe is even generated!\n    //\n    // Note that this is also important with regards to content share with SVC enabled,\n    // as we set content hint to `motion` as a workaround for the issue that Chrome cannot enable temporal\n    // scalability for screen share https://bugs.chromium.org/p/chromium/issues/detail?id=1433486\n    // As a side effect, content share may start at a low resolution and take a long time to adapt,\n    // especially when there is limited motion on screen, if we do not set this slightly higher starting\n    // bitrate.\n    sdp = new SDP(sdp).withStartingVideoSendBitrate(1000).sdp;\n\n    if (\n      this.context.videoSendCodecPreferences !== undefined &&\n      this.context.videoSendCodecPreferences.length > 0\n    ) {\n      sdp = new SDP(sdp).withVideoSendCodecPreferences(\n        this.context.meetingSupportedVideoSendCodecPreferences !== undefined\n          ? this.context.meetingSupportedVideoSendCodecPreferences\n          : this.context.videoSendCodecPreferences\n      ).sdp;\n    }\n\n    if (this.context.audioProfile) {\n      sdp = new SDP(sdp).withAudioMaxAverageBitrate(this.context.audioProfile.audioBitrateBps).sdp;\n      if (this.context.audioProfile.isStereo()) {\n        sdp = new SDP(sdp).withStereoAudio().sdp;\n      }\n\n      if (this.context.audioProfile.hasRedundancyEnabled()) {\n        const audioPayloadMap = new SDP(sdp).getAudioPayloadTypes();\n        /* istanbul ignore else */\n        if (\n          this.context.transceiverController &&\n          this.context.transceiverController.setAudioPayloadTypes\n        ) {\n          this.context.transceiverController.setAudioPayloadTypes(audioPayloadMap);\n        }\n      }\n    }\n\n    this.logger.debug(() => {\n      return `local description is >>>${sdp}<<<`;\n    });\n\n    const sdpOffer: RTCSessionDescription = {\n      type: 'offer',\n      sdp: sdp,\n      toJSON: null,\n    };\n\n    await new Promise<void>(async (resolve, reject) => {\n      this.cancelPromise = (error: Error) => {\n        reject(error);\n      };\n\n      try {\n        await peer.setLocalDescription(sdpOffer);\n        resolve();\n      } catch (error) {\n        reject(error);\n      } finally {\n        delete this.cancelPromise;\n      }\n    });\n\n    this.context.logger.info('set local description');\n  }\n}\n"]}