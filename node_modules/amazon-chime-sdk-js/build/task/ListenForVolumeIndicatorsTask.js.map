{"version":3,"file":"ListenForVolumeIndicatorsTask.js","sourceRoot":"","sources":["../../src/task/ListenForVolumeIndicatorsTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAKtC,2GAAmF;AAEnF,oFAImD;AACnD,0DAAkC;AAElC,MAAqB,6BACnB,SAAQ,kBAAQ;IAGhB,YAAoB,OAAkC;QACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QADJ,YAAO,GAAP,OAAO,CAA2B;QAD5C,aAAQ,GAAG,+BAA+B,CAAC;QAqCrD,iCAA4B,GAAG,CAAC,KAAc,EAAQ,EAAE;YACtD,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC;IApCF,CAAC;IAEK,GAAG;;YACP,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,0CAA0C,CACxE,IAAI,CAAC,4BAA4B,CAClC,CAAC;QACJ,CAAC;KAAA;IAED,cAAc;QACZ,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,4CAA4C,CAC1E,IAAI,CAAC,4BAA4B,CAClC,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,0BAA0B,CAAC,KAA2B;QACpD,IAAI,KAAK,CAAC,IAAI,KAAK,kCAAwB,CAAC,mBAAmB,EAAE;YAC/D,OAAO;SACR;QACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,qCAAc,CAAC,IAAI,CAAC,oBAAoB,EAAE;YACnE,aAAa;YACb,MAAM,iBAAiB,GAA8B,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC;YACrF,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,uCAAuC,CACzE,iBAAiB,CAClB,CAAC;SACH;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,qCAAc,CAAC,IAAI,CAAC,cAAc,EAAE;YACpE,aAAa;YACb,MAAM,aAAa,GAA0B,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;YACzE,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,mCAAmC,CAAC,aAAa,CAAC,CAAC;SACxF;IACH,CAAC;CAKF;AA3CD,gDA2CC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport RemovableObserver from '../removableobserver/RemovableObserver';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  SdkAudioMetadataFrame,\n  SdkAudioStreamIdInfoFrame,\n  SdkSignalFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport BaseTask from './BaseTask';\n\nexport default class ListenForVolumeIndicatorsTask\n  extends BaseTask\n  implements RemovableObserver, SignalingClientObserver {\n  protected taskName = 'ListenForVolumeIndicatorsTask';\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  async run(): Promise<void> {\n    this.context.removableObservers.push(this);\n    this.context.signalingClient.registerObserver(this);\n    this.context.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(\n      this.realtimeMuteAndUnmuteHandler\n    );\n  }\n\n  removeObserver(): void {\n    this.context.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(\n      this.realtimeMuteAndUnmuteHandler\n    );\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  handleSignalingClientEvent(event: SignalingClientEvent): void {\n    if (event.type !== SignalingClientEventType.ReceivedSignalFrame) {\n      return;\n    }\n    if (event.message.type === SdkSignalFrame.Type.AUDIO_STREAM_ID_INFO) {\n      // @ts-ignore\n      const audioStreamIdInfo: SdkAudioStreamIdInfoFrame = event.message.audioStreamIdInfo;\n      this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioStreamIdInfo(\n        audioStreamIdInfo\n      );\n    } else if (event.message.type === SdkSignalFrame.Type.AUDIO_METADATA) {\n      // @ts-ignore\n      const audioMetadata: SdkAudioMetadataFrame = event.message.audioMetadata;\n      this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioMetadata(audioMetadata);\n    }\n  }\n\n  realtimeMuteAndUnmuteHandler = (muted: boolean): void => {\n    this.context.signalingClient.mute(muted);\n  };\n}\n"]}