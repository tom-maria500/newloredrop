{"version":3,"file":"SerialGroupTask.js","sourceRoot":"","sources":["../../src/task/SerialGroupTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAGtC,0DAAkC;AAElC,8DAAsC;AAEtC;;;GAGG;AACH,MAAqB,eAAgB,SAAQ,kBAAQ;IAGnD,YAAY,MAAc,EAAY,QAAgB,EAAU,kBAA0B;QACxF,KAAK,CAAC,MAAM,CAAC,CAAC;QADsB,aAAQ,GAAR,QAAQ,CAAQ;QAAU,uBAAkB,GAAlB,kBAAkB,CAAQ;QAFlF,gBAAW,GAAgB,IAAI,CAAC;QAItC,KAAK,MAAM,IAAI,IAAI,kBAAkB,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtB;IACH,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,+BAA+B,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAChF,CAAC;YACF,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC3B;IACH,CAAC;IAEK,GAAG;;YACP,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC1C,IAAI,IAAI,CAAC,SAAS,EAAE,KAAK,oBAAU,CAAC,QAAQ,EAAE;oBAC5C,IAAI,CAAC,WAAW,CAAC,qBAAqB,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;iBACnE;gBACD,IAAI;oBACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,EAAE,oBAAoB,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;oBACpF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;oBACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,EAAE,sBAAsB,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;iBACvF;gBAAC,OAAO,GAAG,EAAE;oBACZ,IAAI,CAAC,WAAW,CACd,qBAAqB,IAAI,CAAC,IAAI,EAAE,+BAA+B;wBAC7D,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,GAAG,CAAC,OAAO,EAAE,CACrD,CAAC;iBACH;wBAAS;oBACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;iBACzB;aACF;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACjE,CAAC;KAAA;CACF;AAxCD,kCAwCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport BaseTask from './BaseTask';\nimport Task from './Task';\nimport TaskStatus from './TaskStatus';\n\n/**\n * [[SerialGroupTask]] runs a set of tasks in series. When canceled, it stops\n * any currently running task and runs no further tasks in the group.\n */\nexport default class SerialGroupTask extends BaseTask {\n  private currentTask: Task | null = null;\n\n  constructor(logger: Logger, protected taskName: string, private tasksToRunSerially: Task[]) {\n    super(logger);\n    for (const task of tasksToRunSerially) {\n      task.setParent(this);\n    }\n  }\n\n  cancel(): void {\n    if (this.currentTask) {\n      this.logger.info(\n        `canceling serial group task ${this.name()} subtask ${this.currentTask.name()}`\n      );\n      this.currentTask.cancel();\n    }\n  }\n\n  async run(): Promise<void> {\n    for (const task of this.tasksToRunSerially) {\n      if (this.getStatus() === TaskStatus.CANCELED) {\n        this.logAndThrow(`serial group task ${this.name()} was canceled`);\n      }\n      try {\n        this.logger.info(`serial group task ${this.name()} running subtask ${task.name()}`);\n        this.currentTask = task;\n        await task.run();\n        this.logger.info(`serial group task ${this.name()} completed subtask ${task.name()}`);\n      } catch (err) {\n        this.logAndThrow(\n          `serial group task ${this.name()} was canceled due to subtask ` +\n            `${this.currentTask.name()} error: ${err.message}`\n        );\n      } finally {\n        this.currentTask = null;\n      }\n    }\n    this.logger.info(`serial group task ${this.name()} completed`);\n  }\n}\n"]}