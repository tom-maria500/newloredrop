{"version":3,"file":"ReceiveRemoteVideoPauseResumeTask.js","sourceRoot":"","sources":["../../src/task/ReceiveRemoteVideoPauseResumeTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport RemovableObserver from '../removableobserver/RemovableObserver';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport { SdkPauseResumeFrame, SdkSignalFrame } from '../signalingprotocol/SignalingProtocol.js';\nimport VideoDownlinkObserver from '../videodownlinkbandwidthpolicy/VideoDownlinkObserver';\nimport BaseTask from './BaseTask';\n\n/*\n * [[ReceiveRemoteVideoPauseResume]] receives [[SdkPauseFrame]] from the server side (only if\n * `VideoDownlinkBandwidthPolicy.getServerSideNetworkAdaption()` == `BandwidthProbingAndRemoteVideoQualityAdaption`)\n * which indicates remote video sources that have been paused or resumed and updates [[VideoDownlinkBandwidthPolicy]]\n * and [[VideoTileController]]\n *\n */\nexport default class ReceiveRemoteVideoPauseResume\n  extends BaseTask\n  implements SignalingClientObserver, RemovableObserver {\n  protected taskName = 'ReceiveRemoteVideoPauseResume';\n\n  private serverPausedVideoTileIds = new Set<number>();\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  removeObserver(): void {\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  async run(): Promise<void> {\n    this.context.signalingClient.registerObserver(this);\n    this.context.removableObservers.push(this);\n  }\n\n  updateSubscribedGroupdIds(groupIds: Set<number>): void {\n    const existingVideoTileIds = new Set<number>();\n    for (const groupId of groupIds) {\n      const attendeeId = this.context.videoStreamIndex.attendeeIdForGroupId(groupId);\n      if (attendeeId.length === 0) {\n        this.logger.warn(`Could not find attendee ID for newly subscribed group ID ${groupId}`);\n        continue;\n      }\n      let videoTile = this.context.videoTileController.getVideoTileForAttendeeId(attendeeId);\n      if (videoTile === undefined) {\n        this.logger.info(\n          `No existing video tile for attendee ID ${attendeeId} with new group ID ${groupId}. Creating new one.`\n        );\n        videoTile = this.context.videoTileController.addVideoTile();\n        videoTile.bindVideoStream(attendeeId, false, null, 0, 0, 0, null);\n      }\n      existingVideoTileIds.add(videoTile.id());\n    }\n\n    this.serverPausedVideoTileIds.forEach(id => {\n      if (!existingVideoTileIds.has(id)) {\n        this.serverPausedVideoTileIds.delete(id);\n      }\n    });\n  }\n\n  handleSignalingClientEvent(event: SignalingClientEvent): void {\n    if (\n      event.type !== SignalingClientEventType.ReceivedSignalFrame ||\n      (event.message.type !== SdkSignalFrame.Type.PAUSE &&\n        event.message.type !== SdkSignalFrame.Type.RESUME)\n    ) {\n      return;\n    }\n\n    // @ts-ignore: force cast to SdkPauseFrame\n    const pauseResumeFrame: SdkPauseResumeFrame = event.message.pause;\n    const messageType = event.message.type;\n    this.logger.info(\n      `Received new ${\n        messageType === SdkSignalFrame.Type.PAUSE ? 'pause' : 'resume'\n      } frame: ${JSON.stringify(pauseResumeFrame)}`\n    );\n\n    if (\n      !pauseResumeFrame ||\n      this.context.videoTileController.getVideoTileForAttendeeId === undefined ||\n      this.context.videoDownlinkBandwidthPolicy.forEachObserver === undefined ||\n      this.context.videoStreamIndex.attendeeIdForGroupId === undefined\n    ) {\n      return;\n    }\n\n    const tiles = pauseResumeFrame.groupIds.map((groupId: number) => {\n      const attendeeId = this.context.videoStreamIndex.attendeeIdForGroupId(groupId);\n      if (attendeeId.length === 0) {\n        this.logger.warn(`Could not find attendee ID for paused group ID ${groupId}`);\n        return undefined;\n      }\n      return this.context.videoTileController.getVideoTileForAttendeeId(attendeeId);\n    });\n\n    for (const tile of tiles) {\n      if (tile === undefined) {\n        // Warning is logged above\n        continue;\n      }\n      if (messageType === SdkSignalFrame.Type.PAUSE) {\n        if (!tile.state().paused) {\n          this.serverPausedVideoTileIds.add(tile.id());\n          this.context.videoDownlinkBandwidthPolicy.forEachObserver(\n            (observer: VideoDownlinkObserver) => {\n              observer.tileWillBePausedByDownlinkPolicy(tile.id());\n            }\n          );\n          // This circumvents the tile controller so it will not send\n          // any signaling messages to server side.\n          tile.pause();\n        }\n      } else {\n        // Don't resume user paused video tiles\n        if (tile.state().paused && this.serverPausedVideoTileIds.has(tile.id())) {\n          this.serverPausedVideoTileIds.delete(tile.id());\n          this.context.videoDownlinkBandwidthPolicy.forEachObserver(\n            (observer: VideoDownlinkObserver) => {\n              observer.tileWillBeUnpausedByDownlinkPolicy(tile.id());\n            }\n          );\n          // See comment above.\n          tile.unpause();\n        }\n      }\n    }\n  }\n}\n"]}