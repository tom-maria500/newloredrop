{"version":3,"file":"CreatePeerConnectionTask.js","sourceRoot":"","sources":["../../src/task/CreatePeerConnectionTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAMtC,0DAAkC;AAElC;;GAEG;AACH,MAAqB,wBAAyB,SAAQ,kBAAQ;IAiB5D,YAAoB,OAAkC;QACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QADJ,YAAO,GAAP,OAAO,CAA2B;QAhB5C,aAAQ,GAAG,0BAA0B,CAAC;QAExC,kCAA6B,GAAwB,IAAI,CAAC;QAC1D,qCAAgC,GAAsC,EAAE,CAAC;QAEhE,gBAAW,GAAa;YACvC,OAAO;YACP,MAAM;YACN,QAAQ;YACR,iBAAiB;YACjB,iBAAiB;SAClB,CAAC;QACM,mCAA8B,GAA0C,EAAE,CAAC;QAgF3E,sBAAiB,GAAG,CAAC,KAAoB,EAAQ,EAAE;YACzD,MAAM,KAAK,GAAqB,KAAK,CAAC,KAAK,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CACtB,8BAA8B,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,EAAE,UAAU,KAAK,CAAC,KAAK,EAAE,CAC/E,CAAC;YAEF,IAAI,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,CAAC,gBAAgB,KAAK,UAAU,EAAE;gBAC1E,OAAO;aACR;YAED,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;gBACtD,OAAO;aACR;YAED,MAAM,MAAM,GAAgB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC1B,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;aACzD;iBAAM,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBACnE,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aACzC;QACH,CAAC,CAAC;IA/FF,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,6BAA6B,IAAI,IAAI,CAAC,6BAA6B,EAAE,CAAC;QAC3E,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,gCAAgC,EAAE;YAC3D,IAAI,CAAC,gCAAgC,CAAC,OAAO,CAAC,EAAE,CAAC;SAClD;IACH,CAAC;IAEO,4BAA4B;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC/B,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAClD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC9C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACpD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CACtB,gDAAgD,IAAI,CAAC,iBAAiB,EAAE,CACzE,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,KAAgC,EAAE,EAAE;YACzE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CACtB,kCAAkC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,CAC3F,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACrD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CACtB,iDAAiD,IAAI,CAAC,kBAAkB,EAAE,CAC3E,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEK,GAAG;;YACP,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,kBAAkB,GACtB,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC/E,MAAM,aAAa,GAAqB,kBAAkB;gBACxD,CAAC,CAAC;oBACE,UAAU,EAAE;wBACV;4BACE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI;4BACvC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ;4BAC/C,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ;4BACjD,cAAc,EAAE,UAAU;yBAC3B;qBACF;oBACD,kBAAkB,EAAE,OAAO;iBAC5B;gBACH,CAAC,CAAC,EAAE,CAAC;YACP,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC;YACjF,aAAa;YACb,aAAa,CAAC,YAAY,GAAG,cAAc,CAAC;YAC5C,aAAa;YACb,aAAa,CAAC,wBAAwB,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC;YAC1F,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBACrB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aACrD;iBAAM;gBACL,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;gBACzD,aAAa;gBACb,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,iBAAiB,CAAC,aAAa,CAAC,CAAC;gBACzD,IAAI,CAAC,4BAA4B,EAAE,CAAC;aACrC;YAED,IAAI,CAAC,6BAA6B,GAAG,GAAG,EAAE;gBACxC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;oBACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;iBACxE;gBACD,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC;YAC5C,CAAC,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACtE,CAAC;KAAA;IAyBO,iBAAiB,CAAC,KAAuB;QAC/C,IAAI,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,eAAe,EAAE,EAAE;YACxD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;gBACrB,OAAO,0BAA0B,CAAC;YACpC,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;SACpE;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,mBAAmB,CAAC,KAAuB,EAAE,MAAmB;;QACtE,MAAM,OAAO,GAAG,MAAM,CAAC,EAAE,CAAC;QAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC7E,IAAI,UAAmB,CAAC;QACxB,IAAI,IAAe,CAAC;QACpB,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,yBAAyB,EAAE;YAC9D,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;YAC9E,UAAU,GAAG,CAAC,CAAC,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,EAAE,0CAAE,gBAAgB,CAAA,CAAC;SAChD;aAAM;YACL,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;SACtF;QAED,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CACtB,+DAA+D,UAAU,EAAE,CAC5E,CAAC;YACF,OAAO;SACR;QAED,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;YACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;SACrD;QACD,IAAI,QAAQ,GAAkB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACtF,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6BAA6B,IAAI,CAAC,EAAE,EAAE,UAAU,OAAO,EAAE,CAAC,CAAC;YAC5E,QAAQ,GAAG,IAAI,CAAC;SACjB;QACD,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,OAAO,GAAG,IAAI,CAAC;SAChB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,MAAM,UAAU,GAAW,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;YAC5C,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;gBACrC,MAAM,UAAU,GAAqB,WAAW,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,QAAQ,GAAuC,GAAS,EAAE;oBAC9D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CACtB,gBAAgB,UAAU,mBAAmB,IAAI,CAAC,EAAE,EAAE,OACpD,KAAK,CAAC,EACR,aAAa,QAAQ,EAAE,CACxB,CAAC;oBACF,IAAI,UAAU,KAAK,OAAO,EAAE;wBAC1B,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;qBAClD;gBACH,CAAC,CAAC;gBACF,UAAU,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBAClD,IAAI,CAAC,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;oBAClD,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;iBACpD;gBACD,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBACtD,UAAU,CAAC,mBAAmB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;aACJ;SACF;QAED,IAAI,KAAa,CAAC;QAClB,IAAI,MAAc,CAAC;QACnB,IAAI,KAAK,CAAC,WAAW,EAAE;YACrB,MAAM,GAAG,GAAuB,KAAK,CAAC,WAAW,EAAE,CAAC;YACpD,KAAK,GAAG,GAAG,CAAC,KAAe,CAAC;YAC5B,MAAM,GAAG,GAAG,CAAC,MAAgB,CAAC;SAC/B;aAAM;YACL,MAAM,GAAG,GAA2B,KAAK,CAAC,eAAe,EAAE,CAAC;YAC5D,KAAK,GAAG,GAAG,CAAC,KAAe,CAAC;YAC5B,MAAM,GAAG,GAAG,CAAC,MAAgB,CAAC;SAC/B;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,CAAC,eAAe,CAClB,UAAU,EACV,KAAK,EACL,MAAM,EACN,KAAK,EACL,MAAM,EACN,QAAQ,EACR,cAAc,EACd,OAAO,CACR,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,+BAA+B,IAAI,CAAC,EAAE,EAAE,UAAU,OAAO,aAAa,QAAQ,YAAY,OAAO,EAAE,CACpG,CAAC;QAEF,MAAM,QAAQ,GAAG,aAAa,CAAC;QAC/B,MAAM,MAAM,GAAgB,MAAM,CAAC;QAEnC,MAAM,mBAAmB,GAAG,GAAS,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE;YACrD,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC;QACF,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;IACzD,CAAC;IAEO,sBAAsB,CAAC,KAAuB,EAAE,SAAyB;QAC/E,IAAI,IAAI,CAAC,gCAAgC,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;YAClE,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC;YAElD,KAAK,MAAM,6BAA6B,IAAI,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;gBACzF,6BAA6B,EAAE,CAAC;aACjC;YACD,OAAO,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,oCAAoC,SAAS,CAAC,MAAM,OAAO,KAAK,CAAC,EAAE,WAAW,SAAS,CAAC,QAAQ,EAAE,CACnG,CAAC;QAEF,IAAI,SAAS,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SACtD;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACrE,CAAC;;AAjPH,2CAkPC;AAnOiB,mDAA0B,GAAW,KAAK,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport RemovableObserver from '../removableobserver/RemovableObserver';\nimport VideoTile from '../videotile/VideoTile';\nimport VideoTileState from '../videotile/VideoTileState';\nimport BaseTask from './BaseTask';\n\n/*\n * [[CreatePeerConnectionTask]] sets up the peer connection object.\n */\nexport default class CreatePeerConnectionTask extends BaseTask implements RemovableObserver {\n  protected taskName = 'CreatePeerConnectionTask';\n\n  private removeTrackAddedEventListener: (() => void) | null = null;\n  private removeTrackRemovedEventListeners: { [trackId: string]: () => void } = {};\n\n  private readonly trackEvents: string[] = [\n    'ended',\n    'mute',\n    'unmute',\n    'isolationchange',\n    'overconstrained',\n  ];\n  private removeVideoTrackEventListeners: { [trackId: string]: (() => void)[] } = {};\n\n  static readonly REMOVE_HANDLER_INTERVAL_MS: number = 10000;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  removeObserver(): void {\n    this.removeTrackAddedEventListener && this.removeTrackAddedEventListener();\n    for (const trackId in this.removeTrackRemovedEventListeners) {\n      this.removeTrackRemovedEventListeners[trackId]();\n    }\n  }\n\n  private addPeerConnectionEventLogger(): void {\n    const peer = this.context.peer;\n    peer.addEventListener('connectionstatechange', () => {\n      this.context.logger.info(`peer connection state changed: ${peer.connectionState}`);\n    });\n    peer.addEventListener('negotiationneeded', () => {\n      this.context.logger.info('peer connection negotiation is needed');\n    });\n    peer.addEventListener('icegatheringstatechange', () => {\n      this.context.logger.info(\n        `peer connection ice gathering state changed: ${peer.iceGatheringState}`\n      );\n    });\n    peer.addEventListener('icecandidate', (event: RTCPeerConnectionIceEvent) => {\n      this.context.logger.info(\n        `peer connection ice candidate: ${event.candidate ? event.candidate.candidate : '(null)'}`\n      );\n    });\n    peer.addEventListener('iceconnectionstatechange', () => {\n      this.context.logger.info(\n        `peer connection ice connection state changed: ${peer.iceConnectionState}`\n      );\n    });\n  }\n\n  async run(): Promise<void> {\n    this.context.removableObservers.push(this);\n    const hasTurnCredentials =\n      this.context.turnCredentials && this.context.turnCredentials.uris.length > 0;\n    const configuration: RTCConfiguration = hasTurnCredentials\n      ? {\n          iceServers: [\n            {\n              urls: this.context.turnCredentials.uris,\n              username: this.context.turnCredentials.username,\n              credential: this.context.turnCredentials.password,\n              credentialType: 'password',\n            },\n          ],\n          iceTransportPolicy: 'relay',\n        }\n      : {};\n    configuration.bundlePolicy = this.context.browserBehavior.requiresBundlePolicy();\n    // @ts-ignore\n    configuration.sdpSemantics = 'unified-plan';\n    // @ts-ignore\n    configuration.encodedInsertableStreams = this.context.audioProfile.hasRedundancyEnabled();\n    if (this.context.peer) {\n      this.context.logger.info('reusing peer connection');\n    } else {\n      this.context.logger.info('creating new peer connection');\n      // @ts-ignore\n      this.context.peer = new RTCPeerConnection(configuration);\n      this.addPeerConnectionEventLogger();\n    }\n\n    this.removeTrackAddedEventListener = () => {\n      if (this.context.peer) {\n        this.context.peer.removeEventListener('track', this.trackAddedHandler);\n      }\n      this.removeTrackAddedEventListener = null;\n    };\n    this.context.peer.addEventListener('track', this.trackAddedHandler);\n  }\n\n  private trackAddedHandler = (event: RTCTrackEvent): void => {\n    const track: MediaStreamTrack = event.track;\n    this.context.logger.info(\n      `received track event: kind=${track.kind} id=${track.id} label=${track.label}`\n    );\n\n    if (event.transceiver && event.transceiver.currentDirection === 'inactive') {\n      return;\n    }\n\n    if (event.streams.length === 0) {\n      this.context.logger.warn(`Track event but no stream`);\n      return;\n    }\n\n    const stream: MediaStream = event.streams[0];\n    if (track.kind === 'audio') {\n      this.context.audioMixController.bindAudioStream(stream);\n    } else if (track.kind === 'video' && !this.trackIsVideoInput(track)) {\n      this.addRemoteVideoTrack(track, stream);\n    }\n  };\n\n  private trackIsVideoInput(track: MediaStreamTrack): boolean {\n    if (this.context.transceiverController.useTransceivers()) {\n      this.logger.debug(() => {\n        return `getting video track type`;\n      });\n      return this.context.transceiverController.trackIsVideoInput(track);\n    }\n    return false;\n  }\n\n  private addRemoteVideoTrack(track: MediaStreamTrack, stream: MediaStream): void {\n    const trackId = stream.id;\n    const attendeeId = this.context.videoStreamIndex.attendeeIdForTrack(trackId);\n    let skipAdding: boolean;\n    let tile: VideoTile;\n    if (this.context.videoTileController.getVideoTileForAttendeeId) {\n      tile = this.context.videoTileController.getVideoTileForAttendeeId(attendeeId);\n      skipAdding = !!tile?.state()?.boundVideoStream;\n    } else {\n      skipAdding = this.context.videoTileController.haveVideoTileForAttendeeId(attendeeId);\n    }\n\n    if (skipAdding) {\n      this.context.logger.info(\n        `Not adding remote track. Already have tile for attendeeId:  ${attendeeId}`\n      );\n      return;\n    }\n\n    if (!tile) {\n      tile = this.context.videoTileController.addVideoTile();\n      this.logger.info(`Created video tile ${tile.id()}`);\n    }\n    let streamId: number | null = this.context.videoStreamIndex.streamIdForTrack(trackId);\n    if (typeof streamId === 'undefined') {\n      this.logger.warn(`stream not found for tile=${tile.id()} track=${trackId}`);\n      streamId = null;\n    }\n    let groupId = this.context.videoStreamIndex.groupIdForStreamId(streamId);\n    if (groupId === undefined) {\n      groupId = null;\n    }\n\n    for (let i = 0; i < this.trackEvents.length; i++) {\n      const trackEvent: string = this.trackEvents[i];\n      const videoTracks = stream.getVideoTracks();\n      if (videoTracks && videoTracks.length) {\n        const videoTrack: MediaStreamTrack = videoTracks[0];\n        const callback: EventListenerOrEventListenerObject = (): void => {\n          this.context.logger.info(\n            `received the ${trackEvent} event for tile=${tile.id()} id=${\n              track.id\n            } streamId=${streamId}`\n          );\n          if (trackEvent === 'ended') {\n            this.removeRemoteVideoTrack(track, tile.state());\n          }\n        };\n        videoTrack.addEventListener(trackEvent, callback);\n        if (!this.removeVideoTrackEventListeners[track.id]) {\n          this.removeVideoTrackEventListeners[track.id] = [];\n        }\n        this.removeVideoTrackEventListeners[track.id].push(() => {\n          videoTrack.removeEventListener(trackEvent, callback);\n        });\n      }\n    }\n\n    let width: number;\n    let height: number;\n    if (track.getSettings) {\n      const cap: MediaTrackSettings = track.getSettings();\n      width = cap.width as number;\n      height = cap.height as number;\n    } else {\n      const cap: MediaTrackCapabilities = track.getCapabilities();\n      width = cap.width as number;\n      height = cap.height as number;\n    }\n    const externalUserId = this.context.videoStreamIndex.externalUserIdForTrack(trackId);\n    tile.bindVideoStream(\n      attendeeId,\n      false,\n      stream,\n      width,\n      height,\n      streamId,\n      externalUserId,\n      groupId\n    );\n    this.logger.info(\n      `video track added, use tile=${tile.id()} track=${trackId} streamId=${streamId} groupId=${groupId}`\n    );\n\n    const endEvent = 'removetrack';\n    const target: MediaStream = stream;\n\n    const trackRemovedHandler = (): void => this.removeRemoteVideoTrack(track, tile.state());\n    this.removeTrackRemovedEventListeners[track.id] = () => {\n      target.removeEventListener(endEvent, trackRemovedHandler);\n      delete this.removeTrackRemovedEventListeners[track.id];\n    };\n    target.addEventListener(endEvent, trackRemovedHandler);\n  }\n\n  private removeRemoteVideoTrack(track: MediaStreamTrack, tileState: VideoTileState): void {\n    if (this.removeTrackRemovedEventListeners.hasOwnProperty(track.id)) {\n      this.removeTrackRemovedEventListeners[track.id]();\n\n      for (const removeVideoTrackEventListener of this.removeVideoTrackEventListeners[track.id]) {\n        removeVideoTrackEventListener();\n      }\n      delete this.removeVideoTrackEventListeners[track.id];\n    }\n\n    this.logger.info(\n      `video track ended, removing tile=${tileState.tileId} id=${track.id} stream=${tileState.streamId}`\n    );\n\n    if (tileState.streamId) {\n      this.context.videosPaused.remove(tileState.streamId);\n    } else {\n      this.logger.warn(`no stream found for tile=${tileState.tileId}`);\n    }\n    this.context.videoTileController.removeVideoTile(tileState.tileId);\n  }\n}\n"]}