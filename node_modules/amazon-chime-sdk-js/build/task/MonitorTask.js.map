{"version":3,"file":"MonitorTask.js","sourceRoot":"","sources":["../../src/task/MonitorTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport ClientMetricReport from '../clientmetricreport/ClientMetricReport';\nimport ClientMetricReportDirection from '../clientmetricreport/ClientMetricReportDirection';\nimport ClientMetricReportMediaType from '../clientmetricreport/ClientMetricReportMediaType';\nimport StreamMetricReport from '../clientmetricreport/StreamMetricReport';\nimport ConnectionHealthPolicy from '../connectionhealthpolicy/BaseConnectionHealthPolicy';\nimport ConnectionHealthData from '../connectionhealthpolicy/ConnectionHealthData';\nimport ConnectionHealthPolicyConfiguration from '../connectionhealthpolicy/ConnectionHealthPolicyConfiguration';\nimport ReconnectionHealthPolicy from '../connectionhealthpolicy/ReconnectionHealthPolicy';\nimport SendingAudioFailureConnectionHealthPolicy from '../connectionhealthpolicy/SendingAudioFailureConnectionHealthPolicy';\nimport UnusableAudioWarningConnectionHealthPolicy from '../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy';\nimport VideoEncodingConnectionHealthPolicyName from '../connectionhealthpolicy/VideoEncodingConnectionHealthPolicyName';\nimport AudioVideoEventAttributes from '../eventcontroller/AudioVideoEventAttributes';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport MeetingSessionStatusCode from '../meetingsession/MeetingSessionStatusCode';\nimport RemovableObserver from '../removableobserver/RemovableObserver';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  ISdkBitrateFrame,\n  SdkNotificationFrame,\n  SdkSignalFrame,\n} from '../signalingprotocol/SignalingProtocol';\nimport AudioLogEvent from '../statscollector/AudioLogEvent';\nimport { Maybe } from '../utils/Types';\nimport VideoTileState from '../videotile/VideoTileState';\nimport BaseTask from './BaseTask';\n\n/*\n * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.\n */\nexport default class MonitorTask\n  extends BaseTask\n  implements AudioVideoObserver, RemovableObserver, SignalingClientObserver {\n  protected taskName = 'MonitorTask';\n\n  private reconnectionHealthPolicy: ReconnectionHealthPolicy;\n  private unusableAudioWarningHealthPolicy: UnusableAudioWarningConnectionHealthPolicy;\n  private sendingAudioFailureHealthPolicy: SendingAudioFailureConnectionHealthPolicy;\n  private prevSignalStrength: number = 1;\n  private currentAvailableStreamAvgBitrates: ISdkBitrateFrame = null;\n  private hasSignalingError: boolean = false;\n  private presenceHandlerCalled: boolean = false;\n\n  // See comment above invocation of `pauseResubscribeCheck` in `DefaultAudioVideoController`\n  // for explanation.\n  private isResubscribeCheckPaused: boolean = false;\n  private pendingMetricsReport: ClientMetricReport | undefined = undefined;\n  private isMeetingConnected: boolean = false;\n  private videoEncodingHealthPolicies: ConnectionHealthPolicy[] = [];\n\n  constructor(\n    private context: AudioVideoControllerState,\n    connectionHealthPolicyConfiguration: ConnectionHealthPolicyConfiguration,\n    private initialConnectionHealthData: ConnectionHealthData\n  ) {\n    super(context.logger);\n    this.reconnectionHealthPolicy = new ReconnectionHealthPolicy(\n      context.logger,\n      { ...connectionHealthPolicyConfiguration },\n      this.initialConnectionHealthData.clone()\n    );\n    this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy(\n      { ...connectionHealthPolicyConfiguration },\n      this.initialConnectionHealthData.clone()\n    );\n    this.sendingAudioFailureHealthPolicy = new SendingAudioFailureConnectionHealthPolicy(\n      context.logger,\n      { ...connectionHealthPolicyConfiguration },\n      this.initialConnectionHealthData.clone()\n    );\n    for (const policy of connectionHealthPolicyConfiguration.videoEncodingHealthPolicies) {\n      this.videoEncodingHealthPolicies.push(\n        new policy(\n          { ...connectionHealthPolicyConfiguration },\n          this.initialConnectionHealthData.clone()\n        )\n      );\n    }\n  }\n\n  removeObserver(): void {\n    this.context.audioVideoController.removeObserver(this);\n    this.context.realtimeController.realtimeUnsubscribeToFatalError(\n      this.realtimeFatalErrorCallback\n    );\n    this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(\n      this.checkAndSendWeakSignalEvent\n    );\n    this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(\n      this.realtimeAttendeeIdPresenceHandler\n    );\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  async run(): Promise<void> {\n    this.context.removableObservers.push(this);\n    this.context.audioVideoController.addObserver(this);\n    this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);\n    this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(\n      this.checkAndSendWeakSignalEvent\n    );\n    this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(\n      this.realtimeAttendeeIdPresenceHandler\n    );\n\n    this.context.connectionMonitor.start();\n    this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);\n    this.context.signalingClient.registerObserver(this);\n  }\n\n  pauseResubscribeCheck(): void {\n    this.isResubscribeCheckPaused = true;\n  }\n\n  resumeResubscribeCheck(): void {\n    if (!this.isResubscribeCheckPaused) {\n      // Do not recheck subcribe if it wasn't paused to begin with.\n      return;\n    }\n    this.isResubscribeCheckPaused = false;\n    if (this.pendingMetricsReport) {\n      this.context.logger.info('Resuming resubscribe check with pending metrics report');\n      if (this.checkResubscribe(this.pendingMetricsReport)) {\n        this.context.audioVideoController.update({ needsRenegotiation: false });\n      }\n    }\n  }\n\n  videoTileDidUpdate(_tileState: VideoTileState): void {\n    this.context.maxVideoTileCount = Math.max(\n      this.context.maxVideoTileCount,\n      this.context.videoTileController.getAllVideoTiles().length\n    );\n  }\n\n  private checkResubscribe(clientMetricReport: ClientMetricReport): boolean {\n    if (this.isResubscribeCheckPaused) {\n      this.context.logger.info(\n        'Resubscribe check is paused, setting incoming client metric report as pending'\n      );\n      this.pendingMetricsReport = clientMetricReport;\n      return;\n    } else {\n      this.pendingMetricsReport = undefined;\n    }\n\n    const metricReport = clientMetricReport.getObservableMetrics();\n    const availableSendBandwidth = metricReport.availableOutgoingBitrate;\n    const nackCountPerSecond = metricReport.nackCountReceivedPerSecond;\n\n    let needResubscribe = false;\n\n    this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);\n    const resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();\n    needResubscribe = needResubscribe || resubscribeForDownlink;\n    if (resubscribeForDownlink) {\n      const videoSubscriptionIdSet = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();\n      // Same logic as in `ReceiveVideoStreamIndexTask`, immediately truncating rather then truncating on subscribe\n      // avoids any issues with components (e.g. transceiver controller) along the way.\n      this.context.videosToReceive = videoSubscriptionIdSet.truncate(\n        this.context.videoSubscriptionLimit\n      );\n\n      if (videoSubscriptionIdSet.size() > this.context.videosToReceive.size()) {\n        this.logger.warn(\n          `Video receive limit exceeded. Limiting the videos to ${this.context.videosToReceive.size()}. Please consider using AllHighestVideoBandwidthPolicy or VideoPriorityBasedPolicy along with chooseRemoteVideoSources api to select the video sources to be displayed.`\n        );\n      }\n      this.logger.info(\n        `trigger resubscribe for down=${resubscribeForDownlink}; videosToReceive=[${this.context.videosToReceive.array()}]`\n      );\n    }\n\n    if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n      this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({\n        uplinkKbps: availableSendBandwidth / 1000,\n        nackCountPerSecond: nackCountPerSecond,\n      });\n      const resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();\n      needResubscribe = needResubscribe || resubscribeForUplink;\n      if (resubscribeForUplink) {\n        this.logger.info(\n          `trigger resubscribe for up=${resubscribeForUplink}; videosToReceive=[${this.context.videosToReceive.array()}]`\n        );\n        this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n      }\n    }\n\n    return needResubscribe;\n  }\n\n  metricsDidReceive(clientMetricReport: ClientMetricReport): void {\n    if (this.checkResubscribe(clientMetricReport)) {\n      this.context.audioVideoController.update({ needsRenegotiation: false });\n    }\n\n    if (!this.currentAvailableStreamAvgBitrates) {\n      return;\n    }\n\n    const streamMetricReport = clientMetricReport.streamMetricReports;\n    const downlinkVideoStream: Map<number, StreamMetricReport> = new Map<\n      number,\n      StreamMetricReport\n    >();\n\n    // TODO: move those logic to stats collector.\n    for (const ssrc in streamMetricReport) {\n      if (\n        streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType.VIDEO &&\n        streamMetricReport[ssrc].direction === ClientMetricReportDirection.DOWNSTREAM\n      ) {\n        downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);\n      }\n    }\n  }\n\n  connectionHealthDidChange(connectionHealthData: ConnectionHealthData): void {\n    if (connectionHealthData.consecutiveMissedPongs === 0) {\n      if (this.context.reconnectController) {\n        this.context.reconnectController.setLastActiveTimestampMs(Date.now());\n      }\n    }\n\n    this.applyHealthPolicy(this.reconnectionHealthPolicy, connectionHealthData, () => {\n      this.context.audioVideoController.handleMeetingSessionStatus(\n        new MeetingSessionStatus(MeetingSessionStatusCode.ConnectionHealthReconnect),\n        null\n      );\n    });\n\n    this.applyHealthPolicy(\n      this.unusableAudioWarningHealthPolicy,\n      connectionHealthData,\n      () => {\n        this.context.poorConnectionCount += 1;\n        const attributes = this.generateAudioVideoEventAttributesForReceivingAudioDropped();\n        this.context.eventController?.publishEvent('receivingAudioDropped', attributes);\n        if (this.context.videoTileController.haveVideoTilesWithStreams()) {\n          this.context.audioVideoController.forEachObserver((observer: AudioVideoObserver) => {\n            Maybe.of(observer.connectionDidSuggestStopVideo).map(f => f.bind(observer)());\n          });\n        } else {\n          this.context.audioVideoController.forEachObserver((observer: AudioVideoObserver) => {\n            Maybe.of(observer.connectionDidBecomePoor).map(f => f.bind(observer)());\n          });\n        }\n      },\n      () => {\n        this.context.audioVideoController.forEachObserver((observer: AudioVideoObserver) => {\n          Maybe.of(observer.connectionDidBecomeGood).map(f => f.bind(observer)());\n        });\n      }\n    );\n\n    for (const policy of this.videoEncodingHealthPolicies) {\n      this.applyHealthPolicy(policy, connectionHealthData, () => {\n        this.degradeVideoCodec(policy.name);\n        switch (policy.name) {\n          case VideoEncodingConnectionHealthPolicyName.VideoEncodingCpuHealth:\n            this.context.statsCollector.videoCodecDegradationHighEncodeCpuDidReceive();\n            break;\n          case VideoEncodingConnectionHealthPolicyName.VideoEncodingFramerateHealth:\n            this.context.statsCollector.videoCodecDegradationEncodeFailureDidReceive();\n            break;\n        }\n      });\n    }\n\n    if (this.isMeetingConnected) {\n      this.applyHealthPolicy(\n        this.sendingAudioFailureHealthPolicy,\n        connectionHealthData,\n        () => {\n          const attributes = this.generateBaseAudioVideoEventAttributes();\n          this.context.eventController?.publishEvent('sendingAudioFailed', attributes);\n        },\n        () => {\n          const attributes = this.generateBaseAudioVideoEventAttributes();\n          this.context.eventController?.publishEvent('sendingAudioRecovered', attributes);\n        }\n      );\n    }\n  }\n\n  audioVideoDidStart(): void {\n    this.isMeetingConnected = true;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  audioVideoDidStartConnecting(reconnecting: boolean): void {\n    // The expectation here is that the flag will be set to true again when audioVideoDidStart() is eventually called.\n    this.isMeetingConnected = false;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  audioVideoDidStop(sessionStatus: MeetingSessionStatus): void {\n    this.isMeetingConnected = false;\n  }\n\n  private applyHealthPolicy(\n    healthPolicy: ConnectionHealthPolicy,\n    connectionHealthData: ConnectionHealthData,\n    unhealthyCallback?: () => void,\n    healthyCallback?: () => void\n  ): void {\n    healthPolicy.update(connectionHealthData);\n    const healthValue = healthPolicy.healthIfChanged();\n    if (healthValue !== null) {\n      this.logger.info(`${healthPolicy.name} value is now ${healthValue}`);\n      if (healthValue <= healthPolicy.minimumHealth()) {\n        Maybe.of(unhealthyCallback).map(f => f.bind(this)());\n      } else {\n        Maybe.of(healthyCallback).map(f => f.bind(this)());\n      }\n    }\n  }\n\n  private handleBitrateFrame(bitrates: ISdkBitrateFrame): void {\n    this.currentAvailableStreamAvgBitrates = bitrates;\n\n    if (bitrates.serverAvailableOutgoingBitrate > 0) {\n      this.logger.info(\n        `Received server side estimation of available incoming bitrate ${bitrates.serverAvailableOutgoingBitrate}kbps`\n      );\n      // This value will be included in the 'Bitrates' signaling message if we are using\n      // server side remote video quality adaption, since if that is the case we will\n      // be using TWCC and will therefore not likely have an estimate on the client\n      // for available incoming bitrate\n      this.context.statsCollector.overrideObservableMetric(\n        'availableIncomingBitrate',\n        bitrates.serverAvailableOutgoingBitrate * 1000\n      );\n    }\n  }\n\n  handleSignalingClientEvent(event: SignalingClientEvent): void {\n    // Don't add two or more consecutive \"signalingDropped\" states.\n    if (\n      (event.type === SignalingClientEventType.WebSocketClosed &&\n        (event.closeCode === 4410 || (event.closeCode >= 4500 && event.closeCode < 4600))) ||\n      event.type === SignalingClientEventType.WebSocketError ||\n      event.type === SignalingClientEventType.WebSocketFailed\n    ) {\n      if (!this.hasSignalingError) {\n        const attributes = this.generateAudioVideoEventAttributesForReceivingAudioDropped();\n        this.context.eventController?.publishEvent('signalingDropped', attributes);\n        this.hasSignalingError = true;\n      }\n    } else if (event.type === SignalingClientEventType.WebSocketOpen) {\n      this.hasSignalingError = false;\n    }\n\n    if (event.type === SignalingClientEventType.ReceivedSignalFrame) {\n      if (event.message.type === SdkSignalFrame.Type.NOTIFICATION) {\n        switch (event.message.notification.level) {\n          case SdkNotificationFrame.NotificationLevel.INFO:\n            this.logger.info(\n              `Received notification from server: ${event.message.notification.message}`\n            );\n            break;\n          case SdkNotificationFrame.NotificationLevel.WARNING:\n            this.logger.warn(`Received warning from server: ${event.message.notification.message}`);\n            break;\n          case SdkNotificationFrame.NotificationLevel.ERROR:\n            this.logger.error(`Received error from server: ${event.message.notification.message}`);\n            break;\n          default:\n            this.logger.error(\n              `Received notification from server with unknown level ${event.message.notification.level}: ${event.message.notification.message}`\n            );\n            break;\n        }\n        return;\n      }\n      if (!!event.message.bitrates) {\n        const bitrateFrame: ISdkBitrateFrame = event.message.bitrates;\n        this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);\n        this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);\n        this.handleBitrateFrame(event.message.bitrates);\n      }\n      const status = MeetingSessionStatus.fromSignalFrame(event.message);\n      // Primary meeting join ack status will be handled by `PromoteToPrimaryMeetingTask`\n      if (\n        event.message.type !== SdkSignalFrame.Type.PRIMARY_MEETING_JOIN_ACK &&\n        status.statusCode() !== MeetingSessionStatusCode.OK\n      ) {\n        this.context.audioVideoController.handleMeetingSessionStatus(status, null);\n      }\n    }\n  }\n\n  private checkAndSendWeakSignalEvent = (signalStrength: number): void => {\n    const isCurrentSignalBad = signalStrength < 1;\n    const isPrevSignalBad = this.prevSignalStrength < 1;\n    const signalStrengthEventType = isCurrentSignalBad\n      ? !isPrevSignalBad\n        ? AudioLogEvent.RedmicStartLoss\n        : null\n      : isPrevSignalBad\n      ? AudioLogEvent.RedmicEndLoss\n      : null;\n\n    if (signalStrengthEventType) {\n      this.context.statsCollector.logAudioEvent(signalStrengthEventType);\n    }\n\n    this.prevSignalStrength = signalStrength;\n  };\n\n  private realtimeFatalErrorCallback = (error: Error): void => {\n    this.logger.error(`realtime error: ${error}: ${error.stack}`);\n    this.context.audioVideoController.handleMeetingSessionStatus(\n      new MeetingSessionStatus(MeetingSessionStatusCode.RealtimeApiFailed),\n      error\n    );\n  };\n\n  private realtimeAttendeeIdPresenceHandler = (\n    presentAttendeeId: string,\n    present: boolean\n  ): void => {\n    const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n    this.logger.info(`attendeePresenceReceived: ${attendeeId}`);\n    if (attendeeId === presentAttendeeId && present && !this.presenceHandlerCalled) {\n      this.presenceHandlerCalled = true;\n      this.context.attendeePresenceDurationMs = Date.now() - this.context.startAudioVideoTimestamp;\n      this.context.eventController?.publishEvent('attendeePresenceReceived', {\n        attendeePresenceDurationMs: this.context.attendeePresenceDurationMs,\n      });\n    }\n  };\n\n  private generateBaseAudioVideoEventAttributes = (): AudioVideoEventAttributes => {\n    const {\n      signalingOpenDurationMs,\n      startTimeMs,\n      iceGatheringDurationMs,\n      attendeePresenceDurationMs,\n      meetingStartDurationMs,\n    } = this.context;\n    return {\n      meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n      signalingOpenDurationMs,\n      iceGatheringDurationMs,\n      attendeePresenceDurationMs,\n      meetingStartDurationMs,\n    };\n  };\n\n  private generateAudioVideoEventAttributesForReceivingAudioDropped = (): AudioVideoEventAttributes => {\n    const baseAttributes = this.generateBaseAudioVideoEventAttributes();\n    return {\n      ...baseAttributes,\n      maxVideoTileCount: this.context.maxVideoTileCount,\n      poorConnectionCount: this.context.poorConnectionCount,\n    };\n  };\n\n  /**\n   * Degrade video codec to an alternative codec\n   */\n  private degradeVideoCodec(cause: string): void {\n    // Degrade video codec if there are other codec options and current codec is not H264 CBP or VP8\n    if (\n      this.context.meetingSupportedVideoSendCodecPreferences !== undefined &&\n      this.context.meetingSupportedVideoSendCodecPreferences.length > 1 &&\n      !(\n        this.context.meetingSupportedVideoSendCodecPreferences[0].equals(\n          VideoCodecCapability.h264ConstrainedBaselineProfile()\n        ) ||\n        this.context.meetingSupportedVideoSendCodecPreferences[0].equals(VideoCodecCapability.vp8())\n      )\n    ) {\n      const newMeetingSupportedVideoSendCodecPreferences: VideoCodecCapability[] = [];\n      for (const capability of this.context.videoSendCodecPreferences) {\n        if (!capability.equals(this.context.meetingSupportedVideoSendCodecPreferences[0])) {\n          newMeetingSupportedVideoSendCodecPreferences.push(capability);\n        }\n      }\n      if (newMeetingSupportedVideoSendCodecPreferences.length > 0) {\n        this.context.logger.info(\n          `Downgrading codec from ${this.context.meetingSupportedVideoSendCodecPreferences[0].codecName} to ${newMeetingSupportedVideoSendCodecPreferences[0].codecName} due to ${cause}`\n        );\n        this.context.degradedVideoSendCodecs.push(\n          this.context.meetingSupportedVideoSendCodecPreferences[0]\n        );\n        this.context.meetingSupportedVideoSendCodecPreferences = newMeetingSupportedVideoSendCodecPreferences;\n\n        if (this.context.videoUplinkBandwidthPolicy.setMeetingSupportedVideoSendCodecs) {\n          this.context.videoUplinkBandwidthPolicy.setMeetingSupportedVideoSendCodecs(\n            this.context.meetingSupportedVideoSendCodecPreferences,\n            this.context.videoSendCodecPreferences\n          );\n        }\n\n        this.context.audioVideoController.update({ needsRenegotiation: true });\n      } else {\n        this.context.logger.warn(\n          `Degrading video codec failed since there is no alternative codec to select. Currently degraded codecs: ${this.context.degradedVideoSendCodecs\n            .map(capability => capability.codecName)\n            .join(',')}`\n        );\n      }\n    }\n  }\n}\n"]}