{"version":3,"file":"JoinAndReceiveIndexTask.js","sourceRoot":"","sources":["../../src/task/JoinAndReceiveIndexTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGtC,kGAA0E;AAC1E,0GAAkF;AAClF,oHAA4F;AAC5F,0GAEsD;AAGtD,2GAAmF;AACnF,iGAAyE;AAEzE,oFAImD;AAEnD,0DAAkC;AAElC;;;GAGG;AACH,MAAqB,uBAAwB,SAAQ,kBAAQ;IAI3D,YAAoB,OAAkC;QACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QADJ,YAAO,GAAP,OAAO,CAA2B;QAH5C,aAAQ,GAAG,yBAAyB,CAAC;QACvC,iBAAY,GAAwB,IAAI,CAAC;IAIjD,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;IACH,CAAC;IAEK,GAAG;;YACP,MAAM,UAAU,GAAG,MAAM,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACtE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC7B,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC/B,MAAM,qBAAqB;oBACzB,YAAoB,eAAgC;wBAAhC,oBAAe,GAAf,eAAe,CAAiB;oBAAG,CAAC;oBAExD,MAAM;wBACJ,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC1C,MAAM,CAAC,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC,CAAC;oBAC5F,CAAC;oBAED,0BAA0B,CAAC,KAA2B;wBACpD,IAAI,KAAK,CAAC,IAAI,KAAK,kCAAwB,CAAC,eAAe,EAAE;4BAC3D,IAAI,OAAO,GAAG,iDAAiD,KAAK,CAAC,SAAS,gBAAgB,KAAK,CAAC,WAAW,EAAE,CAAC;4BAClH,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BAE7B,IAAI,UAAU,GAA6B,kCAAwB,CAAC,mBAAmB,CAAC;4BACxF,IAAI,KAAK,CAAC,SAAS,KAAK,IAAI,EAAE;gCAC5B,OAAO,GAAG,4BAA4B,CAAC;gCACvC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCAC7B,UAAU,GAAG,kCAAwB,CAAC,YAAY,CAAC;6BACpD;iCAAM,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,IAAI,KAAK,CAAC,SAAS,GAAG,IAAI,EAAE;gCAC5D,UAAU,GAAG,kCAAwB,CAAC,4BAA4B,CAAC;6BACpE;4BACD,OAAO,CAAC,oBAAoB,CAAC,0BAA0B,CACrD,IAAI,8BAAoB,CAAC,UAAU,CAAC,EACpC,IAAI,KAAK,CAAC,OAAO,CAAC,CACnB,CAAC;4BACF,OAAO;yBACR;wBACD,IAAI,KAAK,CAAC,IAAI,KAAK,kCAAwB,CAAC,mBAAmB,EAAE;4BAC/D,OAAO;yBACR;wBACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,qCAAc,CAAC,IAAI,CAAC,QAAQ,EAAE;4BACvD,4CAA4C;4BAC5C,MAAM,YAAY,GAAoB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;4BAC5D,IAAI,CAAC,YAAY,EAAE;gCACjB,yCAAyC;gCACzC,OAAO,CAAC,oBAAoB,CAAC,0BAA0B,CACrD,IAAI,8BAAoB,CAAC,kCAAwB,CAAC,sBAAsB,CAAC,EACzE,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAC7D,CAAC;gCACF,OAAO;6BACR;4BACD,IAAI,YAAY,CAAC,sBAAsB,EAAE;gCACvC,OAAO,CAAC,sBAAsB,GAAG,YAAY,CAAC,sBAAsB,CAAC;6BACtE;4BAED,OAAO,CAAC,yBAAyB,GAAG,YAAY,CAAC,kBAAkB,CAAC;4BACpE,IACE,YAAY,CAAC,gCAAgC,KAAK,SAAS;gCAC3D,YAAY,CAAC,gCAAgC,KAAK,mCAAyB,CAAC,OAAO;gCACnF,OAAO,CAAC,4BAA4B,CAAC,4BAA4B,KAAK,SAAS,EAC/E;gCACA,MAAM,gCAAgC,GACpC,YAAY,CAAC,gCAAgC,CAAC;gCAChD,OAAO,CAAC,MAAM,CAAC,IAAI,CACjB,oDAAoD,gCAAgC,EAAE,CACvF,CAAC;gCACF,OAAO,CAAC,4BAA4B,CAAC,4BAA4B,CAC/D,4EAAgD,CAAC,gCAAgC,CAAC,CACnF,CAAC;6BACH;4BACD,IAAI,YAAY,IAAI,YAAY,CAAC,eAAe,EAAE;gCAChD,OAAO,CAAC,eAAe,GAAG,IAAI,uCAA6B,EAAE,CAAC;gCAC9D,OAAO,CAAC,eAAe,CAAC,QAAQ,GAAG,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC;gCACzE,OAAO,CAAC,eAAe,CAAC,QAAQ,GAAG,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC;gCACzE,OAAO,CAAC,eAAe,CAAC,GAAG,GAAG,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC;gCAC/D,OAAO,CAAC,eAAe,CAAC,IAAI,GAAG,YAAY,CAAC,eAAe,CAAC,IAAI;qCAC7D,GAAG,CAAC,CAAC,GAAW,EAAU,EAAE;oCAC3B,OAAO,OAAO,CAAC,2BAA2B,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gCACnE,CAAC,CAAC;qCACD,MAAM,CAAC,CAAC,GAAW,EAAE,EAAE;oCACtB,OAAO,CAAC,CAAC,GAAG,CAAC;gCACf,CAAC,CAAC,CAAC;6BACN;iCAAM;gCACL,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;6BAClE;4BACD,OAAO;yBACR;wBACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,qCAAc,CAAC,IAAI,CAAC,KAAK,EAAE;4BACpD,OAAO;yBACR;wBACD,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC1C,0CAA0C;wBAC1C,MAAM,UAAU,GAAkB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;wBACtD,OAAO,CAAC,UAAU,CAAC,CAAC;oBACtB,CAAC;iBACF;gBACD,MAAM,WAAW,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;gBAC5E,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBAC3D,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;gBAEhC,8BAA8B;gBAC9B,IAAI,CAAC,OAAO,CAAC,yBAAyB,GAAG,EAAE,CAAC;gBAC5C,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBACrC,IAAI,CAAC,OAAO,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBAE/C,MAAM,IAAI,GAAG,IAAI,6BAAmB,CAClC,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,mBAAmB,CAC7D,CAAC;gBACF,IACE,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,4BAA4B,KAAK,SAAS;oBACpF,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,mCAAmC,KAAK,SAAS,EAC3F;oBACA,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,4BAA4B,EAAE,CAAC;oBAC1G,IAAI,CAAC,mCAAmC,GAAG,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,mCAAmC,EAAE,CAAC;iBAC5H;gBACD,IAAI,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,6BAA6B,KAAK,SAAS,EAAE;oBACzF,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,6BAA6B,EAAE,CAAC;iBAChH;gBACD,IAAI,CAAC,6CAA6C,GAAG,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,6CAA6C,CAAC;gBAC5I,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC/E,+IAA+I;YAC/I,gIAAgI;YAChI,mFAAmF;YACnF,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC;QACvC,CAAC;KAAA;CACF;AAxID,0CAwIC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport MeetingSessionStatusCode from '../meetingsession/MeetingSessionStatusCode';\nimport MeetingSessionTURNCredentials from '../meetingsession/MeetingSessionTURNCredentials';\nimport ServerSideNetworkAdaption, {\n  convertServerSideNetworkAdaptionEnumFromSignaled,\n} from '../signalingclient/ServerSideNetworkAdaption';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientJoin from '../signalingclient/SignalingClientJoin';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  SdkIndexFrame,\n  SdkServerSideNetworkAdaption,\n  SdkSignalFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport TaskCanceler from '../taskcanceler/TaskCanceler';\nimport BaseTask from './BaseTask';\n\n/*\n * [[JoinAndReceiveIndexTask]] sends the JoinFrame and asynchronously waits for the server to send the [[SdkIndexFrame]].\n * It should run with the [[TimeoutTask]] as the subtask so it can get canceled after timeout.\n */\nexport default class JoinAndReceiveIndexTask extends BaseTask {\n  protected taskName = 'JoinAndReceiveIndexTask';\n  private taskCanceler: TaskCanceler | null = null;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    if (this.taskCanceler) {\n      this.taskCanceler.cancel();\n      this.taskCanceler = null;\n    }\n  }\n\n  async run(): Promise<void> {\n    const indexFrame = await new Promise<SdkIndexFrame>((resolve, reject) => {\n      const context = this.context;\n      context.turnCredentials = null;\n      class IndexFrameInterceptor implements SignalingClientObserver, TaskCanceler {\n        constructor(private signalingClient: SignalingClient) {}\n\n        cancel(): void {\n          this.signalingClient.removeObserver(this);\n          reject(new Error(`JoinAndReceiveIndexTask got canceled while waiting for SdkIndexFrame`));\n        }\n\n        handleSignalingClientEvent(event: SignalingClientEvent): void {\n          if (event.type === SignalingClientEventType.WebSocketClosed) {\n            let message = `The signaling connection was closed with code ${event.closeCode} and reason: ${event.closeReason}`;\n            context.logger.warn(message);\n\n            let statusCode: MeetingSessionStatusCode = MeetingSessionStatusCode.SignalingBadRequest;\n            if (event.closeCode === 4410) {\n              message = 'The meeting already ended.';\n              context.logger.warn(message);\n              statusCode = MeetingSessionStatusCode.MeetingEnded;\n            } else if (event.closeCode >= 4500 && event.closeCode < 4600) {\n              statusCode = MeetingSessionStatusCode.SignalingInternalServerError;\n            }\n            context.audioVideoController.handleMeetingSessionStatus(\n              new MeetingSessionStatus(statusCode),\n              new Error(message)\n            );\n            return;\n          }\n          if (event.type !== SignalingClientEventType.ReceivedSignalFrame) {\n            return;\n          }\n          if (event.message.type === SdkSignalFrame.Type.JOIN_ACK) {\n            // @ts-ignore: force cast to SdkJoinAckFrame\n            const joinAckFrame: SdkJoinAckFrame = event.message.joinack;\n            if (!joinAckFrame) {\n              // This should realistically never happen\n              context.audioVideoController.handleMeetingSessionStatus(\n                new MeetingSessionStatus(MeetingSessionStatusCode.SignalingRequestFailed),\n                new Error(`Join ACK message did not include expected frame`)\n              );\n              return;\n            }\n            if (joinAckFrame.videoSubscriptionLimit) {\n              context.videoSubscriptionLimit = joinAckFrame.videoSubscriptionLimit;\n            }\n\n            context.serverSupportsCompression = joinAckFrame.wantsCompressedSdp;\n            if (\n              joinAckFrame.defaultServerSideNetworkAdaption !== undefined &&\n              joinAckFrame.defaultServerSideNetworkAdaption !== ServerSideNetworkAdaption.Default &&\n              context.videoDownlinkBandwidthPolicy.setServerSideNetworkAdaption !== undefined\n            ) {\n              const defaultServerSideNetworkAdaption: SdkServerSideNetworkAdaption =\n                joinAckFrame.defaultServerSideNetworkAdaption;\n              context.logger.info(\n                `Overriding server side network adaption value to ${defaultServerSideNetworkAdaption}`\n              );\n              context.videoDownlinkBandwidthPolicy.setServerSideNetworkAdaption(\n                convertServerSideNetworkAdaptionEnumFromSignaled(defaultServerSideNetworkAdaption)\n              );\n            }\n            if (joinAckFrame && joinAckFrame.turnCredentials) {\n              context.turnCredentials = new MeetingSessionTURNCredentials();\n              context.turnCredentials.username = joinAckFrame.turnCredentials.username;\n              context.turnCredentials.password = joinAckFrame.turnCredentials.password;\n              context.turnCredentials.ttl = joinAckFrame.turnCredentials.ttl;\n              context.turnCredentials.uris = joinAckFrame.turnCredentials.uris\n                .map((uri: string): string => {\n                  return context.meetingSessionConfiguration.urls.urlRewriter(uri);\n                })\n                .filter((uri: string) => {\n                  return !!uri;\n                });\n            } else {\n              context.logger.error('missing TURN credentials in JoinAckFrame');\n            }\n            return;\n          }\n          if (event.message.type !== SdkSignalFrame.Type.INDEX) {\n            return;\n          }\n          this.signalingClient.removeObserver(this);\n          // @ts-ignore: force cast to SdkIndexFrame\n          const indexFrame: SdkIndexFrame = event.message.index;\n          resolve(indexFrame);\n        }\n      }\n      const interceptor = new IndexFrameInterceptor(this.context.signalingClient);\n      this.context.signalingClient.registerObserver(interceptor);\n      this.taskCanceler = interceptor;\n\n      // reset SDP compression state\n      this.context.previousSdpAnswerAsString = '';\n      this.context.previousSdpOffer = null;\n      this.context.serverSupportsCompression = false;\n\n      const join = new SignalingClientJoin(\n        this.context.meetingSessionConfiguration.applicationMetadata\n      );\n      if (\n        this.context.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption !== undefined &&\n        this.context.videoDownlinkBandwidthPolicy.supportedServerSideNetworkAdaptions !== undefined\n      ) {\n        join.serverSideNetworkAdaption = this.context.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption();\n        join.supportedServerSideNetworkAdaptions = this.context.videoDownlinkBandwidthPolicy.supportedServerSideNetworkAdaptions();\n      }\n      if (this.context.videoDownlinkBandwidthPolicy.wantsAllTemporalLayersInIndex !== undefined) {\n        join.wantsAllTemporalLayersInIndex = this.context.videoDownlinkBandwidthPolicy.wantsAllTemporalLayersInIndex();\n      }\n      join.disablePeriodicKeyframeRequestOnContentSender = this.context.meetingSessionConfiguration.disablePeriodicKeyframeRequestOnContentSender;\n      this.context.signalingClient.join(join);\n    });\n    this.context.logger.info(`received first index ${JSON.stringify(indexFrame)}`);\n    // We currently don't bother ingesting this into the same places as `ReceiveVideoStreamIndexTask` as we synchronously attempt a first subscribe\n    // after this task completes and the state isn't quite in the right place to make it work without some refactoring. However that\n    // means that we will always have an initial subscribe without any received videos.\n    this.context.indexFrame = indexFrame;\n  }\n}\n"]}