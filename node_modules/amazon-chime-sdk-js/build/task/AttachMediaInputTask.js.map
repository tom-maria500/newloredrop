{"version":3,"file":"AttachMediaInputTask.js","sourceRoot":"","sources":["../../src/task/AttachMediaInputTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport VideoLogEvent from '../statscollector/VideoLogEvent';\nimport BaseTask from './BaseTask';\n\n/*\n * [[AttachMediaInputTask]] adds audio and video input to peer connection.\n */\nexport default class AttachMediaInputTask extends BaseTask {\n  protected taskName = 'AttachMediaInputTask';\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  async run(): Promise<void> {\n    const transceiverController = this.context.transceiverController;\n    transceiverController.setPeer(this.context.peer);\n    transceiverController.setupLocalTransceivers();\n\n    const audioInput = this.context.activeAudioInput;\n\n    if (audioInput) {\n      const audioTracks = audioInput.getAudioTracks();\n      this.context.logger.info('attaching audio track to peer connection');\n      await transceiverController.setAudioInput(audioTracks.length ? audioTracks[0] : null);\n    } else {\n      await transceiverController.setAudioInput(null);\n      this.context.logger.info('no audio track');\n    }\n\n    this.setAudioCodecPreferences();\n\n    const videoInput = this.context.activeVideoInput;\n    if (videoInput) {\n      const videoTracks = videoInput.getVideoTracks();\n      const videoTrack: MediaStreamTrack | null = videoTracks.length ? videoTracks[0] : null;\n      this.context.logger.info('attaching video track to peer connection');\n      await transceiverController.setVideoInput(videoTrack);\n      if (this.context.enableSimulcast && this.context.videoUplinkBandwidthPolicy) {\n        const encodingParam = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n        transceiverController.setEncodingParameters(encodingParam);\n      }\n      if (videoTrack) {\n        this.context.statsCollector.logVideoEvent(\n          VideoLogEvent.InputAttached,\n          this.context.videoDeviceInformation\n        );\n      }\n    } else {\n      await transceiverController.setVideoInput(null);\n      this.context.logger.info('no video track');\n    }\n\n    this.context.videoSubscriptions = transceiverController.updateVideoTransceivers(\n      this.context.videoStreamIndex,\n      this.context.videosToReceive\n    );\n    // This will cache the current index so that we maintain the values over the course of the subscribe.\n    this.context.videoStreamIndex.subscribeFrameSent();\n  }\n\n  private setAudioCodecPreferences(): void {\n    const supportsSetCodecPreferences =\n      window.RTCRtpTransceiver && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype;\n    const enableAudioRedundancy = this.context.audioProfile.hasRedundancyEnabled();\n    /* istanbul ignore if */\n    if (!supportsSetCodecPreferences) {\n      this.context.logger.warn(`Setting codec preferences not supported`);\n      return;\n    }\n    const audioTransceiver = this.context.transceiverController.localAudioTransceiver();\n    const { codecs } = RTCRtpSender.getCapabilities('audio');\n    this.context.logger.debug(`Available audio codecs ${JSON.stringify(codecs, null, 4)}`);\n    const redCodecIndex = codecs.findIndex(c => c.mimeType === 'audio/red');\n    /* istanbul ignore if */\n    if (!audioTransceiver) {\n      this.context.logger.error(`audio transceiver is null`);\n      return;\n    }\n    if (redCodecIndex >= 0) {\n      const redCodec = codecs[redCodecIndex];\n      codecs.splice(redCodecIndex, 1);\n      if (enableAudioRedundancy) {\n        // Add to the beginning of the codec list to\n        // signify that this is the preferred codec.\n        // Media backend enables RED only if the preference\n        // for RED is highest.\n        codecs.unshift(redCodec);\n        this.context.logger.info('audio/red set as preferred codec');\n      } else {\n        this.context.logger.info('audio/red removed from preferred codec');\n      }\n      audioTransceiver.setCodecPreferences(codecs);\n      return;\n    }\n    this.context.logger.info('audio/red codec not supported');\n  }\n}\n"]}