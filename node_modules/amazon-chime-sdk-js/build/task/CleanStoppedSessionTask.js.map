{"version":3,"file":"CleanStoppedSessionTask.js","sourceRoot":"","sources":["../../src/task/CleanStoppedSessionTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport TaskCanceler from '../taskcanceler/TaskCanceler';\nimport BaseTask from './BaseTask';\n\n/*\n * `CleanStoppedSessionTask` permenently cleans up all components of `AudioVideoControllerState` after a stop call.\n */\nexport default class CleanStoppedSessionTask extends BaseTask {\n  protected taskName = 'CleanStoppedSessionTask';\n  private taskCanceler: TaskCanceler | null = null;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    if (this.taskCanceler) {\n      this.taskCanceler.cancel();\n      this.taskCanceler = null;\n    }\n  }\n\n  async run(): Promise<void> {\n    try {\n      if (this.context.signalingClient.ready()) {\n        this.context.signalingClient.closeConnection();\n        await this.receiveWebSocketClosedEvent();\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      for (const observer of this.context.removableObservers) {\n        observer.removeObserver();\n      }\n      this.context.resetConnectionSpecificState();\n\n      this.context.statsCollector.stop();\n      this.context.statsCollector = null;\n      this.context.connectionMonitor.stop();\n      this.context.connectionMonitor = null;\n\n      if (this.context.videoUplinkBandwidthPolicy.setTransceiverController) {\n        this.context.videoUplinkBandwidthPolicy.setTransceiverController(undefined);\n      }\n      if (this.context.videoDownlinkBandwidthPolicy.bindToTileController) {\n        this.context.videoDownlinkBandwidthPolicy.bindToTileController(undefined);\n      }\n\n      // This state may be reused to join another conference, so clear out all the existing video tiles\n      const tile = this.context.videoTileController.getLocalVideoTile();\n      if (tile) {\n        tile.bindVideoStream('', true, null, null, null, null);\n      }\n      this.context.videoTileController.removeAllVideoTiles();\n    }\n  }\n\n  private receiveWebSocketClosedEvent(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      class Interceptor implements SignalingClientObserver, TaskCanceler {\n        constructor(private signalingClient: SignalingClient) {}\n\n        cancel(): void {\n          this.signalingClient.removeObserver(this);\n          reject(\n            new Error(\n              `CleanStoppedSessionTask got canceled while waiting for the WebSocket closed event`\n            )\n          );\n        }\n\n        handleSignalingClientEvent(event: SignalingClientEvent): void {\n          if (event.type === SignalingClientEventType.WebSocketClosed) {\n            this.signalingClient.removeObserver(this);\n            resolve();\n          }\n        }\n      }\n\n      const interceptor = new Interceptor(this.context.signalingClient);\n      this.taskCanceler = interceptor;\n      this.context.signalingClient.registerObserver(interceptor);\n    });\n  }\n}\n"]}