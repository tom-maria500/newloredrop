{"version":3,"file":"ReceiveAudioInputTask.js","sourceRoot":"","sources":["../../src/task/ReceiveAudioInputTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAGtC,0DAAkC;AAElC;;GAEG;AACH,MAAqB,qBAAsB,SAAQ,kBAAQ;IAGzD,YAAoB,OAAkC;QACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QADJ,YAAO,GAAP,OAAO,CAA2B;QAF5C,aAAQ,GAAG,uBAAuB,CAAC;IAI7C,CAAC;IAEK,GAAG;;;YACP,IAAI,CAAC,CAAA,MAAA,MAAA,IAAI,CAAC,OAAO,CAAC,2BAA2B,0CAAE,IAAI,0CAAE,YAAY,CAAA,EAAE;gBACjE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;gBAC3E,OAAO;aACR;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBACjC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;gBACzD,OAAO;aACR;YACD,IAAI,UAAmC,CAAC;YACxC,IAAI;gBACF,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,CAAC;aAC7E;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;aAC/E;YAED,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAU,CAAC;aAC5C;iBAAM;gBACL,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;aAC7D;;KACF;CACF;AA9BD,wCA8BC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport BaseTask from './BaseTask';\n\n/**\n * [[ReceiveAudioInputTask]] acquires an audio input.\n */\nexport default class ReceiveAudioInputTask extends BaseTask {\n  protected taskName = 'ReceiveAudioInputTask';\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  async run(): Promise<void> {\n    if (!this.context.meetingSessionConfiguration?.urls?.audioHostURL) {\n      this.context.logger.info('No audio connection: not acquiring audio input');\n      return;\n    }\n\n    if (this.context.activeAudioInput) {\n      this.context.logger.info('an active audio input exists');\n      return;\n    }\n    let audioInput: MediaStream | undefined;\n    try {\n      audioInput = await this.context.mediaStreamBroker.acquireAudioInputStream();\n    } catch (error) {\n      this.context.logger.warn('could not acquire audio input from current device');\n    }\n\n    if (audioInput) {\n      this.context.activeAudioInput = audioInput;\n    } else {\n      this.context.logger.warn('an audio input is not available');\n    }\n  }\n}\n"]}