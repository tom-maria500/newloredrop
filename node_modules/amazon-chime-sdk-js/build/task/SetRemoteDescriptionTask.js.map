{"version":3,"file":"SetRemoteDescriptionTask.js","sourceRoot":"","sources":["../../src/task/SetRemoteDescriptionTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport DefaultModality from '../modality/DefaultModality';\nimport SDP from '../sdp/SDP';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport BaseTask from './BaseTask';\n\n/*\n * [[SetRemoteDescriptionTask]] asynchronously calls [[setRemoteDescription]] on the\n * peer connection and then waits for the tracks to be added and for the ICE connection\n * to complete.\n */\nexport default class SetRemoteDescriptionTask extends BaseTask {\n  protected taskName = 'SetRemoteDescriptionTask';\n\n  private cancelICEPromise: () => void;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    if (this.cancelICEPromise) {\n      this.cancelICEPromise();\n    }\n  }\n\n  async run(): Promise<void> {\n    const peer = this.context.peer;\n    if (!peer) {\n      this.logAndThrow('session does not have peer connection; bypass set remote description');\n    }\n\n    let sdp = this.context.sdpAnswer;\n    sdp = new SDP(sdp).withoutServerReflexiveCandidates().sdp;\n    if (this.context.audioProfile) {\n      sdp = new SDP(sdp).withAudioMaxAverageBitrate(this.context.audioProfile.audioBitrateBps).sdp;\n      if (this.context.audioProfile.isStereo()) {\n        sdp = new SDP(sdp).withStereoAudio().sdp;\n      }\n    }\n\n    if (\n      this.context.videoSendCodecPreferences !== undefined &&\n      this.context.videoSendCodecPreferences.length > 0\n    ) {\n      sdp = new SDP(sdp).withVideoSendCodecPreferences(\n        this.context.meetingSupportedVideoSendCodecPreferences !== undefined\n          ? this.context.meetingSupportedVideoSendCodecPreferences\n          : this.context.videoSendCodecPreferences\n      ).sdp;\n    }\n    this.context.prioritizedSendVideoCodecCapabilities = new SDP(\n      sdp\n    ).prioritizedSendVideoCodecCapabilities();\n    this.context.currentVideoSendCodec =\n      this.context.prioritizedSendVideoCodecCapabilities.length > 0\n        ? this.context.prioritizedSendVideoCodecCapabilities[0]\n        : undefined;\n\n    const mediaStream = this.context.activeVideoInput;\n    if (mediaStream !== undefined) {\n      const attendeeId = this.context.audioVideoController.configuration.credentials.attendeeId;\n      const isContent = new DefaultModality(attendeeId).hasModality(\n        DefaultModality.MODALITY_CONTENT\n      );\n      const videoTrack = mediaStream.getVideoTracks()[0];\n      if (isContent) {\n        if (\n          this.context.currentVideoSendCodec?.codecName === VideoCodecCapability.av1Main().codecName\n        ) {\n          // Based on our experiments: \"text\" contentHint gives good coding performance for content share using AV1\n          // @ts-ignore\n          videoTrack.contentHint = 'text';\n          this.logger.info(`Setting content hint to text for AV1, attendee: ${attendeeId}`);\n        } else if (this.context.audioVideoController.configuration.enableSVC) {\n          // Set content hint to `motion` as a workaround for the issue Chrome cannot enable\n          // temporal scalability for screen share\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1433486\n          // @ts-ignore\n          videoTrack.contentHint = 'motion';\n          this.logger.info(`Setting content hint to motion to enable SVC, attendee: ${attendeeId}`);\n        }\n      }\n    }\n\n    this.logger.info(`processed remote description is >>>${sdp}<<<`);\n    const remoteDescription: RTCSessionDescription = {\n      type: 'answer',\n      sdp: sdp,\n      toJSON: null,\n    };\n\n    try {\n      await this.createICEConnectionCompletedPromise(remoteDescription);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  private createICEConnectionCompletedPromise(\n    remoteDescription: RTCSessionDescription\n  ): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      const checkConnectionCompleted = (): void => {\n        if (\n          this.context.peer.iceConnectionState === 'connected' ||\n          this.context.peer.iceConnectionState === 'completed'\n        ) {\n          this.context.peer.removeEventListener(\n            'iceconnectionstatechange',\n            checkConnectionCompleted\n          );\n          resolve();\n        }\n      };\n\n      this.cancelICEPromise = () => {\n        if (this.context.peer) {\n          this.context.peer.removeEventListener(\n            'iceconnectionstatechange',\n            checkConnectionCompleted\n          );\n        }\n        reject(new Error(`${this.name()} got canceled while waiting for the ICE connection state`));\n      };\n\n      this.context.peer.addEventListener('iceconnectionstatechange', checkConnectionCompleted);\n\n      try {\n        await this.context.peer.setRemoteDescription(remoteDescription);\n        this.logger.info('set remote description, waiting for ICE connection');\n        checkConnectionCompleted();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n"]}