{"version":3,"file":"Task.js","sourceRoot":"","sources":["../../src/task/Task.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/*\n * [[Task]] runs a stateful unit of work asynchronously until it completes\n * successfully, fails on its own, or is canceled.\n */\nexport default interface Task {\n  /**\n   * Describes the task for the purpose of logging.\n   */\n  name(): string;\n\n  /**\n   * Attempts to cancel the task. The task may still succeed if it is unable to\n   * be canceled. If the task is canceled, then its [[run]] function will reject\n   * the promise. If [[cancel]] is called before [[run]], then [[run]]\n   * must immediately reject the returned promise. If [[cancel]] is called\n   * after [[run]], then nothing happens.\n   */\n  cancel(): void;\n\n  /**\n   * Runs the unit of work until it either succeeds and fulfills the promise or\n   * fails and rejects the promise. Where possible it should listen for the\n   * cancellation signal, stop working, and reject the promise. If run is called\n   * more than once, it should immediately reject the promise.\n   */\n  run(): Promise<void>;\n\n  /**\n   * Sets the parent of this task for the purpose of logging.\n   */\n  setParent(parentTask: Task): void;\n}\n"]}