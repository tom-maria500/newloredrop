{"version":3,"file":"LeaveAndReceiveLeaveAckTask.js","sourceRoot":"","sources":["../../src/task/LeaveAndReceiveLeaveAckTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAMtC,2GAAmF;AAEnF,oFAA2E;AAE3E,0DAAkC;AAElC;;GAEG;AACH,MAAqB,2BAA4B,SAAQ,kBAAQ;IAI/D,YAAoB,OAAkC;QACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QADJ,YAAO,GAAP,OAAO,CAA2B;QAH5C,aAAQ,GAAG,6BAA6B,CAAC;QAC3C,iBAAY,GAAwB,IAAI,CAAC;IAIjD,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;IACH,CAAC;IAEK,GAAG;;YACP,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE;gBACxC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;gBACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACvC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;aAC9B;QACH,CAAC;KAAA;IAEO,eAAe;QACrB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,WAAW;gBACf,YAAoB,eAAgC,EAAU,MAAc;oBAAxD,oBAAe,GAAf,eAAe,CAAiB;oBAAU,WAAM,GAAN,MAAM,CAAQ;gBAAG,CAAC;gBAEhF,MAAM;oBACJ,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oBAC1C,MAAM,CACJ,IAAI,KAAK,CAAC,uEAAuE,CAAC,CACnF,CAAC;gBACJ,CAAC;gBAED,0BAA0B,CAAC,KAA2B;oBACpD,IAAI,KAAK,CAAC,sBAAsB,EAAE,EAAE;wBAClC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;wBACtE,+BAA+B;wBAC/B,OAAO,EAAE,CAAC;wBACV,OAAO;qBACR;oBAED,IACE,KAAK,CAAC,IAAI,KAAK,kCAAwB,CAAC,mBAAmB;wBAC3D,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,qCAAc,CAAC,IAAI,CAAC,SAAS,EACpD;wBACA,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;wBAClC,OAAO,EAAE,CAAC;qBACX;gBACH,CAAC;aACF;YAED,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvF,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA5DD,8CA4DC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport Logger from '../logger/Logger';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport { SdkSignalFrame } from '../signalingprotocol/SignalingProtocol.js';\nimport TaskCanceler from '../taskcanceler/TaskCanceler';\nimport BaseTask from './BaseTask';\n\n/**\n * [[LeaveAndReceiveLeaveAckTask]] sends a Leave frame and waits for a LeaveAck.\n */\nexport default class LeaveAndReceiveLeaveAckTask extends BaseTask {\n  protected taskName = 'LeaveAndReceiveLeaveAckTask';\n  private taskCanceler: TaskCanceler | null = null;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    if (this.taskCanceler) {\n      this.taskCanceler.cancel();\n      this.taskCanceler = null;\n    }\n  }\n\n  async run(): Promise<void> {\n    if (this.context.signalingClient.ready()) {\n      this.context.signalingClient.leave();\n      this.context.logger.info('sent leave');\n      await this.receiveLeaveAck();\n    }\n  }\n\n  private receiveLeaveAck(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      class Interceptor implements SignalingClientObserver, TaskCanceler {\n        constructor(private signalingClient: SignalingClient, private logger: Logger) {}\n\n        cancel(): void {\n          this.signalingClient.removeObserver(this);\n          reject(\n            new Error(`LeaveAndReceiveLeaveAckTask got canceled while waiting for IndexFrame`)\n          );\n        }\n\n        handleSignalingClientEvent(event: SignalingClientEvent): void {\n          if (event.isConnectionTerminated()) {\n            this.signalingClient.removeObserver(this);\n            this.logger.info('LeaveAndReceiveLeaveAckTask connection terminated');\n            // don't treat this as an error\n            resolve();\n            return;\n          }\n\n          if (\n            event.type === SignalingClientEventType.ReceivedSignalFrame &&\n            event.message.type === SdkSignalFrame.Type.LEAVE_ACK\n          ) {\n            this.signalingClient.removeObserver(this);\n            this.logger.info('got leave ack');\n            resolve();\n          }\n        }\n      }\n\n      const interceptor = new Interceptor(this.context.signalingClient, this.context.logger);\n      this.taskCanceler = interceptor;\n      this.context.signalingClient.registerObserver(interceptor);\n    });\n  }\n}\n"]}