{"version":3,"file":"ReceiveVideoInputTask.js","sourceRoot":"","sources":["../../src/task/ReceiveVideoInputTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport VideoQualitySettings from '../devicecontroller/VideoQualitySettings';\nimport DefaultModality from '../modality/DefaultModality';\nimport { SdkStreamServiceType } from '../signalingprotocol/SignalingProtocol.js';\nimport BaseTask from './BaseTask';\n\n/**\n * [[ReceiveVideoInputTask]] acquires a video input from [[DeviceController]].\n */\nexport default class ReceiveVideoInputTask extends BaseTask {\n  protected taskName = 'ReceiveVideoInputTask';\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  private async checkAndApplyVideoConstraint(\n    isContentAttendee: boolean,\n    mediaStreamTrack: MediaStreamTrack,\n    width: number,\n    height: number,\n    frameRate: number\n  ): Promise<void> {\n    const trackSettings = mediaStreamTrack.getSettings();\n    let videoQualitySettings: VideoQualitySettings;\n\n    if (isContentAttendee) {\n      videoQualitySettings = this.context.meetingSessionConfiguration.meetingFeatures\n        .contentMaxResolution;\n    } else {\n      videoQualitySettings = this.context.meetingSessionConfiguration.meetingFeatures\n        .videoMaxResolution;\n    }\n    if (\n      width > videoQualitySettings.videoWidth ||\n      height > videoQualitySettings.videoHeight ||\n      frameRate > videoQualitySettings.videoFrameRate\n    ) {\n      const constraint: MediaTrackConstraints = {\n        width: { ideal: videoQualitySettings.videoWidth },\n        height: { ideal: videoQualitySettings.videoHeight },\n        frameRate: { ideal: videoQualitySettings.videoFrameRate },\n      };\n      this.context.logger.warn(\n        `Video track (content = ${isContentAttendee}) will be constrained to: ${JSON.stringify(\n          constraint\n        )} to remain below configured video quality settings, trackSettings: ${JSON.stringify(\n          trackSettings\n        )}`\n      );\n      try {\n        await mediaStreamTrack.applyConstraints(constraint);\n      } catch (error) {\n        this.context.logger.info(\n          `Could not apply constraint for video track (content = ${isContentAttendee})`\n        );\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    // TODO: move videoDuplexMode and videoCaptureAndEncodeParameters to video tile controller\n    const receiveEnabled =\n      this.context.videoDuplexMode === SdkStreamServiceType.RX ||\n      this.context.videoDuplexMode === SdkStreamServiceType.DUPLEX;\n    if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n      this.context.videoDuplexMode = receiveEnabled\n        ? SdkStreamServiceType.DUPLEX\n        : SdkStreamServiceType.TX;\n    } else {\n      this.context.videoDuplexMode = receiveEnabled ? SdkStreamServiceType.RX : 0;\n    }\n    this.context.videoCaptureAndEncodeParameter = this.context.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();\n\n    if (!this.context.videoTileController.hasStartedLocalVideoTile()) {\n      this.context.logger.info('has not started local video tile');\n      if (this.context.activeVideoInput) {\n        this.context.activeVideoInput = undefined;\n        // Indicate to the stream index that we are no longer sending video.  We will\n        // no longer be tracking irrelevant local sending bitrates sent via received Bitrate message, nor will\n        // we track any spurious allocated stream IDs from the backend.\n        this.context.videoStreamIndex.integrateUplinkPolicyDecision([]);\n      }\n      return;\n    }\n\n    // TODO: bind after ICE connection started in case of a failure to resubscribe\n    //       or perform error handling to unbind video stream.\n    const localTile = this.context.videoTileController.getLocalVideoTile();\n    let videoInput: MediaStream | undefined = undefined;\n    try {\n      videoInput = await this.context.mediaStreamBroker.acquireVideoInputStream();\n    } catch (error) {\n      this.context.logger.warn('could not acquire video input from current device');\n      this.context.videoTileController.stopLocalVideoTile();\n    }\n    if (this.context.enableSimulcast) {\n      const encodingParams = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n      this.context.videoStreamIndex.integrateUplinkPolicyDecision(\n        Array.from(encodingParams.values())\n      );\n    }\n\n    this.context.activeVideoInput = videoInput;\n    if (videoInput) {\n      const videoTracks = videoInput.getVideoTracks();\n      // There can be a race condition when there are several audioVideo.update calls (e.g., calling\n      // startLocalVideoTile and stopLocalVideoTile at the same time)\n      // that causes the video stream to not contain any video track.\n      // This should recovers in the next update call.\n      if (!videoTracks || videoTracks.length === 0) {\n        return;\n      }\n      const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n      const isContentAttendee = new DefaultModality(attendeeId).hasModality(\n        DefaultModality.MODALITY_CONTENT\n      );\n      const trackSettings = videoTracks[0].getSettings();\n\n      this.checkAndApplyVideoConstraint(\n        isContentAttendee,\n        videoTracks[0],\n        trackSettings.width,\n        trackSettings.height,\n        trackSettings.frameRate\n      );\n\n      const externalUserId = this.context.audioVideoController.configuration.credentials\n        .externalUserId;\n      localTile.bindVideoStream(\n        attendeeId,\n        true,\n        videoInput,\n        trackSettings.width,\n        trackSettings.height,\n        null,\n        externalUserId\n      );\n\n      for (const track of videoTracks) {\n        this.logger.info(`Using video device label=${track.label} id=${track.id}`);\n        this.context.videoDeviceInformation['current_camera_name'] = track.label;\n        this.context.videoDeviceInformation['current_camera_id'] = track.id;\n      }\n    }\n  }\n}\n"]}