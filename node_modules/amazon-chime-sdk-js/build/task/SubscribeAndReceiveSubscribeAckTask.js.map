{"version":3,"file":"SubscribeAndReceiveSubscribeAckTask.js","sourceRoot":"","sources":["../../src/task/SubscribeAndReceiveSubscribeAckTask.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport MeetingSessionStatusCode from '../meetingsession/MeetingSessionStatusCode';\nimport SDP from '../sdp/SDP';\nimport ZLIBTextCompressor from '../sdp/ZLIBTextCompressor';\nimport { serverSideNetworkAdaptionIsNoneOrDefault } from '../signalingclient/ServerSideNetworkAdaption';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientSubscribe from '../signalingclient/SignalingClientSubscribe';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport {\n  SdkSignalFrame,\n  SdkStreamServiceType,\n  SdkSubscribeAckFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport TaskCanceler from '../taskcanceler/TaskCanceler';\nimport { convertVideoPreferencesToSignalingClientVideoSubscriptionConfiguration } from '../videodownlinkbandwidthpolicy/VideoPreferences';\nimport BaseTask from './BaseTask';\n\n/**\n * [[SubscribeAndReceiveSubscribeAckTask]] sends a subscribe frame with the given settings\n * and receives SdkSubscribeAckFrame.\n */\nexport default class SubscribeAndReceiveSubscribeAckTask extends BaseTask {\n  protected taskName = 'SubscribeAndReceiveSubscribeAckTask';\n\n  private taskCanceler: TaskCanceler | null = null;\n  private textCompressor: ZLIBTextCompressor;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n    this.textCompressor = new ZLIBTextCompressor(context.logger);\n  }\n\n  cancel(): void {\n    if (this.taskCanceler) {\n      this.taskCanceler.cancel();\n      this.taskCanceler = null;\n    }\n  }\n\n  async run(): Promise<void> {\n    let localSdp = '';\n    if (this.context.peer && this.context.peer.localDescription) {\n      localSdp = new SDP(this.context.peer.localDescription.sdp).withUnifiedPlanFormat().sdp;\n    }\n\n    if (!this.context.enableSimulcast) {\n      // backward compatibility\n      let frameRate = 0;\n      let maxEncodeBitrateKbps = 0;\n      if (this.context.videoCaptureAndEncodeParameter) {\n        frameRate = this.context.videoCaptureAndEncodeParameter.captureFrameRate();\n        maxEncodeBitrateKbps = this.context.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n      }\n      const param: RTCRtpEncodingParameters = {\n        rid: 'hi',\n        maxBitrate: maxEncodeBitrateKbps * 1000,\n        maxFramerate: frameRate,\n        active: true,\n      };\n\n      this.context.videoStreamIndex.integrateUplinkPolicyDecision([param]);\n    }\n\n    // See comment above `fixUpSubscriptionOrder`\n    const videoSubscriptions = this.fixUpSubscriptionOrder(\n      localSdp,\n      this.context.videoSubscriptions\n    );\n\n    const isSendingStreams: boolean =\n      this.context.videoDuplexMode === SdkStreamServiceType.TX ||\n      this.context.videoDuplexMode === SdkStreamServiceType.DUPLEX;\n\n    let compressedSDPOffer: Uint8Array | null;\n    let localSdpOffer = localSdp;\n    if (\n      this.context.videoUplinkBandwidthPolicy.wantsVideoDependencyDescriptorRtpHeaderExtension ===\n        undefined ||\n      !this.context.videoUplinkBandwidthPolicy.wantsVideoDependencyDescriptorRtpHeaderExtension()\n    ) {\n      // See note above similar code in `SetLocalDescriptionTask`.\n      localSdpOffer = new SDP(localSdpOffer).withoutDependencyDescriptorRtpHeaderExtension().sdp;\n    }\n\n    if (this.context.serverSupportsCompression) {\n      // If the server supports compression, then send the compressed version of the sdp\n      // and exclude the original sdp offer.\n      const prevOffer = this.context.previousSdpOffer ? this.context.previousSdpOffer.sdp : '';\n      compressedSDPOffer = this.textCompressor.compress(localSdpOffer, prevOffer);\n      this.context.logger.info(\n        `Compressed the SDP message from ${localSdpOffer.length} to ${compressedSDPOffer.length} bytes.`\n      );\n      localSdp = '';\n    }\n    this.context.previousSdpOffer = new SDP(localSdp);\n\n    const subscribe = new SignalingClientSubscribe(\n      this.context.meetingSessionConfiguration.credentials.attendeeId,\n      localSdp,\n      this.context.meetingSessionConfiguration.urls.audioHostURL,\n      this.context.realtimeController.realtimeIsLocalAudioMuted(),\n      false,\n      videoSubscriptions,\n      isSendingStreams,\n      this.context.videoStreamIndex.localStreamDescriptions(),\n      // TODO: handle check-in mode, or remove this param\n      true,\n      compressedSDPOffer\n    );\n\n    if (\n      this.context.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption !== undefined &&\n      !serverSideNetworkAdaptionIsNoneOrDefault(\n        this.context.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption()\n      ) &&\n      this.context.videoDownlinkBandwidthPolicy.getVideoPreferences !== undefined\n    ) {\n      // Set initial configuration for the receive streams indicated by the rest of the subscribe\n      subscribe.videoSubscriptionConfiguration = convertVideoPreferencesToSignalingClientVideoSubscriptionConfiguration(\n        this.context,\n        videoSubscriptions.map((streamId: number) => {\n          return streamId === 0 ? 0 : this.context.videoStreamIndex.groupIdForStreamId(streamId);\n        }),\n        this.context.videoDownlinkBandwidthPolicy.getVideoPreferences()\n      );\n    }\n    this.context.logger.info(`sending subscribe: ${JSON.stringify(subscribe)}`);\n    this.context.signalingClient.subscribe(subscribe);\n\n    const subscribeAckFrame = await this.receiveSubscribeAck();\n    this.context.logger.info(`got subscribe ack: ${JSON.stringify(subscribeAckFrame)}`);\n\n    let decompressedText = '';\n    if (subscribeAckFrame.compressedSdpAnswer && subscribeAckFrame.compressedSdpAnswer.length) {\n      decompressedText = this.textCompressor.decompress(\n        subscribeAckFrame.compressedSdpAnswer,\n        this.context.previousSdpAnswerAsString\n      );\n\n      if (decompressedText.length === 0) {\n        this.context.sdpAnswer = '';\n        this.context.previousSdpAnswerAsString = '';\n        this.logAndThrow(`Error occurred while trying to decompress the SDP answer.`);\n      }\n\n      this.context.logger.info(\n        `Decompressed the SDP message from ${subscribeAckFrame.compressedSdpAnswer.length} to ${decompressedText.length} bytes.`\n      );\n      this.context.sdpAnswer = decompressedText;\n    } else {\n      this.context.sdpAnswer = subscribeAckFrame.sdpAnswer;\n    }\n    this.context.previousSdpAnswerAsString = this.context.sdpAnswer;\n\n    this.context.videoStreamIndex.integrateSubscribeAckFrame(subscribeAckFrame);\n  }\n\n  // Our backends currently expect the video subscriptions passed in subscribe to precisely\n  // line up with the media sections, with a zero for any video send or inactive section.\n  //\n  // Firefox occasionally tosses stopped transceivers at the end of the SDP without reason\n  // and in general we don't want to be at the mercy of SDP sections not being in the same\n  // order as `getTransceivers`, so we simply recalculate the array here to enforce that\n  // expected invarient until we refactor our signaling to simply take a mapping of MID to\n  // subscription.\n  //\n  // This only works on Unified Plan SDPs\n  private fixUpSubscriptionOrder(sdp: string, videoSubscriptions: number[]): number[] {\n    if (this.context.transceiverController.getMidForStreamId === undefined) {\n      return videoSubscriptions;\n    }\n\n    const midsToStreamIds = new Map<string, number>();\n    for (const streamId of videoSubscriptions) {\n      // The local description will have been set by the time this task is running, so all\n      // of the transceivers should have `mid` set by now (see comment above `getMidForStreamId`)\n      const mid = this.context.transceiverController.getMidForStreamId(streamId);\n      if (mid === undefined) {\n        if (streamId !== 0) {\n          // Send section or inactive section\n          this.logger.warn(`Could not find MID for stream ID: ${streamId}`);\n        }\n        continue;\n      }\n      midsToStreamIds.set(mid, streamId);\n    }\n\n    const sections = new SDP(sdp).mediaSections();\n    const newSubscriptions: number[] = [];\n    for (const section of sections) {\n      if (section.mediaType !== 'video') {\n        continue;\n      }\n\n      if (section.direction === 'recvonly') {\n        const streamId = midsToStreamIds.get(section.mid);\n        if (streamId === undefined) {\n          this.logger.warn(`Could not find stream ID for MID: ${section.mid}`);\n          continue;\n        }\n        newSubscriptions.push(streamId);\n      } else {\n        newSubscriptions.push(0);\n      }\n    }\n    this.logger.info(\n      `Fixed up ${JSON.stringify(videoSubscriptions)} to ${JSON.stringify(\n        newSubscriptions\n      )} (may be same))}`\n    );\n    return newSubscriptions;\n  }\n\n  private receiveSubscribeAck(): Promise<SdkSubscribeAckFrame> {\n    return new Promise((resolve, reject) => {\n      const context = this.context;\n      class Interceptor implements SignalingClientObserver, TaskCanceler {\n        constructor(private signalingClient: SignalingClient) {}\n\n        cancel(): void {\n          this.signalingClient.removeObserver(this);\n          reject(\n            new Error(\n              `SubscribeAndReceiveSubscribeAckTask got canceled while waiting for SdkSubscribeAckFrame`\n            )\n          );\n        }\n\n        handleSignalingClientEvent(event: SignalingClientEvent): void {\n          if (event.isConnectionTerminated()) {\n            const message = `SubscribeAndReceiveSubscribeAckTask connection was terminated with code ${event.closeCode} and reason: ${event.closeReason}`;\n            context.logger.warn(message);\n\n            let statusCode: MeetingSessionStatusCode = MeetingSessionStatusCode.TaskFailed;\n            if (event.closeCode >= 4500 && event.closeCode < 4600) {\n              statusCode = MeetingSessionStatusCode.SignalingInternalServerError;\n            }\n            context.audioVideoController.handleMeetingSessionStatus(\n              new MeetingSessionStatus(statusCode),\n              new Error(message)\n            );\n            return;\n          }\n\n          if (\n            event.type !== SignalingClientEventType.ReceivedSignalFrame ||\n            event.message.type !== SdkSignalFrame.Type.SUBSCRIBE_ACK\n          ) {\n            return;\n          }\n\n          this.signalingClient.removeObserver(this);\n\n          // @ts-ignore: force cast to SdkSubscribeAckFrame\n          const subackFrame: SdkSubscribeAckFrame = event.message.suback;\n          resolve(subackFrame);\n        }\n      }\n\n      const interceptor = new Interceptor(this.context.signalingClient);\n      this.context.signalingClient.registerObserver(interceptor);\n      this.taskCanceler = interceptor;\n    });\n  }\n}\n"]}