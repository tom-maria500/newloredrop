{"version":3,"file":"ParallelGroupTask.js","sourceRoot":"","sources":["../../src/task/ParallelGroupTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAGtC,0DAAkC;AAGlC;;;GAGG;AACH,MAAqB,iBAAkB,SAAQ,kBAAQ;IACrD,YAAY,MAAc,EAAY,QAAgB,EAAU,kBAA0B;QACxF,KAAK,CAAC,MAAM,CAAC,CAAC;QADsB,aAAQ,GAAR,QAAQ,CAAQ;QAAU,uBAAkB,GAAlB,kBAAkB,CAAQ;QAExF,KAAK,MAAM,IAAI,IAAI,kBAAkB,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtB;IACH,CAAC;IAED,MAAM;QACJ,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACxF,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;IACH,CAAC;IAEK,GAAG;;YACP,MAAM,WAAW,GAAoB,EAAE,CAAC;YACxC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,EAAE,oBAAoB,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACtF,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;aAC9B;YACD,MAAM,QAAQ,GAAa,EAAE,CAAC;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAI;oBACF,MAAM,WAAW,CAAC,CAAC,CAAC,CAAC;iBACtB;gBAAC,OAAO,GAAG,EAAE;oBACZ,QAAQ,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;iBACnF;gBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,uBAAuB,IAAI,CAAC,IAAI,EAAE,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAC5F,CAAC;aACH;YACD,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvB,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,CAAC,WAAW,CAAC,uBAAuB,IAAI,CAAC,IAAI,EAAE,sBAAsB,cAAc,EAAE,CAAC,CAAC;aAC5F;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACnE,CAAC;KAAA;CACF;AAtCD,oCAsCC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport BaseTask from './BaseTask';\nimport Task from './Task';\n\n/**\n * [[ParallelGroupTask]] runs a set of tasks in parallel. When canceled, it\n * stops any currently running tasks.\n */\nexport default class ParallelGroupTask extends BaseTask {\n  constructor(logger: Logger, protected taskName: string, private tasksToRunParallel: Task[]) {\n    super(logger);\n    for (const task of tasksToRunParallel) {\n      task.setParent(this);\n    }\n  }\n\n  cancel(): void {\n    for (const task of this.tasksToRunParallel) {\n      this.logger.info(`canceling parallel group task ${this.name()} subtask ${task.name()}`);\n      task.cancel();\n    }\n  }\n\n  async run(): Promise<void> {\n    const taskResults: Promise<void>[] = [];\n    for (const task of this.tasksToRunParallel) {\n      this.logger.info(`parallel group task ${this.name()} running subtask ${task.name()}`);\n      taskResults.push(task.run());\n    }\n    const failures: string[] = [];\n    for (let i = 0; i < taskResults.length; i++) {\n      try {\n        await taskResults[i];\n      } catch (err) {\n        failures.push(`task ${this.tasksToRunParallel[i].name()} failed: ${err.message}`);\n      }\n      this.logger.info(\n        `parallel group task ${this.name()} completed subtask ${this.tasksToRunParallel[i].name()}`\n      );\n    }\n    if (failures.length > 0) {\n      const failureMessage = failures.join(', ');\n      this.logAndThrow(`parallel group task ${this.name()} failed for tasks: ${failureMessage}`);\n    }\n    this.logger.info(`parallel group task ${this.name()} completed`);\n  }\n}\n"]}