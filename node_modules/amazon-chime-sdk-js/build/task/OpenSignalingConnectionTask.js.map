{"version":3,"file":"OpenSignalingConnectionTask.js","sourceRoot":"","sources":["../../src/task/OpenSignalingConnectionTask.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAItC,2HAAmG;AAEnG,2GAAmF;AAGnF,0DAAkC;AAElC,MAAqB,2BAA4B,SAAQ,kBAAQ;IAK/D,YAAoB,OAAkC;QACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QADJ,YAAO,GAAP,OAAO,CAA2B;QAJ5C,aAAQ,GAAG,6BAA6B,CAAC;QAE3C,iBAAY,GAAwB,IAAI,CAAC;IAIjD,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;IACH,CAAC;IAEK,GAAG;;YACP,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC;YAE/D,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,cAAc,CACzC,IAAI,0CAAgC,CAClC,aAAa,CAAC,IAAI,CAAC,YAAY,EAC/B,aAAa,CAAC,WAAW,CAAC,SAAS,CACpC,CACF,CAAC;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC/B,IAAI;gBACF,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC1C,MAAM,wBAAwB;wBAC5B,YAAoB,eAAgC;4BAAhC,oBAAe,GAAf,eAAe,CAAiB;wBAAG,CAAC;wBAExD,MAAM;4BACJ,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;4BAC1C,MAAM,CACJ,IAAI,KAAK,CACP,qFAAqF,CACtF,CACF,CAAC;wBACJ,CAAC;wBAED,0BAA0B,CAAC,KAA2B;4BACpD,QAAQ,KAAK,CAAC,IAAI,EAAE;gCAClB,KAAK,kCAAwB,CAAC,aAAa;oCACzC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oCAC1C,OAAO,EAAE,CAAC;oCACV,MAAM;gCACR,KAAK,kCAAwB,CAAC,eAAe;oCAC3C,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oCAC1C,MAAM,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;oCACjD,MAAM;6BACT;wBACH,CAAC;qBACF;oBACD,MAAM,WAAW,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;oBAC/E,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;oBAC3D,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;gBAClC,CAAC,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;oBAAS;gBACR,IAAI,CAAC,OAAO,CAAC,uBAAuB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,qCAAqC,IAAI,CAAC,OAAO,CAAC,uBAAuB,KAAK,CAC/E,CAAC;aACH;QACH,CAAC;KAAA;CACF;AAlED,8CAkEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoControllerState from '../audiovideocontroller/AudioVideoControllerState';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientConnectionRequest from '../signalingclient/SignalingClientConnectionRequest';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport TaskCanceler from '../taskcanceler/TaskCanceler';\nimport BaseTask from './BaseTask';\n\nexport default class OpenSignalingConnectionTask extends BaseTask {\n  protected taskName = 'OpenSignalingConnectionTask';\n\n  private taskCanceler: TaskCanceler | null = null;\n\n  constructor(private context: AudioVideoControllerState) {\n    super(context.logger);\n  }\n\n  cancel(): void {\n    if (this.taskCanceler) {\n      this.taskCanceler.cancel();\n      this.taskCanceler = null;\n    }\n  }\n\n  async run(): Promise<void> {\n    const configuration = this.context.meetingSessionConfiguration;\n\n    this.context.signalingClient.openConnection(\n      new SignalingClientConnectionRequest(\n        configuration.urls.signalingURL,\n        configuration.credentials.joinToken\n      )\n    );\n    const startTimeMs = Date.now();\n    try {\n      await new Promise<void>((resolve, reject) => {\n        class WebSocketOpenInterceptor implements SignalingClientObserver, TaskCanceler {\n          constructor(private signalingClient: SignalingClient) {}\n\n          cancel(): void {\n            this.signalingClient.removeObserver(this);\n            reject(\n              new Error(\n                `OpenSignalingConnectionTask got canceled while waiting to open signaling connection`\n              )\n            );\n          }\n\n          handleSignalingClientEvent(event: SignalingClientEvent): void {\n            switch (event.type) {\n              case SignalingClientEventType.WebSocketOpen:\n                this.signalingClient.removeObserver(this);\n                resolve();\n                break;\n              case SignalingClientEventType.WebSocketFailed:\n                this.signalingClient.removeObserver(this);\n                reject(new Error('WebSocket connection failed'));\n                break;\n            }\n          }\n        }\n        const interceptor = new WebSocketOpenInterceptor(this.context.signalingClient);\n        this.context.signalingClient.registerObserver(interceptor);\n        this.taskCanceler = interceptor;\n      });\n    } catch (error) {\n      throw error;\n    } finally {\n      this.context.signalingOpenDurationMs = Math.round(Date.now() - startTimeMs);\n      this.logger.info(\n        `Opening signaling connection took ${this.context.signalingOpenDurationMs} ms`\n      );\n    }\n  }\n}\n"]}