{"version":3,"file":"DefaultVideoTileController.js","sourceRoot":"","sources":["../../src/videotilecontroller/DefaultVideoTileController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoController from '../audiovideocontroller/AudioVideoController';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport VideoQualitySettings from '../devicecontroller/VideoQualitySettings';\nimport DefaultDevicePixelRatioMonitor from '../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor';\nimport DevicePixelRatioWindowSource from '../devicepixelratiosource/DevicePixelRatioWindowSource';\nimport Logger from '../logger/Logger';\nimport { Maybe } from '../utils/Types';\nimport DefaultVideoTile from '../videotile/DefaultVideoTile';\nimport VideoTile from '../videotile/VideoTile';\nimport VideoTileState from '../videotile/VideoTileState';\nimport VideoTileFactory from '../videotilefactory/VideoTileFactory';\nimport VideoTileController from './VideoTileController';\n\nexport default class DefaultVideoTileController implements VideoTileController {\n  private tileMap = new Map<number, VideoTile>();\n  private nextTileId: number = 1;\n  private currentLocalTile: VideoTile | null = null;\n  private devicePixelRatioMonitor: undefined | DefaultDevicePixelRatioMonitor;\n  private currentPausedTilesByIds: Set<number> = new Set<number>();\n  keepLastFrameWhenPaused: boolean | undefined = false;\n\n  constructor(\n    private tileFactory: VideoTileFactory,\n    private audioVideoController: AudioVideoController,\n    private logger: Logger\n  ) {\n    this.keepLastFrameWhenPaused = audioVideoController.configuration.keepLastFrameWhenPaused;\n  }\n\n  private createDevicePixelRatioMonitorIfNeeded(): void {\n    if (this.devicePixelRatioMonitor) {\n      return;\n    }\n    this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor(\n      new DevicePixelRatioWindowSource(),\n      this.logger\n    );\n  }\n\n  private async discardDevicePixelRatioMonitorIfNotNeeded(): Promise<void> {\n    if (this.tileMap.size || !this.devicePixelRatioMonitor) {\n      return;\n    }\n    const monitor = this.devicePixelRatioMonitor;\n    this.devicePixelRatioMonitor = undefined;\n    return monitor.destroy();\n  }\n\n  bindVideoElement(tileId: number, videoElement: HTMLVideoElement | null): void {\n    const tile = this.getVideoTile(tileId);\n    if (tile === null) {\n      this.logger.warn(`Ignoring video element binding for unknown tile id ${tileId}`);\n      return;\n    }\n    tile.bindVideoElement(videoElement);\n  }\n\n  unbindVideoElement(tileId: number, cleanUpVideoElement: boolean = true): void {\n    const tile = this.getVideoTile(tileId);\n    if (tile === null) {\n      this.logger.warn(`Ignoring video element unbinding for unknown tile id ${tileId}`);\n      return;\n    }\n    this.logger.info('Unbinding the video element');\n    const videoElement = tile.stateRef().boundVideoElement;\n    tile.bindVideoElement(null);\n    if (cleanUpVideoElement) {\n      this.logger.info('Cleaning up the video element');\n      DefaultVideoTile.disconnectVideoStreamFromVideoElement(videoElement, false);\n    }\n  }\n\n  startLocalVideoTile(): number {\n    if (\n      this.audioVideoController.configuration.meetingFeatures.videoMaxResolution ===\n      VideoQualitySettings.VideoDisabled\n    ) {\n      this.logger.warn('Could not start camera video because max video resolution was set to None');\n      return -1;\n    }\n    const tile = this.findOrCreateLocalVideoTile();\n    this.currentLocalTile.stateRef().localTileStarted = true;\n\n    this.audioVideoController.update({ needsRenegotiation: true });\n    return tile.id();\n  }\n\n  stopLocalVideoTile(): void {\n    if (!this.currentLocalTile) {\n      return;\n    }\n    this.currentLocalTile.stateRef().localTileStarted = false;\n    this.currentLocalTile.bindVideoStream(\n      this.audioVideoController.configuration.credentials.attendeeId,\n      true,\n      null,\n      null,\n      null,\n      null,\n      this.audioVideoController.configuration.credentials.externalUserId\n    );\n    this.audioVideoController.update({ needsRenegotiation: true });\n  }\n\n  hasStartedLocalVideoTile(): boolean {\n    return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);\n  }\n\n  removeLocalVideoTile(): void {\n    if (this.currentLocalTile) {\n      this.removeVideoTile(this.currentLocalTile.id());\n    }\n  }\n\n  getLocalVideoTile(): VideoTile | null {\n    return this.currentLocalTile;\n  }\n\n  pauseVideoTile(tileId: number): void {\n    const tile = this.getVideoTile(tileId);\n    if (tile) {\n      if (!this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.add(tileId);\n      }\n      tile.pause();\n    }\n  }\n\n  unpauseVideoTile(tileId: number): void {\n    const tile = this.getVideoTile(tileId);\n    if (tile) {\n      if (this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.delete(tileId);\n      }\n      tile.unpause();\n    }\n  }\n\n  getVideoTile(tileId: number): VideoTile | null {\n    return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;\n  }\n\n  getVideoTileArea(tile: VideoTile): number {\n    const state = tile.state();\n    let tileHeight = 0;\n    let tileWidth = 0;\n    if (state.boundVideoElement) {\n      tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;\n      tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;\n    }\n    return tileHeight * tileWidth;\n  }\n\n  getAllRemoteVideoTiles(): VideoTile[] {\n    const result = new Array<VideoTile>();\n    this.tileMap.forEach((tile: VideoTile, tileId: number): void => {\n      if (!this.currentLocalTile || tileId !== this.currentLocalTile.id()) {\n        result.push(tile);\n      }\n    });\n    return result;\n  }\n\n  getAllVideoTiles(): VideoTile[] {\n    return Array.from(this.tileMap.values());\n  }\n\n  addVideoTile(localTile: boolean = false): VideoTile {\n    const tileId = this.nextTileId;\n    this.nextTileId += 1;\n    this.createDevicePixelRatioMonitorIfNeeded();\n    const tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);\n    this.tileMap.set(tileId, tile);\n    return tile;\n  }\n\n  removeVideoTile(tileId: number): void {\n    if (!this.tileMap.has(tileId)) {\n      return;\n    }\n    const tile = this.tileMap.get(tileId);\n    if (this.currentLocalTile === tile) {\n      this.currentLocalTile = null;\n    }\n    tile.destroy();\n    this.tileMap.delete(tileId);\n    this.audioVideoController.forEachObserver((observer: AudioVideoObserver) => {\n      Maybe.of(observer.videoTileWasRemoved).map(f => f.bind(observer)(tileId));\n    });\n    this.discardDevicePixelRatioMonitorIfNotNeeded();\n  }\n\n  removeVideoTilesByAttendeeId(attendeeId: string): number[] {\n    const tilesRemoved: number[] = [];\n    for (const tile of this.getAllVideoTiles()) {\n      const state = tile.state();\n      if (state.boundAttendeeId === attendeeId) {\n        this.removeVideoTile(state.tileId);\n        tilesRemoved.push(state.tileId);\n      }\n    }\n    return tilesRemoved;\n  }\n\n  removeAllVideoTiles(): void {\n    const tileIds = Array.from(this.tileMap.keys());\n    for (const tileId of tileIds) {\n      this.removeVideoTile(tileId);\n    }\n  }\n\n  sendTileStateUpdate(tileState: VideoTileState): void {\n    this.audioVideoController.forEachObserver((observer: AudioVideoObserver) => {\n      Maybe.of(observer.videoTileDidUpdate).map(f => f.bind(observer)(tileState));\n    });\n  }\n\n  haveVideoTilesWithStreams(): boolean {\n    for (const tile of this.getAllVideoTiles()) {\n      if (tile.state().boundVideoStream) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  haveVideoTileForAttendeeId(attendeeId: string): boolean {\n    return !!this.getVideoTileForAttendeeId(attendeeId);\n  }\n\n  getVideoTileForAttendeeId(attendeeId: string): VideoTile | undefined {\n    for (const tile of this.getAllVideoTiles()) {\n      const state = tile.state();\n      if (state.boundAttendeeId === attendeeId) {\n        return tile;\n      }\n    }\n    return undefined;\n  }\n\n  captureVideoTile(tileId: number): ImageData | null {\n    const tile = this.getVideoTile(tileId);\n    if (!tile) {\n      return null;\n    }\n    return tile.capture();\n  }\n\n  private findOrCreateLocalVideoTile(): VideoTile | null {\n    if (this.currentLocalTile) {\n      return this.currentLocalTile;\n    }\n    this.currentLocalTile = this.addVideoTile(true);\n    this.currentLocalTile.bindVideoStream(\n      this.audioVideoController.configuration.credentials.attendeeId,\n      true,\n      null,\n      null,\n      null,\n      null,\n      this.audioVideoController.configuration.credentials.externalUserId\n    );\n    return this.currentLocalTile;\n  }\n}\n"]}