{"version":3,"file":"VideoTileController.js","sourceRoot":"","sources":["../../src/videotilecontroller/VideoTileController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoTile from '../videotile/VideoTile';\nimport VideoTileState from '../videotile/VideoTileState';\n\n/**\n * [[VideoTileController]] allows one to manipulate how the underlying media\n * streams are assigned to video elements. The caller is responsible for laying\n * out video elements as desired and binding tile ids received from the observer\n * in the [[videoTileUpdated]] callbacks.\n */\nexport default interface VideoTileController {\n  keepLastFrameWhenPaused?: boolean | undefined;\n\n  /**\n   * Binds the video element to the tile if it exists for the provided tileId.\n   * This should also be called any time the layout of the video element changes, for example, when changing its\n   * dimensions.\n   */\n  bindVideoElement(tileId: number, videoElement: HTMLVideoElement): void;\n\n  /**\n   * Unbinds the video element from the tile if it exists for the provided `tileId`.\n   * The video tile's bounded video element and that element's `width` and `height` are set to null.\n   * @param cleanUpVideoElement By default, the bounded video element's `srcObject` is also set to null.\n   * Pass `false` for `cleanUpVideoElement`, if you do not intend to set the bounded video element's `srcObject` to `null`.\n   * This does not remove the provided `tileId` mapping from the tile map in the [[DefaultVideoTileController]].\n   * To remove the mapping and destroy the tile for this `tileId`, you can use [[removeVideoTile]].\n   */\n  unbindVideoElement(tileId: number, cleanUpVideoElement?: boolean): void;\n\n  /**\n   * Starts sharing the local video tile by creating a new video tile if one does not already exist.\n   * Binds the created local video tile to the local video stream and then returns its tile id.\n   */\n  startLocalVideoTile(): number;\n\n  /**\n   * Stops a local video tile, if it exists.\n   * The bounded video stream associated with the local video tile is released and set to null.\n   */\n  stopLocalVideoTile(): void;\n\n  /**\n   * Returns whether the local video tile has been started.\n   */\n  hasStartedLocalVideoTile(): boolean;\n\n  /**\n   * Stops and removes a local video tile, if it exists.\n   * This calls [[removeVideoTile]] internally with the current local tileId.\n   */\n  removeLocalVideoTile(): void;\n\n  /**\n   * Returns the current local video tile if it exists\n   */\n  getLocalVideoTile(): VideoTile | null;\n\n  /**\n   * Pauses the video tile if it exists and sends the updated video tile state\n   * to the meeting session's AudioVideoObserver’s [[videoTileDidUpdate]] callback.\n   * This API is intended to be called on the remote videos.\n   * If called on a local video tile, then the tile will no longer be updated,\n   * but the local video source will continue to be sent into the meeting.\n   */\n  pauseVideoTile(tileId: number): void;\n\n  /**\n   * Unpauses the video tile if it exists and sends the updated video tile state\n   * to the meeting session's AudioVideoObserver’s [[videoTileDidUpdate]] callback.\n   * This API is intended to be called on the remote videos and has no effect on the local video.\n   * When called on a remote video tileId, the remote video source will start getting the updates if paused earlier.\n   */\n  unpauseVideoTile(tileId: number): void;\n\n  /**\n   * Looks up a video tile from its tile id\n   */\n  getVideoTile(tileId: number): VideoTile | null;\n\n  /**\n   * Gets a video tile area in physical pixels\n   */\n  getVideoTileArea(tile: VideoTile): number;\n\n  /**\n   * Returns the remote video tile\n   */\n  getAllRemoteVideoTiles(): VideoTile[];\n\n  /**\n   * Get all video tiles.\n   */\n  getAllVideoTiles(): VideoTile[];\n\n  /**\n   * Returns a new tile. The tile id is assigned automatically.\n   */\n  addVideoTile(): VideoTile;\n\n  /**\n   * Disconnects the video source from the video element bounded with the video tile,\n   * removes the tile by the tileId and the AudioVideoObserver’s [[videoTileWasRemoved]] callback\n   * is called with the removed tile id.\n   */\n  removeVideoTile(tileId: number): void;\n\n  /**\n   * Removes any tiles that have the given attendee id and returns the tile ids of the\n   *  tiles removed\n   */\n  removeVideoTilesByAttendeeId(attendeeId: string): number[];\n\n  /**\n   * Removes all the tiles.\n   */\n  removeAllVideoTiles(): void;\n\n  /**\n   * Broadcasts a tile state update to the session observers.\n   */\n  sendTileStateUpdate(tileState: VideoTileState): void;\n\n  /**\n   * Returns whether at least one video tile has a bound media stream.\n   */\n  haveVideoTilesWithStreams(): boolean;\n\n  /**\n   * Returns whether an attendeeId is associated with a video tile\n   */\n  haveVideoTileForAttendeeId(attendeeId: string): boolean;\n\n  /**\n   * Returns the video tile associated with the given attendeeId\n   * @param attendeeId The attendeeId to retrieve the video tile\n   */\n  getVideoTileForAttendeeId?(attendeeId: string): VideoTile | undefined;\n\n  /**\n   * This can be used to capture the image data for a given tile.\n   */\n  captureVideoTile?(tileId: number): ImageData | null;\n}\n"]}