{"version":3,"file":"BackgroundReplacementVideoFrameProcessor.js","sourceRoot":"","sources":["../../src/backgroundreplacementprocessor/BackgroundReplacementVideoFrameProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BackgroundFilterSpec from '../backgroundfilter/BackgroundFilterSpec';\nimport BackgroundFilterVideoFrameProcessor from '../backgroundfilter/BackgroundFilterVideoFrameProcessor';\nimport BackgroundReplacementProcessor from '../backgroundreplacementprocessor/BackgroundReplacementProcessor';\nimport ConsoleLogger from '../logger/ConsoleLogger';\nimport LogLevel from '../logger/LogLevel';\nimport NoOpVideoFrameProcessor from '../videoframeprocessor/NoOpVideoFrameProcessor';\nimport BackgroundReplacementFilter from './BackgroundReplacementFilter';\nimport BackgroundReplacementOptions from './BackgroundReplacementOptions';\n\n/**\n * No-op implementation of the background replacement processor. An instance of this class will be returned when a user attempts\n * to create a background replacement processor when it is not supported.\n */\n/** @internal */\nclass NoOpBackgroundReplacementProcessor\n  extends NoOpVideoFrameProcessor\n  implements BackgroundReplacementProcessor {\n  /**\n   * no-op\n   * @returns\n   */\n  async loadAssets(): Promise<void> {\n    return;\n  }\n\n  /**\n   * no-op\n   */\n  addObserver(): void {}\n\n  /**\n   * no-op\n   */\n  removeObserver(): void {}\n\n  /**\n   * no-op\n   */\n  async setImageBlob(): Promise<void> {\n    return;\n  }\n}\n\n/**\n * [[BackgroundReplacementVideoFrameProcessor]]\n * Creates a background replacement processor which identifies the foreground person and replaces the background.\n */\nexport default class BackgroundReplacementVideoFrameProcessor extends BackgroundFilterVideoFrameProcessor {\n  /**\n   * A factory method that will call the private constructor to instantiate the processor and asynchronously\n   * initialize the worker, wasm, and ML models. Upon completion of the initialization the promise will either\n   * be resolved or rejected.\n   * @param spec The spec defines the assets that will be used for adding background filter to a frame\n   * @param imagePath The background replacement image path\n   */\n  static async create(\n    spec?: BackgroundFilterSpec,\n    options?: BackgroundReplacementOptions\n  ): Promise<BackgroundReplacementProcessor | undefined> {\n    spec = this.resolveSpec(spec);\n    options = this.resolveOptions(options);\n    await this.resolveOptionsAsync(options);\n    const { logger } = options;\n\n    const supported = await BackgroundReplacementVideoFrameProcessor.isSupported(spec, options);\n    // if background replacement is not supported do not initialize. The processor will become a no op if not supported.\n    if (!supported) {\n      logger.warn('Using no-op processor because background replacement is not supported');\n      return new NoOpBackgroundReplacementProcessor();\n    }\n\n    logger.info('Using background replacement filter');\n    const processor = new BackgroundReplacementFilter(spec, options);\n\n    await processor.loadAssets();\n    return processor;\n  }\n\n  /**\n   * Based on the options that are passed in set defaults for options\n   * @param options  the options that are passed in\n   * @returns An updated set of options with defaults set\n   */\n  protected static resolveOptions(\n    options: BackgroundReplacementOptions = {}\n  ): BackgroundReplacementOptions {\n    const processorOptions: BackgroundReplacementOptions = { ...options };\n\n    if (!processorOptions.logger) {\n      processorOptions.logger = new ConsoleLogger('BackgroundReplacementProcessor', LogLevel.INFO);\n    }\n\n    return super.resolveOptions(processorOptions);\n  }\n\n  private static async resolveOptionsAsync(options: BackgroundReplacementOptions): Promise<void> {\n    if (!options.imageBlob) {\n      const canvas = document.createElement('canvas');\n      canvas.width = 100;\n      canvas.height = 100;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = 'blue';\n      ctx.fillRect(0, 0, 100, 100);\n      const blob = await new Promise<Blob>(resolve => {\n        canvas.toBlob(resolve);\n      });\n      options.imageBlob = blob;\n    }\n    return;\n  }\n\n  /**\n   * This method will detect the environment in which it is being used and determine if background\n   * replacement can be used.\n   * @param spec The {@link BackgroundFilterSpec} spec that will be used to initialize assets\n   * @param options options such as logger and imagePath\n   * @returns a boolean promise that will resolve to true if supported and false if not\n   */\n  static async isSupported(\n    spec?: BackgroundFilterSpec,\n    options?: BackgroundReplacementOptions\n  ): Promise<boolean> {\n    spec = this.resolveSpec(spec);\n    options = this.resolveOptions(options);\n    await this.resolveOptionsAsync(options);\n    const imageBlob = options.imageBlob;\n    const imageUrl = URL.createObjectURL(imageBlob);\n    try {\n      await BackgroundReplacementFilter.loadImage(imageUrl);\n    } catch (e) {\n      options.logger.info(`Failed to fetch load replacement image ${e.message}`);\n      return false;\n    } finally {\n      URL.revokeObjectURL(imageUrl);\n    }\n    return super.isSupported(spec, options);\n  }\n}\n"]}