{"version":3,"file":"BackgroundReplacementFilter.js","sourceRoot":"","sources":["../../src/backgroundreplacementprocessor/BackgroundReplacementFilter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport BackgroundFilterProcessor from '../backgroundfilter/BackgroundFilterProcessor';\nimport BackgroundFilterSpec from '../backgroundfilter/BackgroundFilterSpec';\nimport EventController from '../eventcontroller/EventController';\nimport VideoFXEventAttributes from '../eventcontroller/VideoFXEventAttributes';\nimport BackgroundReplacementOptions from './BackgroundReplacementOptions';\nimport BackgroundReplacementProcessor from './BackgroundReplacementProcessor';\nimport BackgroundReplacementVideoFrameProcessorDelegate from './BackgroundReplacementVideoFrameProcessorDelegate';\nimport BackgroundReplacementVideoFrameProcessorObserver from './BackgroundReplacementVideoFrameProcessorObserver';\n\n/**\n * [[BackgroundReplacementFilter]] implements [[BackgroundReplacementProcessor]].\n * It's a background replacement processor and input is passed into a worker that will apply a segmentation\n * to separate the foreground from the background. Then the background will have a replacement applied.\n *\n * The [[BackgroundReplacementProcessorProvided]] uses WASM and TensorFlow Lite to apply replacement of the\n * background image.\n */\n/** @internal */\nexport default class BackgroundReplacementFilter\n  extends BackgroundFilterProcessor\n  implements BackgroundReplacementProcessor {\n  private replacementBlob?: Blob;\n  private replacementObjectUrl?: string;\n  /**\n   * A constructor that will apply default values if spec and strength are not provided.\n   * If no spec is provided the selfie segmentation model is used with default paths to CDN for the\n   * worker and wasm files used to process each frame.\n   * @param spec The spec defines the assets that will be used for adding background filter to a frame\n   * @param options The background replacement image path\n   */\n  constructor(spec: BackgroundFilterSpec, options: BackgroundReplacementOptions) {\n    super(\n      'background replacement',\n      spec,\n      options,\n      new BackgroundReplacementVideoFrameProcessorDelegate()\n    );\n\n    this.replacementBlob = options.imageBlob;\n\n    this.logger.info('BackgroundReplacement processor successfully created');\n    this.logger.info(`BackgroundReplacement spec: ${this.stringify(this.spec)}`);\n    this.logger.info(`BackgroundReplacement options: ${this.stringify(options)}`);\n  }\n\n  async setImageBlob(blob: Blob): Promise<void> {\n    this.replacementBlob = blob;\n    this.replacementImage = await BackgroundReplacementFilter.loadImage(\n      this.createReplacementObjectUrl()\n    );\n  }\n\n  initOnFirstExecution(): void {}\n\n  drawImageWithMask(inputCanvas: HTMLCanvasElement, mask: ImageData): void {\n    // Mask will not be set until the worker has completed handling the predict event. Until the first frame is processed,\n    // the whole frame will be replaced.\n    if (!mask) {\n      mask = new ImageData(this.spec.model.input.width, this.spec.model.input.height);\n    }\n\n    const scaledCtx = this.scaledCanvas.getContext('2d');\n\n    scaledCtx.putImageData(mask, 0, 0);\n\n    const { canvasCtx, targetCanvas } = this;\n    const { width, height } = targetCanvas;\n\n    // draw the mask\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, width, height);\n    canvasCtx.drawImage(this.scaledCanvas, 0, 0, width, height);\n\n    // Only overwrite existing pixels.\n    canvasCtx.globalCompositeOperation = 'source-in';\n    // draw image over mask...\n    canvasCtx.drawImage(inputCanvas, 0, 0, width, height);\n\n    // draw under person\n    canvasCtx.globalCompositeOperation = 'destination-over';\n\n    canvasCtx.drawImage(this.replacementImage, 0, 0, targetCanvas.width, targetCanvas.height);\n    canvasCtx.restore();\n  }\n\n  /* istanbul ignore next */\n  private static loadImageExecutor(\n    resolve: (image: HTMLImageElement) => void,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    reject: (reason?: any) => void,\n    imageUrl: string\n  ): void {\n    const image = new Image();\n    image.crossOrigin = 'Anonymous';\n    image.addEventListener(\n      'load',\n      () => {\n        resolve(image);\n      },\n      false\n    );\n    image.addEventListener(\n      'error',\n      error => {\n        reject(new Error(`Could not load replacement image ${image.src}: ${error.message}`));\n      },\n      false\n    );\n    image.src = imageUrl;\n  }\n\n  /** @internal */\n  static async loadImage(imageUrl: string): Promise<HTMLImageElement> {\n    return new Promise<HTMLImageElement>((resolve, reject) =>\n      this.loadImageExecutor(resolve, reject, imageUrl)\n    );\n  }\n\n  private revokeReplacementObjectUrl(): void {\n    if (this.replacementObjectUrl) {\n      URL.revokeObjectURL(this.replacementObjectUrl);\n    }\n  }\n\n  private createReplacementObjectUrl(): string {\n    this.revokeReplacementObjectUrl();\n    this.replacementObjectUrl = URL.createObjectURL(this.replacementBlob);\n    return this.replacementObjectUrl;\n  }\n\n  /**\n   * This method initializes all of the resource necessary to process background replacement. It returns\n   * a promise and resolves or rejects the promise once the initialization is complete.\n   * @returns\n   * @throws An error will be thrown\n   */\n  async loadAssets(): Promise<void> {\n    this.replacementImage = await BackgroundReplacementFilter.loadImage(\n      this.createReplacementObjectUrl()\n    );\n    super.loadAssets();\n    return;\n  }\n\n  addObserver(observer: BackgroundReplacementVideoFrameProcessorObserver): void {\n    this.delegate.addObserver(observer);\n  }\n\n  removeObserver(observer: BackgroundReplacementVideoFrameProcessorObserver): void {\n    this.delegate.removeObserver(observer);\n  }\n\n  async destroy(): Promise<void> {\n    super.destroy();\n    this.revokeReplacementObjectUrl();\n  }\n\n  /** @internal */\n  setEventController(eventController: EventController): void {\n    /*\n    if this is a first time we set the eventController, need to publish the current BackgroundFilterConfig.\n    Otherwise, just set the eventController.\n    */\n    if (this.eventController) {\n      this.eventController = eventController;\n    } else {\n      this.eventController = eventController;\n      this.publishBackgroundFilterEvent();\n    }\n  }\n\n  private publishBackgroundFilterEvent(): void {\n    const backgroundFilterEventAttributes: VideoFXEventAttributes = {\n      backgroundBlurEnabled: 'false',\n      backgroundBlurStrength: 'low',\n      backgroundReplacementEnabled: 'true',\n      backgroundFilterVersion: 1,\n    };\n    this.eventController.publishEvent(\n      'backgroundFilterConfigSelected',\n      backgroundFilterEventAttributes\n    );\n  }\n}\n"]}