{"version":3,"file":"BackgroundReplacementProcessor.js","sourceRoot":"","sources":["../../src/backgroundreplacementprocessor/BackgroundReplacementProcessor.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoFrameProcessor from '../videoframeprocessor/VideoFrameProcessor';\nimport BackgroundReplacementVideoFrameProcessorObserver from './BackgroundReplacementVideoFrameProcessorObserver';\n\n/**\n * Interface to define extra methods that need to be implemented for background replacement processing\n */\nexport default interface BackgroundReplacementProcessor extends VideoFrameProcessor {\n  /**\n   * Add an observer to receive notifications about Amazon background replacement processor events.\n   * See {@link BackgroundReplacementVideoFrameProcessorObserver} for details.\n   * If the observer has already been added, this method call has no effect.\n   */\n  addObserver(observer: BackgroundReplacementVideoFrameProcessorObserver): void;\n\n  /**\n   * Remove an existing observer. If the observer has not been previously {@link\n   * BackgroundReplacementVideoFrameProcessorObserver.addObserver|added}, this method call has no effect.\n   */\n  removeObserver(observer: BackgroundReplacementVideoFrameProcessorObserver): void;\n\n  /**\n   * The method will allow the builder to update the image blob mid stream.\n   * @param blob\n   */\n  setImageBlob(blob: Blob): Promise<void>;\n\n  /** @internal */\n  /**\n   * internal method to load assets like WASM files, web workers, and ML models.\n   */\n  loadAssets(): Promise<void>;\n}\n"]}