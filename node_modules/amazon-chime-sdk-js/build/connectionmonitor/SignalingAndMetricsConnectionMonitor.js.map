{"version":3,"file":"SignalingAndMetricsConnectionMonitor.js","sourceRoot":"","sources":["../../src/connectionmonitor/SignalingAndMetricsConnectionMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioVideoController from '../audiovideocontroller/AudioVideoController';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport ClientMetricReport from '../clientmetricreport/ClientMetricReport';\nimport ConnectionHealthData from '../connectionhealthpolicy/ConnectionHealthData';\nimport PingPong from '../pingpong/PingPong';\nimport PingPongObserver from '../pingpongobserver/PingPongObserver';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport StatsCollector from '../statscollector/StatsCollector';\nimport { Maybe } from '../utils/Types';\nimport ConnectionMonitor from './ConnectionMonitor';\n\nexport default class SignalingAndMetricsConnectionMonitor\n  implements ConnectionMonitor, PingPongObserver, AudioVideoObserver {\n  private isActive = false;\n  private hasSeenValidCandidatePairMetricsBefore = false;\n  private lastTotalBytesReceived = 0;\n  private lastTotalStunMessagesReceived = 0;\n\n  constructor(\n    private audioVideoController: AudioVideoController,\n    private realtimeController: RealtimeController,\n    private connectionHealthData: ConnectionHealthData,\n    private pingPong: PingPong,\n    private statsCollector: StatsCollector\n  ) {\n    this.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(\n      (signalStrength: number) => {\n        if (this.isActive) {\n          this.receiveSignalStrengthChange(signalStrength);\n        }\n      }\n    );\n  }\n\n  start(): void {\n    this.isActive = true;\n    this.pingPong.addObserver(this);\n    this.pingPong.start();\n    this.audioVideoController.addObserver(this);\n  }\n\n  stop(): void {\n    this.isActive = false;\n    this.pingPong.removeObserver(this);\n    this.pingPong.stop();\n    this.audioVideoController.removeObserver(this);\n  }\n\n  receiveSignalStrengthChange(signalStrength: number): void {\n    if (signalStrength === 0) {\n      this.connectionHealthData.setLastNoSignalTimestampMs(Date.now());\n    } else if (signalStrength <= 0.5) {\n      this.connectionHealthData.setLastWeakSignalTimestampMs(Date.now());\n    } else {\n      this.connectionHealthData.setLastGoodSignalTimestampMs(Date.now());\n    }\n    this.updateConnectionHealth();\n  }\n\n  didReceivePong(_id: number, latencyMs: number, clockSkewMs: number): void {\n    this.connectionHealthData.setConsecutiveMissedPongs(0);\n    this.statsCollector.logLatency('ping_pong', latencyMs);\n    this.statsCollector.logLatency('ping_pong_clock_skew', clockSkewMs);\n    this.updateConnectionHealth();\n  }\n\n  didMissPongs(): void {\n    this.connectionHealthData.setConsecutiveMissedPongs(\n      this.connectionHealthData.consecutiveMissedPongs + 1\n    );\n    this.updateConnectionHealth();\n  }\n\n  metricsDidReceive(clientMetricReport: ClientMetricReport): void {\n    let audioPacketsReceived = 0;\n    let audiofractionPacketsLostInbound = 0;\n    const metricReport = clientMetricReport.getObservableMetrics();\n    const potentialAudioPacketsReceived = metricReport.audioPacketsReceived;\n    const potentialAudioFractionPacketsLostInbound = metricReport.audioPacketsReceivedFractionLoss;\n\n    const audioSpeakerDelayMs = metricReport.audioSpeakerDelayMs;\n\n    // Firefox does not presently have aggregated bandwidth estimation\n    if (typeof audioSpeakerDelayMs === 'number' && !isNaN(audioSpeakerDelayMs)) {\n      this.connectionHealthData.setAudioSpeakerDelayMs(audioSpeakerDelayMs);\n    }\n\n    // To get the total bytes received, including RTCP, we need to sum up\n    // all candidate pair metrics (in case the candidate pair changes).\n    //\n    // The stats collector currently doesn't account for candidate pair stats\n    // so we just use the raw report for now.\n    const webrtcReport = clientMetricReport.getRTCStatsReport();\n\n    // We use candidate pair bytes received as a proxy for packets received\n    // since not all versions of all browsers have 'packetsReceived' for candidate pairs\n    let totalBytesReceived = 0;\n    // We additionally check STUN messages received, in case backend is not sending RTP/RTCP\n    // which may happen in None attendee capability edge cases.\n    let totalStunMessagedReceived = 0;\n    webrtcReport.forEach(stat => {\n      if (stat.type === 'candidate-pair') {\n        if (stat.bytesReceived) {\n          totalBytesReceived += stat.bytesReceived;\n        }\n        if (stat.requestsReceived) {\n          totalStunMessagedReceived += stat.requestsReceived;\n        }\n        if (stat.responsesReceived) {\n          totalStunMessagedReceived += stat.responsesReceived;\n        }\n      }\n    });\n    const bytesReceived = totalBytesReceived - this.lastTotalBytesReceived;\n    this.lastTotalBytesReceived = totalBytesReceived;\n    const stunMessagesReceived = totalStunMessagedReceived - this.lastTotalStunMessagesReceived;\n    this.lastTotalStunMessagesReceived = totalStunMessagedReceived;\n    if (\n      typeof potentialAudioPacketsReceived === 'number' &&\n      typeof potentialAudioFractionPacketsLostInbound === 'number'\n    ) {\n      audioPacketsReceived = potentialAudioPacketsReceived;\n      audiofractionPacketsLostInbound = potentialAudioFractionPacketsLostInbound;\n      if (\n        audioPacketsReceived < 0 ||\n        audiofractionPacketsLostInbound < 0 ||\n        bytesReceived < 0 ||\n        stunMessagesReceived < 0\n      ) {\n        // The stats collector or logic above may emit negative numbers on this metric after reconnect\n        // which we should not use.\n        return;\n      }\n    } else {\n      return;\n    }\n    this.addToMinuteWindow(\n      this.connectionHealthData.packetsReceivedInLastMinute,\n      audioPacketsReceived\n    );\n    this.addToMinuteWindow(\n      this.connectionHealthData.fractionPacketsLostInboundInLastMinute,\n      audiofractionPacketsLostInbound\n    );\n\n    if (bytesReceived > 0 || stunMessagesReceived > 0) {\n      this.hasSeenValidCandidatePairMetricsBefore = true;\n      this.connectionHealthData.setConsecutiveStatsWithNoPackets(0);\n    } else if (this.hasSeenValidCandidatePairMetricsBefore) {\n      this.connectionHealthData.setConsecutiveStatsWithNoPackets(\n        this.connectionHealthData.consecutiveStatsWithNoPackets + 1\n      );\n    }\n    if (audioPacketsReceived === 0 || audiofractionPacketsLostInbound > 0) {\n      this.connectionHealthData.setLastPacketLossInboundTimestampMs(Date.now());\n    }\n    if (typeof metricReport.audioPacketsSent === 'number') {\n      this.updateAudioPacketsSentInConnectionHealth(metricReport.audioPacketsSent);\n    }\n    this.updateVideoEncodingHealth(clientMetricReport);\n    this.updateConnectionHealth();\n  }\n\n  private updateAudioPacketsSentInConnectionHealth(audioPacketsSent: number): void {\n    if (audioPacketsSent > 0) {\n      this.connectionHealthData.setConsecutiveStatsWithNoAudioPacketsSent(0);\n    } else {\n      this.connectionHealthData.setConsecutiveStatsWithNoAudioPacketsSent(\n        this.connectionHealthData.consecutiveStatsWithNoAudioPacketsSent + 1\n      );\n    }\n  }\n\n  private updateVideoEncodingHealth(clientMetricReport: ClientMetricReport): void {\n    const isLocalVideoTileStarted = this.audioVideoController.videoTileController.hasStartedLocalVideoTile();\n    const ssrc = clientMetricReport.getVideoUpstreamSsrc();\n    if (!isLocalVideoTileStarted || ssrc === null) {\n      this.connectionHealthData.setIsVideoEncoderHardware(false);\n      this.connectionHealthData.setVideoEncodingTimePerFrameInMs(0);\n      this.connectionHealthData.setCpuLimitationDuration(0);\n      this.connectionHealthData.setVideoInputFps(0);\n      this.connectionHealthData.setVideoEncodeFps(0);\n      return;\n    }\n\n    const isHardwareEncoder = clientMetricReport.getObservableVideoMetricValue(\n      'videoUpstreamEncoderImplementation',\n      ssrc\n    );\n    const videoEncodingTimeInMs = clientMetricReport.getObservableVideoMetricValue(\n      'videoUpstreamTotalEncodeTimePerSecond',\n      ssrc\n    );\n    const cpuLimitationDuration = clientMetricReport.getObservableVideoMetricValue(\n      'videoUpstreamCpuQualityLimitationDurationPerSecond',\n      ssrc\n    );\n    const videoInputFps = clientMetricReport.getObservableVideoMetricValue(\n      'videoUpstreamFramesInputPerSecond',\n      ssrc\n    );\n    const videoEncodeFps = clientMetricReport.getObservableVideoMetricValue(\n      'videoUpstreamFramesEncodedPerSecond',\n      ssrc\n    );\n    const videoEncodingTimePerFrameInMs =\n      videoEncodeFps > 0 ? videoEncodingTimeInMs / videoEncodeFps : 0;\n\n    this.connectionHealthData.setIsVideoEncoderHardware(Boolean(isHardwareEncoder));\n    this.connectionHealthData.setVideoEncodingTimeInMs(videoEncodingTimeInMs);\n    this.connectionHealthData.setVideoEncodingTimePerFrameInMs(videoEncodingTimePerFrameInMs);\n    this.connectionHealthData.setCpuLimitationDuration(cpuLimitationDuration);\n    this.connectionHealthData.setVideoInputFps(videoInputFps);\n    this.connectionHealthData.setVideoEncodeFps(videoEncodeFps);\n  }\n\n  private addToMinuteWindow(array: number[], value: number): void {\n    array.unshift(value);\n    if (array.length > 60) {\n      array.pop();\n    }\n  }\n\n  private updateConnectionHealth(): void {\n    this.audioVideoController.forEachObserver((observer: AudioVideoObserver) => {\n      Maybe.of(observer.connectionHealthDidChange).map(f =>\n        f.bind(observer)(this.connectionHealthData.clone())\n      );\n    });\n  }\n}\n"]}