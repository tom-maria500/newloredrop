{"version":3,"file":"ClientMetricReport.js","sourceRoot":"","sources":["../../src/clientmetricreport/ClientMetricReport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport { SdkMetric, SdkStreamDimension } from '../signalingprotocol/SignalingProtocol.js';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport Direction from './ClientMetricReportDirection';\nimport MediaType from './ClientMetricReportMediaType';\nimport GlobalMetricReport from './GlobalMetricReport';\nimport StreamMetricReport from './StreamMetricReport';\n\n// eslint-disable-next-line\nexport type CustomStatsReport = any;\n\n/**\n * [[ClientMetricReport]] gets the media metrics used by ConnectionMonitor to\n * update connection health data.\n */\nexport default class ClientMetricReport {\n  globalMetricReport: GlobalMetricReport = new GlobalMetricReport();\n  streamMetricReports: { [id: number]: StreamMetricReport } = {};\n  // Will contain the raw RTCStatsReport from RTCPeerConnection.getStats() API.\n  rtcStatsReport: RTCStatsReport = {} as RTCStatsReport;\n  // Will contain any custom metric reports generated by the SDK.\n  customStatsReports: CustomStatsReport[] = [];\n  currentTimestampMs: number = 0;\n  previousTimestampMs: number = 0;\n  currentSsrcs: { [id: number]: number } = {};\n\n  private overriddenObservableMetrics: Map<string, number> = new Map();\n\n  constructor(\n    private logger: Logger,\n    private videoStreamIndex?: VideoStreamIndex,\n    private selfAttendeeId?: string\n  ) {}\n\n  /**\n   *  Metric transform functions\n   */\n\n  identityValue = (metricName?: string, ssrc?: number): number => {\n    const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n    return Number(metricReport.currentMetrics[metricName]);\n  };\n\n  decoderLossPercent = (metricName?: string, ssrc?: number): number => {\n    const metricReport = this.streamMetricReports[ssrc];\n    const concealedSamples =\n      metricReport.currentMetrics['concealedSamples'] -\n      (metricReport.previousMetrics['concealedSamples'] || 0);\n    const totalSamplesReceived =\n      metricReport.currentMetrics['totalSamplesReceived'] -\n      (metricReport.previousMetrics['totalSamplesReceived'] || 0);\n    if (totalSamplesReceived <= 0) {\n      return 0;\n    }\n    const decoderAbnormal = totalSamplesReceived - concealedSamples;\n    if (decoderAbnormal <= 0) {\n      return 0;\n    }\n    return (concealedSamples / totalSamplesReceived) * 100;\n  };\n\n  packetLossPercent = (sourceMetricName?: string, ssrc?: number): number => {\n    const metricReport = this.streamMetricReports[ssrc];\n    const sentOrReceived =\n      metricReport.currentMetrics[sourceMetricName] -\n      (metricReport.previousMetrics[sourceMetricName] || 0);\n    const lost =\n      metricReport.currentMetrics['packetsLost'] -\n      (metricReport.previousMetrics['packetsLost'] || 0);\n    const total = sentOrReceived + lost;\n    if (total <= 0 || lost <= 0) {\n      return 0;\n    }\n    return (lost * 100) / total;\n  };\n\n  jitterBufferMs = (metricName?: string, ssrc?: number): number => {\n    const metricReport = this.streamMetricReports[ssrc];\n    const jitterBufferDelay =\n      metricReport.currentMetrics['jitterBufferDelay'] -\n      (metricReport.previousMetrics['jitterBufferDelay'] || 0);\n    const jitterBufferEmittedCount =\n      metricReport.currentMetrics['jitterBufferEmittedCount'] -\n      (metricReport.previousMetrics['jitterBufferEmittedCount'] || 0);\n    if (jitterBufferDelay <= 0) {\n      return 0;\n    }\n    if (jitterBufferEmittedCount <= 0) {\n      return 0;\n    }\n    return (jitterBufferDelay / jitterBufferEmittedCount) * 1000;\n  };\n\n  countPerSecond = (metricName?: string, ssrc?: number): number => {\n    const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n    let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n    if (intervalSeconds <= 0) {\n      return 0;\n    }\n    if (this.previousTimestampMs <= 0) {\n      intervalSeconds = 1;\n    }\n    const diff =\n      metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0);\n    if (diff <= 0) {\n      return 0;\n    }\n    return Math.trunc(diff / intervalSeconds);\n  };\n\n  bitsPerSecond = (metricName?: string, ssrc?: number): number => {\n    const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n    let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n    if (intervalSeconds <= 0) {\n      return 0;\n    }\n    if (this.previousTimestampMs <= 0) {\n      intervalSeconds = 1;\n    }\n    const diff =\n      (metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0)) *\n      8;\n    if (diff <= 0) {\n      return 0;\n    }\n    return Math.trunc(diff / intervalSeconds);\n  };\n\n  secondsToMilliseconds = (metricName?: string, ssrc?: number): number => {\n    const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n    return Number(metricReport.currentMetrics[metricName] * 1000);\n  };\n\n  averageTimeSpentPerSecondInMilliseconds = (metricName?: string, ssrc?: number): number => {\n    const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n    let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n    if (intervalSeconds <= 0) {\n      return 0;\n    }\n    if (this.previousTimestampMs <= 0) {\n      intervalSeconds = 1;\n    }\n    const diff =\n      metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0);\n    if (diff <= 0) {\n      return 0;\n    }\n    return (diff * 1000) / intervalSeconds;\n  };\n\n  averageCpuQualityLimitationDurationPerSecondInMilliseconds = (\n    metricName?: string,\n    ssrc?: number\n  ): number => {\n    const metricReport = this.streamMetricReports[ssrc];\n    if (\n      metricReport.previousObjectMetrics[metricName] === undefined ||\n      metricReport.currentObjectMetrics[metricName] === undefined\n    ) {\n      return NaN;\n    }\n    let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n    if (intervalSeconds <= 0) {\n      return 0;\n    }\n    if (this.previousTimestampMs <= 0) {\n      intervalSeconds = 1;\n    }\n\n    let previousValue = 0;\n    let currentValue = 0;\n    for (const [key, value] of Object.entries(metricReport.previousObjectMetrics[metricName])) {\n      if (key === 'cpu') {\n        previousValue = value;\n      }\n    }\n    for (const [key, value] of Object.entries(metricReport.currentObjectMetrics[metricName])) {\n      if (key === 'cpu') {\n        currentValue = value;\n      }\n    }\n\n    const diff = currentValue - previousValue;\n    if (diff <= 0) {\n      return 0;\n    }\n    return (diff * 1000) / intervalSeconds;\n  };\n\n  isHardwareImplementation = (metricName?: string, ssrc?: number): number => {\n    const metricReport = this.streamMetricReports[ssrc];\n    if (metricReport.currentStringMetrics[metricName] === undefined) {\n      return NaN;\n    }\n    const implName = String(metricReport.currentStringMetrics[metricName]);\n    const hasHwName =\n      implName.includes('ExternalDecoder') ||\n      implName.includes('ExternalEncoder') ||\n      implName.includes('EncodeAccelerator') ||\n      implName.includes('DecodeAccelerator');\n    const isFallback = implName.includes('fallback from');\n    return hasHwName && !isFallback ? 1 : 0;\n  };\n\n  /**\n   *  Canonical and derived metric maps\n   */\n\n  readonly globalMetricMap: {\n    [id: string]: {\n      transform?: (metricName?: string, ssrc?: number) => number;\n      type?: SdkMetric.Type;\n      source?: string;\n    };\n  } = {\n    retransmittedBytesSent: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_RETRANSMIT_BITRATE,\n    },\n    totalEncodedBytesTarget: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_TARGET_ENCODER_BITRATE,\n    },\n    totalPacketSendDelay: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_BUCKET_DELAY_MS,\n    },\n    packetsDiscardedOnSend: {\n      transform: this.countPerSecond,\n      type: SdkMetric.Type.SOCKET_DISCARDED_PPS,\n    },\n\n    availableIncomingBitrate: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH,\n    },\n    availableOutgoingBitrate: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH,\n    },\n    currentRoundTripTime: {\n      transform: this.secondsToMilliseconds,\n      type: SdkMetric.Type.STUN_RTT_MS,\n    },\n    // Upstream AudioLevel is collected through RTCAudioSourceStats\n    // (https://developer.mozilla.org/en-US/docs/Web/API/RTCAudioSourceStats)\n    // That one doesn't have ssrc field so we must collect it through Global Metric Report\n    audioLevel: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.RTC_MIC_AUDIO_LEVEL,\n      source: 'audioLevel',\n    },\n  };\n\n  readonly audioUpstreamMetricMap: {\n    [id: string]: {\n      transform?: (metricName?: string, ssrc?: number) => number;\n      type?: SdkMetric.Type;\n      source?: string;\n    };\n  } = {\n    jitter: { transform: this.secondsToMilliseconds, type: SdkMetric.Type.RTC_MIC_JITTER_MS },\n    packetsSent: { transform: this.countPerSecond, type: SdkMetric.Type.RTC_MIC_PPS },\n    bytesSent: { transform: this.bitsPerSecond, type: SdkMetric.Type.RTC_MIC_BITRATE },\n    roundTripTime: { transform: this.secondsToMilliseconds, type: SdkMetric.Type.RTC_MIC_RTT_MS },\n    packetsLost: {\n      transform: this.packetLossPercent,\n      type: SdkMetric.Type.RTC_MIC_FRACTION_PACKET_LOST_PERCENT,\n      source: 'packetsSent',\n    },\n  };\n\n  readonly audioDownstreamMetricMap: {\n    [id: string]: {\n      transform?: (metricName?: string, ssrc?: number) => number;\n      type?: SdkMetric.Type;\n      source?: string;\n    };\n  } = {\n    concealedSamples: {\n      transform: this.countPerSecond,\n    },\n    totalSamplesReceived: {\n      transform: this.countPerSecond,\n    },\n    decoderLoss: {\n      transform: this.decoderLossPercent,\n      type: SdkMetric.Type.RTC_SPK_FRACTION_DECODER_LOSS_PERCENT,\n    },\n    packetsReceived: { transform: this.countPerSecond, type: SdkMetric.Type.RTC_SPK_PPS },\n    packetsLost: {\n      transform: this.packetLossPercent,\n      type: SdkMetric.Type.RTC_SPK_FRACTION_PACKET_LOST_PERCENT,\n      source: 'packetsReceived',\n    },\n    jitter: { transform: this.secondsToMilliseconds, type: SdkMetric.Type.RTC_SPK_JITTER_MS },\n    jitterBufferDelay: {\n      transform: this.countPerSecond,\n    },\n    jitterBufferEmittedCount: {\n      transform: this.countPerSecond,\n    },\n    jitterBufferMs: {\n      transform: this.jitterBufferMs,\n      type: SdkMetric.Type.RTC_SPK_JITTER_BUFFER_MS,\n    },\n    bytesReceived: { transform: this.bitsPerSecond, type: SdkMetric.Type.RTC_SPK_BITRATE },\n    audioLevel: { transform: this.identityValue, type: SdkMetric.Type.RTC_SPK_AUDIO_LEVEL },\n    totalAudioPacketsLost: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.RTC_SPK_TOTAL_LOST,\n    },\n    totalAudioPacketsExpected: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.RTC_SPK_TOTAL_EXPECTED,\n    },\n    totalAudioPacketsRecoveredRed: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.RTC_SPK_TOTAL_RECOVERED_RED,\n    },\n    totalAudioPacketsRecoveredFec: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.RTC_SPK_TOTAL_RECOVERED_FEC,\n    },\n  };\n\n  readonly videoUpstreamMetricMap: {\n    [id: string]: {\n      transform?: (metricName?: string, ssrc?: number) => number;\n      type?: SdkMetric.Type;\n      source?: string;\n    };\n  } = {\n    roundTripTime: {\n      transform: this.secondsToMilliseconds,\n      type: SdkMetric.Type.VIDEO_SENT_RTT_MS,\n    },\n    nackCount: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_NACKS_RECEIVED },\n    pliCount: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_PLIS_RECEIVED },\n    firCount: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_FIRS_RECEIVED },\n    framesPerSecond: { transform: this.identityValue, type: SdkMetric.Type.VIDEO_INPUT_FPS },\n    framesEncoded: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_ENCODE_FPS },\n    packetsSent: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_SENT_PPS },\n    packetsLost: {\n      transform: this.packetLossPercent,\n      type: SdkMetric.Type.VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT,\n      source: 'packetsSent',\n    },\n    bytesSent: { transform: this.bitsPerSecond, type: SdkMetric.Type.VIDEO_SENT_BITRATE },\n    qpSum: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_SENT_QP_SUM },\n    frameHeight: { transform: this.identityValue, type: SdkMetric.Type.VIDEO_ENCODE_HEIGHT },\n    frameWidth: { transform: this.identityValue, type: SdkMetric.Type.VIDEO_ENCODE_WIDTH },\n    jitter: {\n      transform: this.secondsToMilliseconds,\n    },\n    totalEncodeTime: {\n      transform: this.averageTimeSpentPerSecondInMilliseconds,\n      type: SdkMetric.Type.VIDEO_ENCODE_MS,\n    },\n    encoderImplementation: {\n      transform: this.isHardwareImplementation,\n      type: SdkMetric.Type.VIDEO_ENCODER_IS_HARDWARE,\n    },\n    qualityLimitationDurations: {\n      transform: this.averageCpuQualityLimitationDurationPerSecondInMilliseconds,\n      type: SdkMetric.Type.VIDEO_QUALITY_LIMITATION_DURATION_CPU,\n    },\n    videoCodecDegradationHighEncodeCpu: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_CODEC_DEGRADATION_HIGH_ENCODE_CPU,\n    },\n    videoCodecDegradationEncodeFailure: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_CODEC_DEGRADATION_ENCODE_FAILURE,\n    },\n  };\n\n  readonly videoDownstreamMetricMap: {\n    [id: string]: {\n      transform?: (metricName?: string, ssrc?: number) => number;\n      type?: SdkMetric.Type;\n      source?: string;\n    };\n  } = {\n    packetsReceived: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_RECEIVED_PPS },\n    packetsLost: {\n      transform: this.packetLossPercent,\n      type: SdkMetric.Type.VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT,\n      source: 'packetsReceived',\n    },\n    framesReceived: {\n      transform: this.identityValue,\n      type: SdkMetric.Type.VIDEO_RECEIVED_FPS,\n    },\n    framesDecoded: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_DECODE_FPS },\n    nackCount: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_NACKS_SENT },\n    firCount: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_FIRS_SENT },\n    pliCount: { transform: this.countPerSecond, type: SdkMetric.Type.VIDEO_PLIS_SENT },\n    bytesReceived: { transform: this.bitsPerSecond, type: SdkMetric.Type.VIDEO_RECEIVED_BITRATE },\n    jitter: {\n      transform: this.secondsToMilliseconds,\n      type: SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS,\n    },\n    jitterBufferDelay: {\n      transform: this.countPerSecond,\n    },\n    jitterBufferEmittedCount: {\n      transform: this.countPerSecond,\n    },\n    jitterBufferMs: {\n      transform: this.jitterBufferMs,\n      type: SdkMetric.Type.VIDEO_JITTER_BUFFER_MS,\n    },\n    qpSum: {\n      transform: this.countPerSecond,\n      type: SdkMetric.Type.VIDEO_RECEIVED_QP_SUM,\n    },\n    frameHeight: { transform: this.identityValue, type: SdkMetric.Type.VIDEO_DECODE_HEIGHT },\n    frameWidth: { transform: this.identityValue, type: SdkMetric.Type.VIDEO_DECODE_WIDTH },\n    totalDecodeTime: {\n      transform: this.averageTimeSpentPerSecondInMilliseconds,\n      type: SdkMetric.Type.VIDEO_DECODE_MS,\n    },\n    decoderImplementation: {\n      transform: this.isHardwareImplementation,\n      type: SdkMetric.Type.VIDEO_DECODER_IS_HARDWARE,\n    },\n    totalFreezesDuration: {\n      transform: this.averageTimeSpentPerSecondInMilliseconds,\n      type: SdkMetric.Type.VIDEO_FREEZE_DURATION,\n    },\n    freezeCount: {\n      transform: this.countPerSecond,\n      type: SdkMetric.Type.VIDEO_FREEZE_COUNT,\n    },\n    totalPausesDuration: {\n      transform: this.averageTimeSpentPerSecondInMilliseconds,\n      type: SdkMetric.Type.VIDEO_PAUSE_DURATION,\n    },\n    pauseCount: {\n      transform: this.countPerSecond,\n      type: SdkMetric.Type.VIDEO_PAUSE_COUNT,\n    },\n    framesDropped: {\n      transform: this.countPerSecond,\n      type: SdkMetric.Type.VIDEO_DROPPED_FPS,\n    },\n  };\n\n  getMetricMap(\n    mediaType?: MediaType,\n    direction?: Direction\n  ): {\n    [id: string]: {\n      transform?: (metricName?: string, ssrc?: number) => number;\n      type?: SdkMetric.Type;\n      source?: string;\n    };\n  } {\n    switch (mediaType) {\n      case MediaType.AUDIO:\n        switch (direction) {\n          case Direction.UPSTREAM:\n            return this.audioUpstreamMetricMap;\n          case Direction.DOWNSTREAM:\n            return this.audioDownstreamMetricMap;\n        }\n      case MediaType.VIDEO:\n        switch (direction) {\n          case Direction.UPSTREAM:\n            return this.videoUpstreamMetricMap;\n          case Direction.DOWNSTREAM:\n            return this.videoDownstreamMetricMap;\n        }\n      default:\n        return this.globalMetricMap;\n    }\n  }\n\n  /**\n   *  Dimensions derived from metric\n   */\n  readonly streamDimensionMap: {\n    [id: string]: SdkStreamDimension.Type;\n  } = {\n    encoderImplementation: SdkStreamDimension.Type.VIDEO_ENCODER_NAME,\n    decoderImplementation: SdkStreamDimension.Type.VIDEO_DECODER_NAME,\n  };\n\n  getStreamDimensionMap(): {\n    [id: string]: SdkStreamDimension.Type;\n  } {\n    return this.streamDimensionMap;\n  }\n\n  /**\n   *  media Stream metrics\n   */\n\n  readonly observableVideoMetricSpec: {\n    [id: string]: {\n      source: string;\n      media?: MediaType;\n      dir?: Direction;\n    };\n  } = {\n    videoUpstreamBitrate: {\n      source: 'bytesSent',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamPacketsSent: {\n      source: 'packetsSent',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamPacketLossPercent: {\n      source: 'packetsLost',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamFramesEncodedPerSecond: {\n      source: 'framesEncoded',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamFramesInputPerSecond: {\n      source: 'framesPerSecond',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamFrameHeight: {\n      source: 'frameHeight',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamFrameWidth: {\n      source: 'frameWidth',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamJitterMs: {\n      source: 'jitter',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamRoundTripTimeMs: {\n      source: 'roundTripTime',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamEncoderImplementation: {\n      source: 'encoderImplementation',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamTotalEncodeTimePerSecond: {\n      source: 'totalEncodeTime',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamCpuQualityLimitationDurationPerSecond: {\n      source: 'qualityLimitationDurations',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    videoDownstreamBitrate: {\n      source: 'bytesReceived',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamPacketLossPercent: {\n      source: 'packetsLost',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamPacketsReceived: {\n      source: 'packetsReceived',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamFramesDecodedPerSecond: {\n      source: 'framesDecoded',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamFrameHeight: {\n      source: 'frameHeight',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamFrameWidth: {\n      source: 'frameWidth',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamJitterMs: {\n      source: 'jitter',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n    videoDownstreamDelayMs: {\n      source: 'jitterBufferMs',\n      media: MediaType.VIDEO,\n      dir: Direction.DOWNSTREAM,\n    },\n  };\n\n  /**\n   * Observable metrics and related APIs\n   */\n\n  readonly observableMetricSpec: {\n    [id: string]: {\n      source: string;\n      media?: MediaType;\n      dir?: Direction;\n    };\n  } = {\n    audioPacketsReceived: {\n      source: 'packetsReceived',\n      media: MediaType.AUDIO,\n      dir: Direction.DOWNSTREAM,\n    },\n    audioPacketsReceivedFractionLoss: {\n      source: 'packetsLost',\n      media: MediaType.AUDIO,\n      dir: Direction.DOWNSTREAM,\n    },\n    audioDecoderLoss: {\n      source: 'decoderLoss',\n      media: MediaType.AUDIO,\n      dir: Direction.DOWNSTREAM,\n    },\n    audioPacketsSent: {\n      source: 'packetsSent',\n      media: MediaType.AUDIO,\n      dir: Direction.UPSTREAM,\n    },\n    audioPacketLossPercent: {\n      source: 'packetsLost',\n      media: MediaType.AUDIO,\n      dir: Direction.UPSTREAM,\n    },\n    audioUpstreamRoundTripTimeMs: {\n      source: 'roundTripTime',\n      media: MediaType.AUDIO,\n      dir: Direction.UPSTREAM,\n    },\n    videoUpstreamBitrate: { source: 'bytesSent', media: MediaType.VIDEO, dir: Direction.UPSTREAM },\n    videoPacketSentPerSecond: {\n      source: 'packetsSent',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    audioSpeakerDelayMs: {\n      source: 'jitterBufferMs',\n      media: MediaType.AUDIO,\n      dir: Direction.DOWNSTREAM,\n    },\n    audioUpstreamJitterMs: {\n      source: 'jitter',\n      media: MediaType.AUDIO,\n      dir: Direction.UPSTREAM,\n    },\n    audioDownstreamJitterMs: {\n      source: 'jitter',\n      media: MediaType.AUDIO,\n      dir: Direction.DOWNSTREAM,\n    },\n    nackCountReceivedPerSecond: {\n      source: 'nackCount',\n      media: MediaType.VIDEO,\n      dir: Direction.UPSTREAM,\n    },\n    availableOutgoingBitrate: { source: 'availableOutgoingBitrate' },\n    availableIncomingBitrate: { source: 'availableIncomingBitrate' },\n    currentRoundTripTimeMs: { source: 'currentRoundTripTime' },\n    // Downstream AudioLevel is collected through RTCInboundRtpStreamStats\n    // (https://developer.mozilla.org/en-US/docs/Web/API/RTCInboundRtpStreamStats)\n    audioDownstreamLevel: {\n      source: 'audioLevel',\n      media: MediaType.AUDIO,\n      dir: Direction.DOWNSTREAM,\n    },\n    // Upstream AudioLevel is collected through RTCAudioSourceStats\n    // (https://developer.mozilla.org/en-US/docs/Web/API/RTCAudioSourceStats)\n    // That one doesn't have ssrc field so we must collect it through Global Metric Report\n    audioUpstreamLevel: {\n      source: 'audioLevel',\n    },\n  };\n\n  /**\n   * Returns the value of the specific metric in observableMetricSpec.\n   */\n  getObservableMetricValue(metricName: string): number {\n    if (this.overriddenObservableMetrics.has(metricName)) {\n      return this.overriddenObservableMetrics.get(metricName);\n    }\n\n    const observableMetricSpec = this.observableMetricSpec[metricName];\n    const metricMap = this.getMetricMap(observableMetricSpec.media, observableMetricSpec.dir);\n    const metricSpec = metricMap[observableMetricSpec.source];\n    const { transform, source } = metricSpec;\n    if (observableMetricSpec.hasOwnProperty('media')) {\n      for (const ssrc in this.streamMetricReports) {\n        const streamMetricReport = this.streamMetricReports[ssrc];\n        if (\n          streamMetricReport.direction === observableMetricSpec.dir &&\n          streamMetricReport.mediaType === observableMetricSpec.media\n        ) {\n          return source\n            ? transform(source, Number(ssrc))\n            : transform(observableMetricSpec.source, Number(ssrc));\n        }\n      }\n    } else {\n      return source ? transform(source) : transform(observableMetricSpec.source);\n    }\n    return 0;\n  }\n\n  /**\n   * Returns the value of the specific metric in observableVideoMetricSpec.\n   */\n  getObservableVideoMetricValue(metricName: string, ssrcNum: number): number {\n    const observableVideoMetricSpec = this.observableVideoMetricSpec[metricName];\n    const metricMap = this.getMetricMap(\n      observableVideoMetricSpec.media,\n      observableVideoMetricSpec.dir\n    );\n    const metricSpec = metricMap[observableVideoMetricSpec.source];\n    const { transform, source } = metricSpec;\n\n    return source\n      ? transform(source, ssrcNum)\n      : transform(observableVideoMetricSpec.source, ssrcNum);\n  }\n\n  /**\n   * Get ssrc of upstream video stream\n   * @returns ssrc of video upstream stream if it exists, otherwise null\n   */\n  getVideoUpstreamSsrc(): number | null {\n    for (const ssrc in this.streamMetricReports) {\n      if (\n        this.streamMetricReports[ssrc].mediaType === MediaType.VIDEO &&\n        this.streamMetricReports[ssrc].direction === Direction.UPSTREAM\n      ) {\n        return Number(ssrc);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the value of metrics in observableMetricSpec.\n   */\n  getObservableMetrics(): { [id: string]: number } {\n    const metric: { [id: string]: number } = {};\n    for (const metricName in this.observableMetricSpec) {\n      metric[metricName] = this.getObservableMetricValue(metricName);\n    }\n    return metric;\n  }\n\n  /**\n   * Returns the value of metrics in observableVideoMetricSpec for each SSRC.\n   */\n  getObservableVideoMetrics(): { [id: string]: { [id: string]: {} } } {\n    const videoStreamMetrics: { [id: string]: { [id: string]: {} } } = {};\n    if (!this.videoStreamIndex || !this.selfAttendeeId) {\n      this.logger.error(\n        'Need to define VideoStreamIndex and selfAttendeeId if using getObservableVideoMetrics API'\n      );\n      return videoStreamMetrics;\n    }\n    for (const ssrc in this.streamMetricReports) {\n      if (this.streamMetricReports[ssrc].mediaType === MediaType.VIDEO) {\n        const metric: { [id: string]: number } = {};\n        for (const metricName in this.observableVideoMetricSpec) {\n          if (\n            this.observableVideoMetricSpec[metricName].dir ===\n            this.streamMetricReports[ssrc].direction\n          ) {\n            const metricValue = this.getObservableVideoMetricValue(metricName, Number(ssrc));\n            if (!isNaN(metricValue)) {\n              metric[metricName] = metricValue;\n            }\n          }\n        }\n        const groupId = this.streamMetricReports[ssrc].groupId;\n        const streamId = this.streamMetricReports[ssrc].streamId;\n        let attendeeId = '';\n        /* istanbul ignore else */\n        if (this.videoStreamIndex.attendeeIdForGroupId !== undefined) {\n          attendeeId = groupId\n            ? this.videoStreamIndex.attendeeIdForGroupId(groupId)\n            : this.selfAttendeeId;\n        } else {\n          // This usage may be inaccurate if server side network adaptation (SSNA) is enabled,\n          // and a simulcast sender has dropped their originally highest stream.\n          //\n          // We are ok with this given the unlikeliness of someone reimplmententing the entire\n          // audio video controller (no way otherwise to inject your own index impl.), implementing\n          // both simulcast and SSNA, but reusing this class :) .\n          attendeeId = streamId\n            ? this.videoStreamIndex.attendeeIdForStreamId(streamId)\n            : this.selfAttendeeId;\n        }\n\n        videoStreamMetrics[attendeeId] = videoStreamMetrics[attendeeId]\n          ? videoStreamMetrics[attendeeId]\n          : {};\n        videoStreamMetrics[attendeeId][ssrc] = metric;\n      }\n    }\n    return videoStreamMetrics;\n  }\n\n  /**\n   * Returns the raw RTCStatsReport from RTCPeerConnection.getStats() API.\n   */\n  getRTCStatsReport(): RTCStatsReport {\n    return this.rtcStatsReport;\n  }\n\n  /**\n   * Clones the ClientMetricReport and returns it.\n   */\n  clone(): ClientMetricReport {\n    const cloned = new ClientMetricReport(this.logger, this.videoStreamIndex, this.selfAttendeeId);\n    cloned.globalMetricReport = this.globalMetricReport;\n    cloned.streamMetricReports = this.streamMetricReports;\n    cloned.rtcStatsReport = this.rtcStatsReport;\n    cloned.customStatsReports = this.customStatsReports;\n    cloned.currentTimestampMs = this.currentTimestampMs;\n    cloned.previousTimestampMs = this.previousTimestampMs;\n    cloned.overriddenObservableMetrics = this.overriddenObservableMetrics;\n    return cloned;\n  }\n\n  /**\n   * Prints out the globalMetricReport, streamMetricReports and the corresponding timestamps from the current ClientMetricReport.\n   */\n  print(): void {\n    const clientMetricReport = {\n      globalMetricReport: this.globalMetricReport,\n      streamMetricReports: this.streamMetricReports,\n      currentTimestampMs: this.currentTimestampMs,\n      previousTimestampMs: this.previousTimestampMs,\n    };\n    this.logger.debug(() => {\n      return `Client Metric Report: ${JSON.stringify(clientMetricReport)}`;\n    });\n  }\n\n  /**\n   * Removes the SSRCs that are no longer valid.\n   */\n  removeDestroyedSsrcs(): void {\n    for (const ssrc in this.streamMetricReports) {\n      if (!this.currentSsrcs[ssrc]) {\n        delete this.streamMetricReports[ssrc];\n      }\n    }\n  }\n\n  /**\n   * Overrides a specific observable metric value (e.g. with one that didn't come from the WebRTC report)\n   */\n  overrideObservableMetric(name: string, value: number): void {\n    this.overriddenObservableMetrics.set(name, value);\n  }\n}\n"]}