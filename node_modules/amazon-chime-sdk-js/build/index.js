"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultEventController = exports.DefaultDevicePixelRatioMonitor = exports.DefaultDeviceController = exports.DefaultContentShareController = exports.DefaultBrowserBehavior = exports.DefaultAudioVideoFacade = exports.DefaultAudioVideoController = exports.DefaultAudioMixController = exports.DefaultActiveSpeakerPolicy = exports.DefaultActiveSpeakerDetector = exports.DataMessage = exports.CreateSDPTask = exports.CreatePeerConnectionTask = exports.ContentShareMediaStreamBroker = exports.ContentShareConstants = exports.ConsoleLogger = exports.ConnectionHealthPolicyConfiguration = exports.ConnectionHealthData = exports.ClientVideoStreamReceivingReport = exports.ClientMetricReportMediaType = exports.ClientMetricReportDirection = exports.ClientMetricReport = exports.CleanStoppedSessionTask = exports.CleanRestartedSessionTask = exports.CheckVideoInputFeedback = exports.CheckVideoConnectivityFeedback = exports.CheckNetworkUDPConnectivityFeedback = exports.CheckNetworkTCPConnectivityFeedback = exports.CheckContentShareConnectivityFeedback = exports.CheckCameraResolutionFeedback = exports.CheckAudioOutputFeedback = exports.CheckAudioInputFeedback = exports.CheckAudioConnectivityFeedback = exports.CanvasVideoFrameBuffer = exports.CSPMonitor = exports.BitrateParameters = exports.BaseTask = exports.BaseConnectionHealthPolicy = exports.BackgroundReplacementVideoFrameProcessor = exports.BackgroundFilterVideoFrameProcessor = exports.BackgroundBlurVideoFrameProcessor = exports.BackgroundBlurStrength = exports.AudioVideoControllerState = exports.AudioProfile = exports.AudioLogEvent = exports.Attendee = exports.AttachMediaInputTask = exports.AsyncScheduler = exports.ApplicationMetadata = exports.AllHighestVideoBandwidthPolicy = void 0;
exports.MeetingReadinessCheckerConfiguration = exports.MeetingFeatures = exports.MeetingEventsClientConfiguration = exports.MediaDeviceProxyHandler = exports.Maybe = exports.LogLevel = exports.Log = exports.ListenForVolumeIndicatorsTask = exports.LeaveAndReceiveLeaveAckTask = exports.JoinAndReceiveIndexTask = exports.IntervalScheduler = exports.InMemoryJSONEventBuffer = exports.GlobalMetricReport = exports.GetUserMediaError = exports.FullJitterLimitedBackoff = exports.FullJitterBackoffFactory = exports.FullJitterBackoff = exports.FinishGatheringICECandidatesTask = exports.EventIngestionConfiguration = exports.EventBufferConfiguration = exports.DeviceSelection = exports.DevicePixelRatioWindowSource = exports.DefaultWebSocketAdapter = exports.DefaultVolumeIndicatorAdapter = exports.DefaultVideoTransformDevice = exports.DefaultVideoTileFactory = exports.DefaultVideoTileController = exports.DefaultVideoTile = exports.DefaultVideoStreamIndex = exports.DefaultVideoStreamIdSet = exports.DefaultVideoFrameProcessorTimer = exports.DefaultVideoFrameProcessorPipeline = exports.DefaultVideoCaptureAndEncodeParameter = exports.DefaultUserAgentParser = exports.DefaultTranscriptionController = exports.DefaultTransceiverController = exports.DefaultSimulcastUplinkPolicyForContentShare = exports.DefaultSimulcastUplinkPolicy = exports.DefaultSignalingClient = exports.DefaultSigV4 = exports.DefaultSessionStateController = exports.DefaultReconnectController = exports.DefaultRealtimeController = exports.DefaultPingPong = exports.DefaultModality = exports.DefaultMessagingSession = exports.DefaultMeetingSession = exports.DefaultMeetingReadinessChecker = exports.DefaultMeetingEventReporter = exports.DefaultMediaDeviceFactory = void 0;
exports.RedundantAudioEncoderWorkerCode = exports.RedundantAudioEncoder = exports.ReconnectionHealthPolicy = exports.ReceiveVideoStreamIndexTask = exports.ReceiveVideoInputTask = exports.ReceiveRemoteVideoPauseResumeTask = exports.ReceiveAudioInputTask = exports.RealtimeVolumeIndicator = exports.RealtimeState = exports.RealtimeAttendeePositionInFrame = exports.PromoteToPrimaryMeetingTask = exports.PromiseQueue = exports.PrefetchSortBy = exports.PrefetchOn = exports.PermissionDeniedError = exports.ParallelGroupTask = exports.POSTLogger = exports.OverconstrainedError = exports.OpenSignalingConnectionTask = exports.OnceTask = exports.NotReadableError = exports.NotFoundError = exports.None = exports.NoVideoUplinkBandwidthPolicy = exports.NoVideoDownlinkBandwidthPolicy = exports.NoOpVideoFrameProcessor = exports.NoOpVideoElementFactory = exports.NoOpTask = exports.NoOpMediaStreamBroker = exports.NoOpLogger = exports.NoOpEventReporter = exports.NoOpDeviceController = exports.NoOpDebugLogger = exports.NoOpAudioVideoController = exports.NScaleVideoUplinkBandwidthPolicy = exports.MutableVideoPreferences = exports.MultiLogger = exports.MonitorTask = exports.ModelSpecBuilder = exports.MessagingSessionConfiguration = exports.Message = exports.MeetingSessionVideoAvailability = exports.MeetingSessionURLs = exports.MeetingSessionTURNCredentials = exports.MeetingSessionStatusCode = exports.MeetingSessionStatus = exports.MeetingSessionLifecycleEventCondition = exports.MeetingSessionLifecycleEvent = exports.MeetingSessionCredentials = exports.MeetingSessionConfiguration = void 0;
exports.VideoEncodingCpuConnectionHealthPolicy = exports.VideoEncodingConnectionHealthPolicyName = exports.VideoCodecCapability = exports.VideoAdaptiveProbePolicy = exports.Versioning = exports.UnusableAudioWarningConnectionHealthPolicy = exports.TypeError = exports.TranscriptionStatusType = exports.TranscriptionStatus = exports.TranscriptResult = exports.TranscriptLanguageWithScore = exports.TranscriptItemType = exports.TranscriptItem = exports.TranscriptEntity = exports.TranscriptAlternative = exports.Transcript = exports.TimeoutTask = exports.TimeoutScheduler = exports.TaskStatus = exports.TargetDisplaySize = exports.SubscribeAndReceiveSubscribeAckTask = exports.StreamMetricReport = exports.Some = exports.SingleNodeAudioTransformDevice = exports.SimulcastVideoStreamIndex = exports.SimulcastTransceiverController = exports.SimulcastLayers = exports.SimulcastContentShareTransceiverController = exports.SignalingClientVideoSubscriptionConfiguration = exports.SignalingClientSubscribe = exports.SignalingClientJoin = exports.SignalingClientEventType = exports.SignalingClientEvent = exports.SignalingClientConnectionRequest = exports.SignalingAndMetricsConnectionMonitor = exports.SetRemoteDescriptionTask = exports.SetLocalDescriptionTask = exports.SessionStateControllerTransitionResult = exports.SessionStateControllerState = exports.SessionStateControllerDeferPriority = exports.SessionStateControllerAction = exports.ServerSideNetworkAdaption = exports.SerialGroupTask = exports.SendingAudioFailureConnectionHealthPolicy = exports.SendAndReceiveDataMessagesTask = exports.SDPMediaSection = exports.SDPCandidateType = exports.SDP = exports.RunnableTask = exports.RedundantAudioRecoveryMetricReport = void 0;
exports.isVideoTransformDevice = exports.isDestroyable = exports.isAudioTransformDevice = exports.ZLIBTextCompressor = exports.WebSocketReadyState = exports.WaitForAttendeePresenceTask = exports.VoiceFocusTransformDevice = exports.VoiceFocusDeviceTransformer = exports.VideoTileState = exports.VideoStreamDescription = exports.VideoSource = exports.VideoQualitySettings = exports.VideoQualityAdaptationPreference = exports.VideoPriorityBasedPolicyConfig = exports.VideoPriorityBasedPolicy = exports.VideoPreferences = exports.VideoPreference = exports.VideoOnlyTransceiverController = exports.VideoLogEvent = exports.VideoFxProcessor = exports.VideoEncodingFramerateConnectionHealthPolicy = void 0;
const AllHighestVideoBandwidthPolicy_1 = __importDefault(require("./videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy"));
exports.AllHighestVideoBandwidthPolicy = AllHighestVideoBandwidthPolicy_1.default;
const ApplicationMetadata_1 = __importDefault(require("./applicationmetadata/ApplicationMetadata"));
exports.ApplicationMetadata = ApplicationMetadata_1.default;
const AsyncScheduler_1 = __importDefault(require("./scheduler/AsyncScheduler"));
exports.AsyncScheduler = AsyncScheduler_1.default;
const AttachMediaInputTask_1 = __importDefault(require("./task/AttachMediaInputTask"));
exports.AttachMediaInputTask = AttachMediaInputTask_1.default;
const Attendee_1 = __importDefault(require("./attendee/Attendee"));
exports.Attendee = Attendee_1.default;
const AudioLogEvent_1 = __importDefault(require("./statscollector/AudioLogEvent"));
exports.AudioLogEvent = AudioLogEvent_1.default;
const AudioProfile_1 = __importDefault(require("./audioprofile/AudioProfile"));
exports.AudioProfile = AudioProfile_1.default;
const AudioVideoControllerState_1 = __importDefault(require("./audiovideocontroller/AudioVideoControllerState"));
exports.AudioVideoControllerState = AudioVideoControllerState_1.default;
const BackgroundBlurStrength_1 = __importDefault(require("./backgroundblurprocessor/BackgroundBlurStrength"));
exports.BackgroundBlurStrength = BackgroundBlurStrength_1.default;
const BackgroundBlurVideoFrameProcessor_1 = __importDefault(require("./backgroundblurprocessor/BackgroundBlurVideoFrameProcessor"));
exports.BackgroundBlurVideoFrameProcessor = BackgroundBlurVideoFrameProcessor_1.default;
const BackgroundFilterVideoFrameProcessor_1 = __importDefault(require("./backgroundfilter/BackgroundFilterVideoFrameProcessor"));
exports.BackgroundFilterVideoFrameProcessor = BackgroundFilterVideoFrameProcessor_1.default;
const BackgroundReplacementVideoFrameProcessor_1 = __importDefault(require("./backgroundreplacementprocessor/BackgroundReplacementVideoFrameProcessor"));
exports.BackgroundReplacementVideoFrameProcessor = BackgroundReplacementVideoFrameProcessor_1.default;
const BaseConnectionHealthPolicy_1 = __importDefault(require("./connectionhealthpolicy/BaseConnectionHealthPolicy"));
exports.BaseConnectionHealthPolicy = BaseConnectionHealthPolicy_1.default;
const BaseTask_1 = __importDefault(require("./task/BaseTask"));
exports.BaseTask = BaseTask_1.default;
const BitrateParameters_1 = __importDefault(require("./videouplinkbandwidthpolicy/BitrateParameters"));
exports.BitrateParameters = BitrateParameters_1.default;
const CSPMonitor_1 = __importDefault(require("./cspmonitor/CSPMonitor"));
exports.CSPMonitor = CSPMonitor_1.default;
const CanvasVideoFrameBuffer_1 = __importDefault(require("./videoframeprocessor/CanvasVideoFrameBuffer"));
exports.CanvasVideoFrameBuffer = CanvasVideoFrameBuffer_1.default;
const CheckAudioConnectivityFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckAudioConnectivityFeedback"));
exports.CheckAudioConnectivityFeedback = CheckAudioConnectivityFeedback_1.default;
const CheckAudioInputFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckAudioInputFeedback"));
exports.CheckAudioInputFeedback = CheckAudioInputFeedback_1.default;
const CheckAudioOutputFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckAudioOutputFeedback"));
exports.CheckAudioOutputFeedback = CheckAudioOutputFeedback_1.default;
const CheckCameraResolutionFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckCameraResolutionFeedback"));
exports.CheckCameraResolutionFeedback = CheckCameraResolutionFeedback_1.default;
const CheckContentShareConnectivityFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckContentShareConnectivityFeedback"));
exports.CheckContentShareConnectivityFeedback = CheckContentShareConnectivityFeedback_1.default;
const CheckNetworkTCPConnectivityFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckNetworkTCPConnectivityFeedback"));
exports.CheckNetworkTCPConnectivityFeedback = CheckNetworkTCPConnectivityFeedback_1.default;
const CheckNetworkUDPConnectivityFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckNetworkUDPConnectivityFeedback"));
exports.CheckNetworkUDPConnectivityFeedback = CheckNetworkUDPConnectivityFeedback_1.default;
const CheckVideoConnectivityFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckVideoConnectivityFeedback"));
exports.CheckVideoConnectivityFeedback = CheckVideoConnectivityFeedback_1.default;
const CheckVideoInputFeedback_1 = __importDefault(require("./meetingreadinesschecker/CheckVideoInputFeedback"));
exports.CheckVideoInputFeedback = CheckVideoInputFeedback_1.default;
const CleanRestartedSessionTask_1 = __importDefault(require("./task/CleanRestartedSessionTask"));
exports.CleanRestartedSessionTask = CleanRestartedSessionTask_1.default;
const CleanStoppedSessionTask_1 = __importDefault(require("./task/CleanStoppedSessionTask"));
exports.CleanStoppedSessionTask = CleanStoppedSessionTask_1.default;
const ClientMetricReport_1 = __importDefault(require("./clientmetricreport/ClientMetricReport"));
exports.ClientMetricReport = ClientMetricReport_1.default;
const ClientMetricReportDirection_1 = __importDefault(require("./clientmetricreport/ClientMetricReportDirection"));
exports.ClientMetricReportDirection = ClientMetricReportDirection_1.default;
const ClientMetricReportMediaType_1 = __importDefault(require("./clientmetricreport/ClientMetricReportMediaType"));
exports.ClientMetricReportMediaType = ClientMetricReportMediaType_1.default;
const ClientVideoStreamReceivingReport_1 = __importDefault(require("./clientmetricreport/ClientVideoStreamReceivingReport"));
exports.ClientVideoStreamReceivingReport = ClientVideoStreamReceivingReport_1.default;
const ConnectionHealthData_1 = __importDefault(require("./connectionhealthpolicy/ConnectionHealthData"));
exports.ConnectionHealthData = ConnectionHealthData_1.default;
const ConnectionHealthPolicyConfiguration_1 = __importDefault(require("./connectionhealthpolicy/ConnectionHealthPolicyConfiguration"));
exports.ConnectionHealthPolicyConfiguration = ConnectionHealthPolicyConfiguration_1.default;
const ConsoleLogger_1 = __importDefault(require("./logger/ConsoleLogger"));
exports.ConsoleLogger = ConsoleLogger_1.default;
const ContentShareConstants_1 = __importDefault(require("./contentsharecontroller/ContentShareConstants"));
exports.ContentShareConstants = ContentShareConstants_1.default;
const ContentShareMediaStreamBroker_1 = __importDefault(require("./contentsharecontroller/ContentShareMediaStreamBroker"));
exports.ContentShareMediaStreamBroker = ContentShareMediaStreamBroker_1.default;
const CreatePeerConnectionTask_1 = __importDefault(require("./task/CreatePeerConnectionTask"));
exports.CreatePeerConnectionTask = CreatePeerConnectionTask_1.default;
const CreateSDPTask_1 = __importDefault(require("./task/CreateSDPTask"));
exports.CreateSDPTask = CreateSDPTask_1.default;
const DataMessage_1 = __importDefault(require("./datamessage/DataMessage"));
exports.DataMessage = DataMessage_1.default;
const DefaultActiveSpeakerDetector_1 = __importDefault(require("./activespeakerdetector/DefaultActiveSpeakerDetector"));
exports.DefaultActiveSpeakerDetector = DefaultActiveSpeakerDetector_1.default;
const DefaultActiveSpeakerPolicy_1 = __importDefault(require("./activespeakerpolicy/DefaultActiveSpeakerPolicy"));
exports.DefaultActiveSpeakerPolicy = DefaultActiveSpeakerPolicy_1.default;
const DefaultAudioMixController_1 = __importDefault(require("./audiomixcontroller/DefaultAudioMixController"));
exports.DefaultAudioMixController = DefaultAudioMixController_1.default;
const DefaultAudioVideoController_1 = __importDefault(require("./audiovideocontroller/DefaultAudioVideoController"));
exports.DefaultAudioVideoController = DefaultAudioVideoController_1.default;
const DefaultAudioVideoFacade_1 = __importDefault(require("./audiovideofacade/DefaultAudioVideoFacade"));
exports.DefaultAudioVideoFacade = DefaultAudioVideoFacade_1.default;
const DefaultBrowserBehavior_1 = __importDefault(require("./browserbehavior/DefaultBrowserBehavior"));
exports.DefaultBrowserBehavior = DefaultBrowserBehavior_1.default;
const DefaultContentShareController_1 = __importDefault(require("./contentsharecontroller/DefaultContentShareController"));
exports.DefaultContentShareController = DefaultContentShareController_1.default;
const DefaultDeviceController_1 = __importDefault(require("./devicecontroller/DefaultDeviceController"));
exports.DefaultDeviceController = DefaultDeviceController_1.default;
const DefaultDevicePixelRatioMonitor_1 = __importDefault(require("./devicepixelratiomonitor/DefaultDevicePixelRatioMonitor"));
exports.DefaultDevicePixelRatioMonitor = DefaultDevicePixelRatioMonitor_1.default;
const DefaultEventController_1 = __importDefault(require("./eventcontroller/DefaultEventController"));
exports.DefaultEventController = DefaultEventController_1.default;
const DefaultMediaDeviceFactory_1 = __importDefault(require("./mediadevicefactory/DefaultMediaDeviceFactory"));
exports.DefaultMediaDeviceFactory = DefaultMediaDeviceFactory_1.default;
const DefaultMeetingEventReporter_1 = __importDefault(require("./eventreporter/DefaultMeetingEventReporter"));
exports.DefaultMeetingEventReporter = DefaultMeetingEventReporter_1.default;
const DefaultMeetingReadinessChecker_1 = __importDefault(require("./meetingreadinesschecker/DefaultMeetingReadinessChecker"));
exports.DefaultMeetingReadinessChecker = DefaultMeetingReadinessChecker_1.default;
const DefaultMeetingSession_1 = __importDefault(require("./meetingsession/DefaultMeetingSession"));
exports.DefaultMeetingSession = DefaultMeetingSession_1.default;
const DefaultMessagingSession_1 = __importDefault(require("./messagingsession/DefaultMessagingSession"));
exports.DefaultMessagingSession = DefaultMessagingSession_1.default;
const DefaultModality_1 = __importDefault(require("./modality/DefaultModality"));
exports.DefaultModality = DefaultModality_1.default;
const DefaultPingPong_1 = __importDefault(require("./pingpong/DefaultPingPong"));
exports.DefaultPingPong = DefaultPingPong_1.default;
const DefaultRealtimeController_1 = __importDefault(require("./realtimecontroller/DefaultRealtimeController"));
exports.DefaultRealtimeController = DefaultRealtimeController_1.default;
const DefaultReconnectController_1 = __importDefault(require("./reconnectcontroller/DefaultReconnectController"));
exports.DefaultReconnectController = DefaultReconnectController_1.default;
const DefaultSessionStateController_1 = __importDefault(require("./sessionstatecontroller/DefaultSessionStateController"));
exports.DefaultSessionStateController = DefaultSessionStateController_1.default;
const DefaultSigV4_1 = __importDefault(require("./sigv4/DefaultSigV4"));
exports.DefaultSigV4 = DefaultSigV4_1.default;
const DefaultSignalingClient_1 = __importDefault(require("./signalingclient/DefaultSignalingClient"));
exports.DefaultSignalingClient = DefaultSignalingClient_1.default;
const DefaultSimulcastUplinkPolicy_1 = __importDefault(require("./videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy"));
exports.DefaultSimulcastUplinkPolicy = DefaultSimulcastUplinkPolicy_1.default;
const DefaultSimulcastUplinkPolicyForContentShare_1 = __importDefault(require("./videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicyForContentShare"));
exports.DefaultSimulcastUplinkPolicyForContentShare = DefaultSimulcastUplinkPolicyForContentShare_1.default;
const DefaultTransceiverController_1 = __importDefault(require("./transceivercontroller/DefaultTransceiverController"));
exports.DefaultTransceiverController = DefaultTransceiverController_1.default;
const DefaultTranscriptionController_1 = __importDefault(require("./transcript/DefaultTranscriptionController"));
exports.DefaultTranscriptionController = DefaultTranscriptionController_1.default;
const DefaultUserAgentParser_1 = __importDefault(require("./useragentparser/DefaultUserAgentParser"));
exports.DefaultUserAgentParser = DefaultUserAgentParser_1.default;
const DefaultVideoCaptureAndEncodeParameter_1 = __importDefault(require("./videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter"));
exports.DefaultVideoCaptureAndEncodeParameter = DefaultVideoCaptureAndEncodeParameter_1.default;
const DefaultVideoFrameProcessorPipeline_1 = __importDefault(require("./videoframeprocessor/DefaultVideoFrameProcessorPipeline"));
exports.DefaultVideoFrameProcessorPipeline = DefaultVideoFrameProcessorPipeline_1.default;
const DefaultVideoFrameProcessorTimer_1 = __importDefault(require("./videoframeprocessor/DefaultVideoFrameProcessorTimer"));
exports.DefaultVideoFrameProcessorTimer = DefaultVideoFrameProcessorTimer_1.default;
const DefaultVideoStreamIdSet_1 = __importDefault(require("./videostreamidset/DefaultVideoStreamIdSet"));
exports.DefaultVideoStreamIdSet = DefaultVideoStreamIdSet_1.default;
const DefaultVideoStreamIndex_1 = __importDefault(require("./videostreamindex/DefaultVideoStreamIndex"));
exports.DefaultVideoStreamIndex = DefaultVideoStreamIndex_1.default;
const DefaultVideoTile_1 = __importDefault(require("./videotile/DefaultVideoTile"));
exports.DefaultVideoTile = DefaultVideoTile_1.default;
const DefaultVideoTileController_1 = __importDefault(require("./videotilecontroller/DefaultVideoTileController"));
exports.DefaultVideoTileController = DefaultVideoTileController_1.default;
const DefaultVideoTileFactory_1 = __importDefault(require("./videotilefactory/DefaultVideoTileFactory"));
exports.DefaultVideoTileFactory = DefaultVideoTileFactory_1.default;
const DefaultVideoTransformDevice_1 = __importDefault(require("./videoframeprocessor/DefaultVideoTransformDevice"));
exports.DefaultVideoTransformDevice = DefaultVideoTransformDevice_1.default;
const DefaultVolumeIndicatorAdapter_1 = __importDefault(require("./volumeindicatoradapter/DefaultVolumeIndicatorAdapter"));
exports.DefaultVolumeIndicatorAdapter = DefaultVolumeIndicatorAdapter_1.default;
const DefaultWebSocketAdapter_1 = __importDefault(require("./websocketadapter/DefaultWebSocketAdapter"));
exports.DefaultWebSocketAdapter = DefaultWebSocketAdapter_1.default;
const DevicePixelRatioWindowSource_1 = __importDefault(require("./devicepixelratiosource/DevicePixelRatioWindowSource"));
exports.DevicePixelRatioWindowSource = DevicePixelRatioWindowSource_1.default;
const DeviceSelection_1 = __importDefault(require("./devicecontroller/DeviceSelection"));
exports.DeviceSelection = DeviceSelection_1.default;
const EventBufferConfiguration_1 = __importDefault(require("./eventbufferconfiguration/EventBufferConfiguration"));
exports.EventBufferConfiguration = EventBufferConfiguration_1.default;
const EventIngestionConfiguration_1 = __importDefault(require("./eventingestionconfiguration/EventIngestionConfiguration"));
exports.EventIngestionConfiguration = EventIngestionConfiguration_1.default;
const FinishGatheringICECandidatesTask_1 = __importDefault(require("./task/FinishGatheringICECandidatesTask"));
exports.FinishGatheringICECandidatesTask = FinishGatheringICECandidatesTask_1.default;
const FullJitterBackoff_1 = __importDefault(require("./backoff/FullJitterBackoff"));
exports.FullJitterBackoff = FullJitterBackoff_1.default;
const FullJitterBackoffFactory_1 = __importDefault(require("./backoff/FullJitterBackoffFactory"));
exports.FullJitterBackoffFactory = FullJitterBackoffFactory_1.default;
const FullJitterLimitedBackoff_1 = __importDefault(require("./backoff/FullJitterLimitedBackoff"));
exports.FullJitterLimitedBackoff = FullJitterLimitedBackoff_1.default;
const GetUserMediaError_1 = __importDefault(require("./devicecontroller/GetUserMediaError"));
exports.GetUserMediaError = GetUserMediaError_1.default;
const GlobalMetricReport_1 = __importDefault(require("./clientmetricreport/GlobalMetricReport"));
exports.GlobalMetricReport = GlobalMetricReport_1.default;
const InMemoryJSONEventBuffer_1 = __importDefault(require("./eventbuffer/InMemoryJSONEventBuffer"));
exports.InMemoryJSONEventBuffer = InMemoryJSONEventBuffer_1.default;
const IntervalScheduler_1 = __importDefault(require("./scheduler/IntervalScheduler"));
exports.IntervalScheduler = IntervalScheduler_1.default;
const JoinAndReceiveIndexTask_1 = __importDefault(require("./task/JoinAndReceiveIndexTask"));
exports.JoinAndReceiveIndexTask = JoinAndReceiveIndexTask_1.default;
const LeaveAndReceiveLeaveAckTask_1 = __importDefault(require("./task/LeaveAndReceiveLeaveAckTask"));
exports.LeaveAndReceiveLeaveAckTask = LeaveAndReceiveLeaveAckTask_1.default;
const ListenForVolumeIndicatorsTask_1 = __importDefault(require("./task/ListenForVolumeIndicatorsTask"));
exports.ListenForVolumeIndicatorsTask = ListenForVolumeIndicatorsTask_1.default;
const Log_1 = __importDefault(require("./logger/Log"));
exports.Log = Log_1.default;
const LogLevel_1 = __importDefault(require("./logger/LogLevel"));
exports.LogLevel = LogLevel_1.default;
const MediaDeviceProxyHandler_1 = __importDefault(require("./mediadevicefactory/MediaDeviceProxyHandler"));
exports.MediaDeviceProxyHandler = MediaDeviceProxyHandler_1.default;
const MeetingEventsClientConfiguration_1 = __importDefault(require("./eventsclientconfiguration/MeetingEventsClientConfiguration"));
exports.MeetingEventsClientConfiguration = MeetingEventsClientConfiguration_1.default;
const MeetingFeatures_1 = __importDefault(require("./meetingsession/MeetingFeatures"));
exports.MeetingFeatures = MeetingFeatures_1.default;
const MeetingReadinessCheckerConfiguration_1 = __importDefault(require("./meetingreadinesschecker/MeetingReadinessCheckerConfiguration"));
exports.MeetingReadinessCheckerConfiguration = MeetingReadinessCheckerConfiguration_1.default;
const MeetingSessionConfiguration_1 = __importDefault(require("./meetingsession/MeetingSessionConfiguration"));
exports.MeetingSessionConfiguration = MeetingSessionConfiguration_1.default;
const MeetingSessionCredentials_1 = __importDefault(require("./meetingsession/MeetingSessionCredentials"));
exports.MeetingSessionCredentials = MeetingSessionCredentials_1.default;
const MeetingSessionLifecycleEvent_1 = __importDefault(require("./meetingsession/MeetingSessionLifecycleEvent"));
exports.MeetingSessionLifecycleEvent = MeetingSessionLifecycleEvent_1.default;
const MeetingSessionLifecycleEventCondition_1 = __importDefault(require("./meetingsession/MeetingSessionLifecycleEventCondition"));
exports.MeetingSessionLifecycleEventCondition = MeetingSessionLifecycleEventCondition_1.default;
const MeetingSessionStatus_1 = __importDefault(require("./meetingsession/MeetingSessionStatus"));
exports.MeetingSessionStatus = MeetingSessionStatus_1.default;
const MeetingSessionStatusCode_1 = __importDefault(require("./meetingsession/MeetingSessionStatusCode"));
exports.MeetingSessionStatusCode = MeetingSessionStatusCode_1.default;
const MeetingSessionTURNCredentials_1 = __importDefault(require("./meetingsession/MeetingSessionTURNCredentials"));
exports.MeetingSessionTURNCredentials = MeetingSessionTURNCredentials_1.default;
const MeetingSessionURLs_1 = __importDefault(require("./meetingsession/MeetingSessionURLs"));
exports.MeetingSessionURLs = MeetingSessionURLs_1.default;
const MeetingSessionVideoAvailability_1 = __importDefault(require("./meetingsession/MeetingSessionVideoAvailability"));
exports.MeetingSessionVideoAvailability = MeetingSessionVideoAvailability_1.default;
const Message_1 = __importDefault(require("./message/Message"));
exports.Message = Message_1.default;
const MessagingSessionConfiguration_1 = __importDefault(require("./messagingsession/MessagingSessionConfiguration"));
exports.MessagingSessionConfiguration = MessagingSessionConfiguration_1.default;
const ModelSpecBuilder_1 = __importDefault(require("./backgroundblurprocessor/ModelSpecBuilder"));
exports.ModelSpecBuilder = ModelSpecBuilder_1.default;
const MonitorTask_1 = __importDefault(require("./task/MonitorTask"));
exports.MonitorTask = MonitorTask_1.default;
const MultiLogger_1 = __importDefault(require("./logger/MultiLogger"));
exports.MultiLogger = MultiLogger_1.default;
const NScaleVideoUplinkBandwidthPolicy_1 = __importDefault(require("./videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy"));
exports.NScaleVideoUplinkBandwidthPolicy = NScaleVideoUplinkBandwidthPolicy_1.default;
const NoOpAudioVideoController_1 = __importDefault(require("./audiovideocontroller/NoOpAudioVideoController"));
exports.NoOpAudioVideoController = NoOpAudioVideoController_1.default;
const NoOpDebugLogger_1 = __importDefault(require("./logger/NoOpDebugLogger"));
exports.NoOpDebugLogger = NoOpDebugLogger_1.default;
const NoOpDeviceController_1 = __importDefault(require("./devicecontroller/NoOpDeviceController"));
exports.NoOpDeviceController = NoOpDeviceController_1.default;
const NoOpEventReporter_1 = __importDefault(require("./eventreporter/NoOpEventReporter"));
exports.NoOpEventReporter = NoOpEventReporter_1.default;
const NoOpLogger_1 = __importDefault(require("./logger/NoOpLogger"));
exports.NoOpLogger = NoOpLogger_1.default;
const NoOpMediaStreamBroker_1 = __importDefault(require("./mediastreambroker/NoOpMediaStreamBroker"));
exports.NoOpMediaStreamBroker = NoOpMediaStreamBroker_1.default;
const NoOpTask_1 = __importDefault(require("./task/NoOpTask"));
exports.NoOpTask = NoOpTask_1.default;
const NoOpVideoElementFactory_1 = __importDefault(require("./videoelementfactory/NoOpVideoElementFactory"));
exports.NoOpVideoElementFactory = NoOpVideoElementFactory_1.default;
const NoOpVideoFrameProcessor_1 = __importDefault(require("./videoframeprocessor/NoOpVideoFrameProcessor"));
exports.NoOpVideoFrameProcessor = NoOpVideoFrameProcessor_1.default;
const NoVideoDownlinkBandwidthPolicy_1 = __importDefault(require("./videodownlinkbandwidthpolicy/NoVideoDownlinkBandwidthPolicy"));
exports.NoVideoDownlinkBandwidthPolicy = NoVideoDownlinkBandwidthPolicy_1.default;
const NoVideoUplinkBandwidthPolicy_1 = __importDefault(require("./videouplinkbandwidthpolicy/NoVideoUplinkBandwidthPolicy"));
exports.NoVideoUplinkBandwidthPolicy = NoVideoUplinkBandwidthPolicy_1.default;
const NotFoundError_1 = __importDefault(require("./devicecontroller/NotFoundError"));
exports.NotFoundError = NotFoundError_1.default;
const NotReadableError_1 = __importDefault(require("./devicecontroller/NotReadableError"));
exports.NotReadableError = NotReadableError_1.default;
const OnceTask_1 = __importDefault(require("./task/OnceTask"));
exports.OnceTask = OnceTask_1.default;
const OpenSignalingConnectionTask_1 = __importDefault(require("./task/OpenSignalingConnectionTask"));
exports.OpenSignalingConnectionTask = OpenSignalingConnectionTask_1.default;
const OverconstrainedError_1 = __importDefault(require("./devicecontroller/OverconstrainedError"));
exports.OverconstrainedError = OverconstrainedError_1.default;
const POSTLogger_1 = __importDefault(require("./logger/POSTLogger"));
exports.POSTLogger = POSTLogger_1.default;
const ParallelGroupTask_1 = __importDefault(require("./task/ParallelGroupTask"));
exports.ParallelGroupTask = ParallelGroupTask_1.default;
const PermissionDeniedError_1 = __importDefault(require("./devicecontroller/PermissionDeniedError"));
exports.PermissionDeniedError = PermissionDeniedError_1.default;
const PrefetchOn_1 = __importDefault(require("./messagingsession/PrefetchOn"));
exports.PrefetchOn = PrefetchOn_1.default;
const PrefetchSortBy_1 = __importDefault(require("./messagingsession/PrefetchSortBy"));
exports.PrefetchSortBy = PrefetchSortBy_1.default;
const PromiseQueue_1 = __importDefault(require("./utils/PromiseQueue"));
exports.PromiseQueue = PromiseQueue_1.default;
const PromoteToPrimaryMeetingTask_1 = __importDefault(require("./task/PromoteToPrimaryMeetingTask"));
exports.PromoteToPrimaryMeetingTask = PromoteToPrimaryMeetingTask_1.default;
const RealtimeAttendeePositionInFrame_1 = __importDefault(require("./realtimecontroller/RealtimeAttendeePositionInFrame"));
exports.RealtimeAttendeePositionInFrame = RealtimeAttendeePositionInFrame_1.default;
const RealtimeState_1 = __importDefault(require("./realtimecontroller/RealtimeState"));
exports.RealtimeState = RealtimeState_1.default;
const RealtimeVolumeIndicator_1 = __importDefault(require("./realtimecontroller/RealtimeVolumeIndicator"));
exports.RealtimeVolumeIndicator = RealtimeVolumeIndicator_1.default;
const ReceiveAudioInputTask_1 = __importDefault(require("./task/ReceiveAudioInputTask"));
exports.ReceiveAudioInputTask = ReceiveAudioInputTask_1.default;
const ReceiveRemoteVideoPauseResumeTask_1 = __importDefault(require("./task/ReceiveRemoteVideoPauseResumeTask"));
exports.ReceiveRemoteVideoPauseResumeTask = ReceiveRemoteVideoPauseResumeTask_1.default;
const ReceiveVideoInputTask_1 = __importDefault(require("./task/ReceiveVideoInputTask"));
exports.ReceiveVideoInputTask = ReceiveVideoInputTask_1.default;
const ReceiveVideoStreamIndexTask_1 = __importDefault(require("./task/ReceiveVideoStreamIndexTask"));
exports.ReceiveVideoStreamIndexTask = ReceiveVideoStreamIndexTask_1.default;
const ReconnectionHealthPolicy_1 = __importDefault(require("./connectionhealthpolicy/ReconnectionHealthPolicy"));
exports.ReconnectionHealthPolicy = ReconnectionHealthPolicy_1.default;
const RedundantAudioEncoder_1 = __importDefault(require("./redundantaudioencoder/RedundantAudioEncoder"));
exports.RedundantAudioEncoder = RedundantAudioEncoder_1.default;
const RedundantAudioEncoderWorkerCode_1 = __importDefault(require("./redundantaudioencoderworkercode/RedundantAudioEncoderWorkerCode"));
exports.RedundantAudioEncoderWorkerCode = RedundantAudioEncoderWorkerCode_1.default;
const RedundantAudioRecoveryMetricReport_1 = __importDefault(require("./clientmetricreport/RedundantAudioRecoveryMetricReport"));
exports.RedundantAudioRecoveryMetricReport = RedundantAudioRecoveryMetricReport_1.default;
const RunnableTask_1 = __importDefault(require("./task/RunnableTask"));
exports.RunnableTask = RunnableTask_1.default;
const SDP_1 = __importDefault(require("./sdp/SDP"));
exports.SDP = SDP_1.default;
const SDPCandidateType_1 = __importDefault(require("./sdp/SDPCandidateType"));
exports.SDPCandidateType = SDPCandidateType_1.default;
const SDPMediaSection_1 = __importDefault(require("./sdp/SDPMediaSection"));
exports.SDPMediaSection = SDPMediaSection_1.default;
const SendAndReceiveDataMessagesTask_1 = __importDefault(require("./task/SendAndReceiveDataMessagesTask"));
exports.SendAndReceiveDataMessagesTask = SendAndReceiveDataMessagesTask_1.default;
const SendingAudioFailureConnectionHealthPolicy_1 = __importDefault(require("./connectionhealthpolicy/SendingAudioFailureConnectionHealthPolicy"));
exports.SendingAudioFailureConnectionHealthPolicy = SendingAudioFailureConnectionHealthPolicy_1.default;
const SerialGroupTask_1 = __importDefault(require("./task/SerialGroupTask"));
exports.SerialGroupTask = SerialGroupTask_1.default;
const ServerSideNetworkAdaption_1 = __importDefault(require("./signalingclient/ServerSideNetworkAdaption"));
exports.ServerSideNetworkAdaption = ServerSideNetworkAdaption_1.default;
const SessionStateControllerAction_1 = __importDefault(require("./sessionstatecontroller/SessionStateControllerAction"));
exports.SessionStateControllerAction = SessionStateControllerAction_1.default;
const SessionStateControllerDeferPriority_1 = __importDefault(require("./sessionstatecontroller/SessionStateControllerDeferPriority"));
exports.SessionStateControllerDeferPriority = SessionStateControllerDeferPriority_1.default;
const SessionStateControllerState_1 = __importDefault(require("./sessionstatecontroller/SessionStateControllerState"));
exports.SessionStateControllerState = SessionStateControllerState_1.default;
const SessionStateControllerTransitionResult_1 = __importDefault(require("./sessionstatecontroller/SessionStateControllerTransitionResult"));
exports.SessionStateControllerTransitionResult = SessionStateControllerTransitionResult_1.default;
const SetLocalDescriptionTask_1 = __importDefault(require("./task/SetLocalDescriptionTask"));
exports.SetLocalDescriptionTask = SetLocalDescriptionTask_1.default;
const SetRemoteDescriptionTask_1 = __importDefault(require("./task/SetRemoteDescriptionTask"));
exports.SetRemoteDescriptionTask = SetRemoteDescriptionTask_1.default;
const SignalingAndMetricsConnectionMonitor_1 = __importDefault(require("./connectionmonitor/SignalingAndMetricsConnectionMonitor"));
exports.SignalingAndMetricsConnectionMonitor = SignalingAndMetricsConnectionMonitor_1.default;
const SignalingClientConnectionRequest_1 = __importDefault(require("./signalingclient/SignalingClientConnectionRequest"));
exports.SignalingClientConnectionRequest = SignalingClientConnectionRequest_1.default;
const SignalingClientEvent_1 = __importDefault(require("./signalingclient/SignalingClientEvent"));
exports.SignalingClientEvent = SignalingClientEvent_1.default;
const SignalingClientEventType_1 = __importDefault(require("./signalingclient/SignalingClientEventType"));
exports.SignalingClientEventType = SignalingClientEventType_1.default;
const SignalingClientJoin_1 = __importDefault(require("./signalingclient/SignalingClientJoin"));
exports.SignalingClientJoin = SignalingClientJoin_1.default;
const SignalingClientSubscribe_1 = __importDefault(require("./signalingclient/SignalingClientSubscribe"));
exports.SignalingClientSubscribe = SignalingClientSubscribe_1.default;
const SignalingClientVideoSubscriptionConfiguration_1 = __importDefault(require("./signalingclient/SignalingClientVideoSubscriptionConfiguration"));
exports.SignalingClientVideoSubscriptionConfiguration = SignalingClientVideoSubscriptionConfiguration_1.default;
const SimulcastContentShareTransceiverController_1 = __importDefault(require("./transceivercontroller/SimulcastContentShareTransceiverController"));
exports.SimulcastContentShareTransceiverController = SimulcastContentShareTransceiverController_1.default;
const SimulcastLayers_1 = __importDefault(require("./simulcastlayers/SimulcastLayers"));
exports.SimulcastLayers = SimulcastLayers_1.default;
const SimulcastTransceiverController_1 = __importDefault(require("./transceivercontroller/SimulcastTransceiverController"));
exports.SimulcastTransceiverController = SimulcastTransceiverController_1.default;
const SimulcastVideoStreamIndex_1 = __importDefault(require("./videostreamindex/SimulcastVideoStreamIndex"));
exports.SimulcastVideoStreamIndex = SimulcastVideoStreamIndex_1.default;
const SingleNodeAudioTransformDevice_1 = __importDefault(require("./devicecontroller/SingleNodeAudioTransformDevice"));
exports.SingleNodeAudioTransformDevice = SingleNodeAudioTransformDevice_1.default;
const StreamMetricReport_1 = __importDefault(require("./clientmetricreport/StreamMetricReport"));
exports.StreamMetricReport = StreamMetricReport_1.default;
const SubscribeAndReceiveSubscribeAckTask_1 = __importDefault(require("./task/SubscribeAndReceiveSubscribeAckTask"));
exports.SubscribeAndReceiveSubscribeAckTask = SubscribeAndReceiveSubscribeAckTask_1.default;
const TargetDisplaySize_1 = __importDefault(require("./videodownlinkbandwidthpolicy/TargetDisplaySize"));
exports.TargetDisplaySize = TargetDisplaySize_1.default;
const TaskStatus_1 = __importDefault(require("./task/TaskStatus"));
exports.TaskStatus = TaskStatus_1.default;
const TimeoutScheduler_1 = __importDefault(require("./scheduler/TimeoutScheduler"));
exports.TimeoutScheduler = TimeoutScheduler_1.default;
const TimeoutTask_1 = __importDefault(require("./task/TimeoutTask"));
exports.TimeoutTask = TimeoutTask_1.default;
const Transcript_1 = __importDefault(require("./transcript/Transcript"));
exports.Transcript = Transcript_1.default;
const TranscriptAlternative_1 = __importDefault(require("./transcript/TranscriptAlternative"));
exports.TranscriptAlternative = TranscriptAlternative_1.default;
const TranscriptEntity_1 = __importDefault(require("./transcript/TranscriptEntity"));
exports.TranscriptEntity = TranscriptEntity_1.default;
const TranscriptItem_1 = __importDefault(require("./transcript/TranscriptItem"));
exports.TranscriptItem = TranscriptItem_1.default;
const TranscriptItemType_1 = __importDefault(require("./transcript/TranscriptItemType"));
exports.TranscriptItemType = TranscriptItemType_1.default;
const TranscriptLanguageWithScore_1 = __importDefault(require("./transcript/TranscriptLanguageWithScore"));
exports.TranscriptLanguageWithScore = TranscriptLanguageWithScore_1.default;
const TranscriptResult_1 = __importDefault(require("./transcript/TranscriptResult"));
exports.TranscriptResult = TranscriptResult_1.default;
const TranscriptionStatus_1 = __importDefault(require("./transcript/TranscriptionStatus"));
exports.TranscriptionStatus = TranscriptionStatus_1.default;
const TranscriptionStatusType_1 = __importDefault(require("./transcript/TranscriptionStatusType"));
exports.TranscriptionStatusType = TranscriptionStatusType_1.default;
const TypeError_1 = __importDefault(require("./devicecontroller/TypeError"));
exports.TypeError = TypeError_1.default;
const UnusableAudioWarningConnectionHealthPolicy_1 = __importDefault(require("./connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy"));
exports.UnusableAudioWarningConnectionHealthPolicy = UnusableAudioWarningConnectionHealthPolicy_1.default;
const Versioning_1 = __importDefault(require("./versioning/Versioning"));
exports.Versioning = Versioning_1.default;
const VideoAdaptiveProbePolicy_1 = __importDefault(require("./videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy"));
exports.VideoAdaptiveProbePolicy = VideoAdaptiveProbePolicy_1.default;
const VideoCodecCapability_1 = __importDefault(require("./sdp/VideoCodecCapability"));
exports.VideoCodecCapability = VideoCodecCapability_1.default;
const VideoEncodingConnectionHealthPolicyName_1 = __importDefault(require("./connectionhealthpolicy/VideoEncodingConnectionHealthPolicyName"));
exports.VideoEncodingConnectionHealthPolicyName = VideoEncodingConnectionHealthPolicyName_1.default;
const VideoEncodingCpuConnectionHealthPolicy_1 = __importDefault(require("./connectionhealthpolicy/VideoEncodingCpuConnectionHealthPolicy"));
exports.VideoEncodingCpuConnectionHealthPolicy = VideoEncodingCpuConnectionHealthPolicy_1.default;
const VideoEncodingFramerateConnectionHealthPolicy_1 = __importDefault(require("./connectionhealthpolicy/VideoEncodingFramerateConnectionHealthPolicy"));
exports.VideoEncodingFramerateConnectionHealthPolicy = VideoEncodingFramerateConnectionHealthPolicy_1.default;
const VideoFxProcessor_1 = __importDefault(require("./videofx/VideoFxProcessor"));
exports.VideoFxProcessor = VideoFxProcessor_1.default;
const VideoLogEvent_1 = __importDefault(require("./statscollector/VideoLogEvent"));
exports.VideoLogEvent = VideoLogEvent_1.default;
const VideoOnlyTransceiverController_1 = __importDefault(require("./transceivercontroller/VideoOnlyTransceiverController"));
exports.VideoOnlyTransceiverController = VideoOnlyTransceiverController_1.default;
const VideoPreference_1 = __importDefault(require("./videodownlinkbandwidthpolicy/VideoPreference"));
exports.VideoPreference = VideoPreference_1.default;
const VideoPreferences_1 = __importDefault(require("./videodownlinkbandwidthpolicy/VideoPreferences"));
exports.VideoPreferences = VideoPreferences_1.default;
const VideoPriorityBasedPolicy_1 = __importDefault(require("./videodownlinkbandwidthpolicy/VideoPriorityBasedPolicy"));
exports.VideoPriorityBasedPolicy = VideoPriorityBasedPolicy_1.default;
const VideoPriorityBasedPolicyConfig_1 = __importDefault(require("./videodownlinkbandwidthpolicy/VideoPriorityBasedPolicyConfig"));
exports.VideoPriorityBasedPolicyConfig = VideoPriorityBasedPolicyConfig_1.default;
const VideoQualityAdaptationPreference_1 = __importDefault(require("./videodownlinkbandwidthpolicy/VideoQualityAdaptationPreference"));
exports.VideoQualityAdaptationPreference = VideoQualityAdaptationPreference_1.default;
const VideoQualitySettings_1 = __importDefault(require("./devicecontroller/VideoQualitySettings"));
exports.VideoQualitySettings = VideoQualitySettings_1.default;
const VideoSource_1 = __importDefault(require("./videosource/VideoSource"));
exports.VideoSource = VideoSource_1.default;
const VideoStreamDescription_1 = __importDefault(require("./videostreamindex/VideoStreamDescription"));
exports.VideoStreamDescription = VideoStreamDescription_1.default;
const VideoTileState_1 = __importDefault(require("./videotile/VideoTileState"));
exports.VideoTileState = VideoTileState_1.default;
const VoiceFocusDeviceTransformer_1 = __importDefault(require("./voicefocus/VoiceFocusDeviceTransformer"));
exports.VoiceFocusDeviceTransformer = VoiceFocusDeviceTransformer_1.default;
const VoiceFocusTransformDevice_1 = __importDefault(require("./voicefocus/VoiceFocusTransformDevice"));
exports.VoiceFocusTransformDevice = VoiceFocusTransformDevice_1.default;
const WaitForAttendeePresenceTask_1 = __importDefault(require("./task/WaitForAttendeePresenceTask"));
exports.WaitForAttendeePresenceTask = WaitForAttendeePresenceTask_1.default;
const WebSocketReadyState_1 = __importDefault(require("./websocketadapter/WebSocketReadyState"));
exports.WebSocketReadyState = WebSocketReadyState_1.default;
const ZLIBTextCompressor_1 = __importDefault(require("./sdp/ZLIBTextCompressor"));
exports.ZLIBTextCompressor = ZLIBTextCompressor_1.default;
const VideoPreferences_2 = require("./videodownlinkbandwidthpolicy/VideoPreferences");
Object.defineProperty(exports, "MutableVideoPreferences", { enumerable: true, get: function () { return VideoPreferences_2.MutableVideoPreferences; } });
const Types_1 = require("./utils/Types");
Object.defineProperty(exports, "Some", { enumerable: true, get: function () { return Types_1.Some; } });
Object.defineProperty(exports, "None", { enumerable: true, get: function () { return Types_1.None; } });
Object.defineProperty(exports, "Maybe", { enumerable: true, get: function () { return Types_1.Maybe; } });
const AudioTransformDevice_1 = require("./devicecontroller/AudioTransformDevice");
Object.defineProperty(exports, "isAudioTransformDevice", { enumerable: true, get: function () { return AudioTransformDevice_1.isAudioTransformDevice; } });
const Destroyable_1 = require("./destroyable/Destroyable");
Object.defineProperty(exports, "isDestroyable", { enumerable: true, get: function () { return Destroyable_1.isDestroyable; } });
const VideoTransformDevice_1 = require("./devicecontroller/VideoTransformDevice");
Object.defineProperty(exports, "isVideoTransformDevice", { enumerable: true, get: function () { return VideoTransformDevice_1.isVideoTransformDevice; } });
//# sourceMappingURL=index.js.map