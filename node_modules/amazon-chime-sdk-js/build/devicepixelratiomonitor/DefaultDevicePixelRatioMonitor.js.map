{"version":3,"file":"DefaultDevicePixelRatioMonitor.js","sourceRoot":"","sources":["../../src/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;AAQtC,MAAqB,8BAA8B;IAKjD,YAAoB,sBAA8C,EAAE,MAAc;QAA9D,2BAAsB,GAAtB,sBAAsB,CAAwB;QAH1D,kBAAa,GAAG,IAAI,GAAG,EAA4B,CAAC;QAkC5D,uBAAkB,GAAG,GAAS,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBACxC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,CAAC,CAAC;YACvF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAlCA,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACjC,OAAO;SACR;QAED,MAAM,cAAc,GAAG,UAAU,CAC/B,gBAAgB,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,OAAO,CACtE,CAAC;QACF,IAAI,OAAO,cAAc,CAAC,gBAAgB,KAAK,UAAU,EAAE;YACzD,cAAc,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACnE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;SACtC;aAAM,IAAI,OAAO,cAAc,CAAC,WAAW,KAAK,UAAU,EAAE;YAC3D,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACpD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;SACtC;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;SACxD;IACH,CAAC;IAEK,OAAO;;YACX,IAAI,IAAI,CAAC,cAAc,EAAE;gBACvB,IAAI,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,KAAK,UAAU,EAAE;oBAC9D,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBAC5E;qBAAM;oBACL,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBAC7D;aACF;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC;YAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC;KAAA;IAQD,gBAAgB,CAAC,QAAkC;QACjD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACjC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,CAAC,CAAC;IACnF,CAAC;IAED,cAAc,CAAC,QAAkC;QAC/C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;CACF;AAlDD,iDAkDC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Destroyable from '../destroyable/Destroyable';\nimport DevicePixelRatioObserver from '../devicepixelratioobserver/DevicePixelRatioObserver';\nimport DevicePixelRatioSource from '../devicepixelratiosource/DevicePixelRatioSource';\nimport Logger from '../logger/Logger';\nimport DevicePixelRatioMonitor from './DevicePixelRatioMonitor';\n\nexport default class DefaultDevicePixelRatioMonitor\n  implements DevicePixelRatioMonitor, Destroyable {\n  private observerQueue = new Set<DevicePixelRatioObserver>();\n  private mediaQueryList: undefined | MediaQueryList;\n\n  constructor(private devicePixelRatioSource: DevicePixelRatioSource, logger: Logger) {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const mediaQueryList = matchMedia(\n      `(resolution: ${this.devicePixelRatioSource.devicePixelRatio()}dppx)`\n    );\n    if (typeof mediaQueryList.addEventListener === 'function') {\n      mediaQueryList.addEventListener('change', this.mediaQueryListener);\n      this.mediaQueryList = mediaQueryList;\n    } else if (typeof mediaQueryList.addListener === 'function') {\n      mediaQueryList.addListener(this.mediaQueryListener);\n      this.mediaQueryList = mediaQueryList;\n    } else {\n      logger.warn('ignoring DefaultDevicePixelRatioMonitor');\n    }\n  }\n\n  async destroy(): Promise<void> {\n    if (this.mediaQueryList) {\n      if (typeof this.mediaQueryList.addEventListener === 'function') {\n        this.mediaQueryList.removeEventListener('change', this.mediaQueryListener);\n      } else {\n        this.mediaQueryList.removeListener(this.mediaQueryListener);\n      }\n    }\n    delete this.mediaQueryListener;\n    this.observerQueue.clear();\n  }\n\n  mediaQueryListener = (): void => {\n    this.observerQueue.forEach(tileObserver => {\n      tileObserver.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n    });\n  };\n\n  registerObserver(observer: DevicePixelRatioObserver): void {\n    this.observerQueue.add(observer);\n    observer.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n  }\n\n  removeObserver(observer: DevicePixelRatioObserver): void {\n    this.observerQueue.delete(observer);\n  }\n}\n"]}