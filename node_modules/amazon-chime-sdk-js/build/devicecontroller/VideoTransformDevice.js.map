{"version":3,"file":"VideoTransformDevice.js","sourceRoot":"","sources":["../../src/devicecontroller/VideoTransformDevice.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAmCtC;;;;GAIG;AACH,SAAgB,sBAAsB,CAAC,MAAe;IACpD,OAAO,CACL,CAAC,CAAC,MAAM;QACR,OAAO,MAAM,KAAK,QAAQ;QAC1B,iBAAiB,IAAI,MAAM;QAC3B,MAAM,IAAI,MAAM;QAChB,iBAAiB,IAAI,MAAM,CAC5B,CAAC;AACJ,CAAC;AARD,wDAQC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Device from './Device';\n\n/**\n * A device that applies processing to another device.\n */\nexport default interface VideoTransformDevice {\n  /**\n   * `stop` should be called  to free any resources associated with the device.\n   * It must be called if `transformStream` is ever called.\n   */\n  stop(): Promise<void>;\n\n  /**\n   * Returns the inner {@link Device} that the device controller should select as active video device.\n   */\n  intrinsicDevice(): Promise<Device>;\n\n  /**\n   * Starts processing the input `MediaStream` and returns the output `MediaStream`.\n   */\n  transformStream(mediaStream?: MediaStream): Promise<MediaStream>;\n\n  /**\n   * `onOutputStreamDisconnect` is called when device controller disconnects the transformed video stream.\n   */\n  onOutputStreamDisconnect(): void;\n\n  /**\n   * `outputMediaStream` is generated after processors are applied. It will be auto-released after `stop` is called.\n   */\n  readonly outputMediaStream: MediaStream;\n}\n\n/**\n * `isVideoTransformDevice` is a type guard for {@link VideoTransformDevice}.\n *\n * @param device the value to check.\n */\nexport function isVideoTransformDevice(device: unknown): device is VideoTransformDevice {\n  return (\n    !!device &&\n    typeof device === 'object' &&\n    'transformStream' in device &&\n    'stop' in device &&\n    'intrinsicDevice' in device\n  );\n}\n"]}