{"version":3,"file":"SingleNodeAudioTransformDevice.js","sourceRoot":"","sources":["../../src/devicecontroller/SingleNodeAudioTransformDevice.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;AAKtC;;;;;;GAMG;AACH,MAA8B,8BAA8B;IAG1D,YAAsB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAEjC,IAAI,CAAC,MAAe;8DAAkB,CAAC;KAAA;IAE7C;;;;;OAKG;IACG,IAAI;;;YACR,MAAA,IAAI,CAAC,IAAI,0CAAE,UAAU,EAAE,CAAC;;KACzB;IAED;;;OAGG;IACG,eAAe;;YACnB,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;KAAA;IAED;;;;;OAKG;IACG,eAAe,CAAC,OAAqB;;;YACzC,MAAA,IAAI,CAAC,IAAI,0CAAE,UAAU,EAAE,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACtD,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,IAAI;gBAChB,GAAG,EAAE,IAAI,CAAC,IAAI;aACf,CAAC;;KACH;CAIF;AA1CD,iDA0CC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioNodeSubgraph from './AudioNodeSubgraph';\nimport Device from './Device';\n\n/**\n * This class simplifies the process of defining a transform device that\n * does not modify its input device constraints, and provides only a single audio node\n * to apply transforms.\n *\n * Subclass `SingleNodeAudioTransformDevice`, implementing `createSingleAudioNode`.\n */\nexport default abstract class SingleNodeAudioTransformDevice<T extends AudioNode> {\n  protected node: T | undefined;\n\n  constructor(protected inner: Device) {}\n\n  async mute(_muted: boolean): Promise<void> {}\n\n  /**\n   * `stop` should be called by the application to free any resources associated\n   * with the device (e.g., workers).\n   *\n   * After this is called, the device should be discarded.\n   */\n  async stop(): Promise<void> {\n    this.node?.disconnect();\n  }\n\n  /**\n   * Return the inner {@link Device} that the device controller should select as part\n   * of the application of this `AudioTransformDevice`.\n   */\n  async intrinsicDevice(): Promise<Device> {\n    return this.inner;\n  }\n\n  /**\n   * Optionally return a pair of `AudioNode`s that should be connected to the applied inner\n   * device. The two nodes can be the same, indicating the smallest possible subgraph.\n   *\n   * @param context The `AudioContext` to use when instantiating the nodes.\n   */\n  async createAudioNode(context: AudioContext): Promise<AudioNodeSubgraph | undefined> {\n    this.node?.disconnect();\n    this.node = await this.createSingleAudioNode(context);\n    return {\n      start: this.node,\n      end: this.node,\n    };\n  }\n\n  // Implement this.\n  abstract createSingleAudioNode(context: AudioContext): Promise<T>;\n}\n"]}