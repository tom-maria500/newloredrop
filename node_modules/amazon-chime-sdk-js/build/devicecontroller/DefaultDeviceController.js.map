{"version":3,"file":"DefaultDeviceController.js","sourceRoot":"","sources":["../../src/devicecontroller/DefaultDeviceController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport ExtendedBrowserBehavior from '../browserbehavior/ExtendedBrowserBehavior';\nimport type { Destroyable } from '../destroyable/Destroyable';\nimport DeviceChangeObserver from '../devicechangeobserver/DeviceChangeObserver';\nimport EventController from '../eventcontroller/EventController';\nimport Logger from '../logger/Logger';\nimport DefaultMediaDeviceFactory from '../mediadevicefactory/DefaultMediaDeviceFactory';\nimport DeviceControllerBasedMediaStreamBroker from '../mediastreambroker/DeviceControllerBasedMediaStreamBroker';\nimport MediaStreamBrokerObserver from '../mediastreambrokerobserver/MediaStreamBrokerObserver';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport PromiseQueue from '../utils/PromiseQueue';\nimport { Maybe } from '../utils/Types';\nimport DefaultVideoTransformDevice from '../videoframeprocessor/DefaultVideoTransformDevice';\nimport DefaultVideoTile from '../videotile/DefaultVideoTile';\nimport AudioInputDevice from './AudioInputDevice';\nimport AudioNodeSubgraph from './AudioNodeSubgraph';\nimport AudioTransformDevice, { isAudioTransformDevice } from './AudioTransformDevice';\nimport Device from './Device';\nimport DeviceSelection from './DeviceSelection';\nimport GetUserMediaError from './GetUserMediaError';\nimport NotFoundError from './NotFoundError';\nimport NotReadableError from './NotReadableError';\nimport OverconstrainedError from './OverconstrainedError';\nimport PermissionDeniedError from './PermissionDeniedError';\nimport RemovableAnalyserNode from './RemovableAnalyserNode';\nimport TypeError from './TypeError';\nimport VideoInputDevice from './VideoInputDevice';\nimport VideoQualitySettings from './VideoQualitySettings';\nimport VideoTransformDevice, { isVideoTransformDevice } from './VideoTransformDevice';\n\ntype Thunk = () => void;\n\nexport default class DefaultDeviceController\n  implements DeviceControllerBasedMediaStreamBroker, Destroyable {\n  private static permissionDeniedOriginDetectionThresholdMs = 500;\n  private static defaultVideoWidth = 960;\n  private static defaultVideoHeight = 540;\n  private static defaultVideoFrameRate = 15;\n  private static defaultSampleRate = 48000;\n  private static defaultSampleSize = 16;\n  private static defaultChannelCount = 1;\n  private static defaultLatencyHint?: AudioContextLatencyCategory | number;\n  private static audioContext: AudioContext | null = null;\n\n  private deviceInfoCache: MediaDeviceInfo[] | null = null;\n\n  // `activeDevices` is really a set of `DeviceSelection`s. Track the actual device here.\n  private transform: { nodes: AudioNodeSubgraph | undefined; device: AudioTransformDevice };\n\n  private activeDevices: { [kind: string]: DeviceSelection | null } = { audio: null, video: null };\n\n  // `chosenVideoTransformDevice` is tracked and owned by device controller.\n  // It is saved when `chooseVideoInputDevice` is called with VideoTransformDevice object.\n  private chosenVideoTransformDevice: VideoTransformDevice | null = null;\n  private audioOutputDeviceId: string | undefined = undefined;\n  private deviceChangeObservers: Set<DeviceChangeObserver> = new Set<DeviceChangeObserver>();\n  private mediaStreamBrokerObservers: Set<MediaStreamBrokerObserver> = new Set<\n    MediaStreamBrokerObserver\n  >();\n  private deviceLabelTrigger = (): Promise<MediaStream> => {\n    return navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n  };\n  private audioInputDestinationNode: MediaStreamAudioDestinationNode | null = null;\n  private audioInputSourceNode: MediaStreamAudioSourceNode | null = null;\n\n  private mediaDeviceWrapper: MediaDevices | undefined;\n  private onDeviceChangeCallback?: Thunk;\n\n  private videoInputQualitySettings: VideoQualitySettings = null;\n\n  private readonly useWebAudio: boolean = false;\n  private readonly useMediaConstraintsFallback: boolean = true;\n\n  private audioInputTaskQueue: PromiseQueue = new PromiseQueue();\n  private videoInputTaskQueue: PromiseQueue = new PromiseQueue();\n\n  private muted: boolean = false;\n\n  // This handles the dispatch of `mute` and `unmute` events from audio tracks.\n  // There's a bit of a semantic mismatch here if input streams allow individual component tracks to be muted,\n  // but addressing that gap is not feasible in our stream-oriented world.\n  private mediaStreamMuteObserver = (id: string | MediaStream, muted: boolean): void => {\n    for (const observer of this.deviceChangeObservers) {\n      AsyncScheduler.nextTick(() => {\n        /* istanbul ignore else */\n        if (this.deviceChangeObservers.has(observer) && observer.audioInputMuteStateChanged) {\n          observer.audioInputMuteStateChanged(id, muted);\n        }\n      });\n    }\n  };\n\n  constructor(\n    private logger: Logger,\n    options?: { enableWebAudio?: boolean; useMediaConstraintsFallback?: boolean },\n    private browserBehavior: ExtendedBrowserBehavior = new DefaultBrowserBehavior(),\n    public eventController?: EventController\n  ) {\n    const { enableWebAudio = false, useMediaConstraintsFallback = true } = options || {};\n    this.useWebAudio = enableWebAudio;\n    this.useMediaConstraintsFallback = useMediaConstraintsFallback;\n\n    this.videoInputQualitySettings = new VideoQualitySettings(\n      DefaultDeviceController.defaultVideoWidth,\n      DefaultDeviceController.defaultVideoHeight,\n      DefaultDeviceController.defaultVideoFrameRate\n    );\n\n    const dimension = this.browserBehavior.requiresResolutionAlignment(\n      this.videoInputQualitySettings.videoWidth,\n      this.videoInputQualitySettings.videoHeight\n    );\n    this.videoInputQualitySettings.videoWidth = dimension[0];\n    this.videoInputQualitySettings.videoHeight = dimension[1];\n    this.logger.info(\n      `DefaultDeviceController video dimension ${this.videoInputQualitySettings.videoWidth} x ${this.videoInputQualitySettings.videoHeight}`\n    );\n\n    try {\n      this.mediaDeviceWrapper = new DefaultMediaDeviceFactory().create();\n      const supportedConstraints = navigator.mediaDevices.getSupportedConstraints();\n      this.logger.info(\n        `Supported Constraints in this browser ${JSON.stringify(supportedConstraints)}`\n      );\n    } catch (error) {\n      logger.error(error.message);\n    }\n  }\n\n  private isWatchingForDeviceChanges(): boolean {\n    return !!this.onDeviceChangeCallback;\n  }\n\n  private ensureWatchingDeviceChanges(): void {\n    if (this.isWatchingForDeviceChanges()) {\n      return;\n    }\n    this.logger.info('Starting devicechange listener.');\n    this.onDeviceChangeCallback = () => {\n      this.logger.info('Device change event callback is triggered');\n      this.handleDeviceChange();\n    };\n    this.mediaDeviceWrapper?.addEventListener('devicechange', this.onDeviceChangeCallback);\n  }\n\n  /**\n   * Unsubscribe from the `devicechange` event, which allows the device controller to\n   * update its device cache.\n   */\n  private stopWatchingDeviceChanges(): void {\n    if (!this.isWatchingForDeviceChanges()) {\n      return;\n    }\n    this.logger.info('Stopping devicechange listener.');\n    this.mediaDeviceWrapper?.removeEventListener('devicechange', this.onDeviceChangeCallback);\n    this.onDeviceChangeCallback = undefined;\n  }\n\n  private shouldObserveDeviceChanges(): boolean {\n    if (this.deviceChangeObservers.size) {\n      return true;\n    }\n\n    const hasActiveDevices =\n      (this.activeDevices['audio'] && this.activeDevices['audio'].constraints !== null) ||\n      (this.activeDevices['video'] && this.activeDevices['video'].constraints !== null) ||\n      !!this.audioOutputDeviceId;\n    return hasActiveDevices;\n  }\n\n  private watchForDeviceChangesIfNecessary(): void {\n    if (this.shouldObserveDeviceChanges()) {\n      this.ensureWatchingDeviceChanges();\n    } else {\n      this.stopWatchingDeviceChanges();\n    }\n  }\n\n  async destroy(): Promise<void> {\n    // Remove device change callbacks.\n    this.stopWatchingDeviceChanges();\n\n    // Deselect any audio input devices and throw away the streams.\n    // Discard the current video device, if there is one.\n    // Discard any audio or video transforms.\n    await this.stopAudioInput();\n    await this.stopVideoInput();\n  }\n\n  async listAudioInputDevices(forceUpdate: boolean = false): Promise<MediaDeviceInfo[]> {\n    const result = await this.listDevicesOfKind('audioinput', forceUpdate);\n    this.trace('listAudioInputDevices', forceUpdate, result);\n    return result;\n  }\n\n  async listVideoInputDevices(forceUpdate: boolean = false): Promise<MediaDeviceInfo[]> {\n    const result = await this.listDevicesOfKind('videoinput', forceUpdate);\n    this.trace('listVideoInputDevices', forceUpdate, result);\n    return result;\n  }\n\n  async listAudioOutputDevices(forceUpdate: boolean = false): Promise<MediaDeviceInfo[]> {\n    const result = await this.listDevicesOfKind('audiooutput', forceUpdate);\n    this.trace('listAudioOutputDevices', forceUpdate, result);\n    return result;\n  }\n\n  private pushAudioMeetingStateForPermissions(audioStream: MediaStream | undefined): void {\n    this.eventController?.publishEvent(\n      audioStream === undefined ? 'audioInputUnselected' : 'audioInputSelected'\n    );\n  }\n\n  private pushVideoMeetingStateForPermissions(videoStream: MediaStream | undefined): void {\n    this.eventController?.publishEvent(\n      videoStream === undefined ? 'videoInputUnselected' : 'videoInputSelected'\n    );\n  }\n\n  async startAudioInput(device: AudioInputDevice): Promise<MediaStream | undefined> {\n    return await this.audioInputTaskQueue.add(() => this.startAudioInputTask(device));\n  }\n\n  private async startAudioInputTask(device: AudioInputDevice): Promise<MediaStream | undefined> {\n    if (device === undefined) {\n      this.logger.error('Audio input device cannot be undefined');\n      return undefined;\n    }\n\n    try {\n      if (isAudioTransformDevice(device)) {\n        // N.B., do not JSON.stringify here — for some kinds of devices this\n        // will cause a cyclic object reference error.\n        this.logger.info(`Choosing transform input device ${device}`);\n\n        await this.chooseAudioTransformInputDevice(device);\n      } else {\n        this.logger.info(`Choosing intrinsic audio input device ${device}`);\n        this.removeTransform();\n        await this.chooseInputIntrinsicDevice('audio', device);\n      }\n      this.trace('startAudioInputDevice', device, `success`);\n      // For web audio, the audio destination stream stays the same so audio input did not change\n      if (this.useWebAudio) {\n        this.attachAudioInputStreamToAudioContext(this.activeDevices['audio'].stream);\n        this.pushAudioMeetingStateForPermissions(this.getMediaStreamDestinationNode().stream);\n        await this.transform?.device.mute(this.muted);\n        return this.getMediaStreamDestinationNode().stream;\n      } else {\n        this.publishAudioInputDidChangeEvent(this.activeDevices['audio'].stream);\n        return this.activeDevices['audio'].stream;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async stopAudioInput(): Promise<void> {\n    return this.audioInputTaskQueue.add(() => this.stopAudioInputTask());\n  }\n\n  private async stopAudioInputTask(): Promise<void> {\n    try {\n      if (this.useWebAudio) {\n        this.releaseAudioTransformStream();\n        return;\n      }\n      this.stopTracksAndRemoveCallbacks('audio');\n    } finally {\n      this.watchForDeviceChangesIfNecessary();\n      this.publishAudioInputDidChangeEvent(undefined);\n    }\n  }\n\n  private async chooseAudioTransformInputDevice(device: AudioTransformDevice): Promise<void> {\n    if (this.transform?.device === device) {\n      return;\n    }\n\n    if (!this.useWebAudio) {\n      throw new Error('Cannot apply transform device without enabling Web Audio.');\n    }\n\n    const context = DefaultDeviceController.getAudioContext();\n\n    if (context instanceof OfflineAudioContext) {\n      // Nothing to do.\n    } else {\n      switch (context.state) {\n        case 'running':\n          // Nothing to do.\n          break;\n        case 'closed':\n          // A closed context cannot be used for creating nodes, so the correct\n          // thing to do is to raise a descriptive error sooner.\n          throw new Error('Cannot choose a transform device with a closed audio context.');\n        case 'suspended':\n          // A context might be suspended after page load. We try to resume it\n          // here, otherwise audio won't work.\n          await context.resume();\n      }\n    }\n\n    let nodes;\n    try {\n      nodes = await device.createAudioNode(context);\n    } catch (e) {\n      this.logger.error(`Unable to create transform device node: ${e}.`);\n      throw e;\n    }\n\n    // Pick the plain ol' inner device as the source. It will be\n    // connected to the node.\n    const inner = await device.intrinsicDevice();\n    await this.chooseInputIntrinsicDevice('audio', inner);\n    this.logger.debug(`Got inner stream: ${inner}.`);\n    // Otherwise, continue: hook up the new node.\n    this.setTransform(device, nodes);\n  }\n\n  private async chooseVideoTransformInputDevice(device: VideoTransformDevice): Promise<void> {\n    if (this.eventController && device instanceof DefaultVideoTransformDevice) {\n      device.passEventControllerToProcessors(this.eventController);\n    }\n    if (device === this.chosenVideoTransformDevice) {\n      this.logger.info('Reselecting same VideoTransformDevice');\n      return;\n    }\n\n    const prevVideoTransformDevice = this.chosenVideoTransformDevice;\n    if (prevVideoTransformDevice) {\n      this.logger.info('Switched from previous VideoTransformDevice');\n    }\n    const wasUsingTransformDevice = !!prevVideoTransformDevice;\n    const inner = await device.intrinsicDevice();\n    const canReuseMediaStream = this.isMediaStreamReusableByDeviceId(\n      this.activeDevices['video']?.stream,\n      inner\n    );\n    if (!canReuseMediaStream) {\n      this.logger.info('video transform device needs new intrinsic device');\n      if (wasUsingTransformDevice) {\n        // detach input media stream - turn off the camera or leave it be if inner is media stream\n        prevVideoTransformDevice.onOutputStreamDisconnect();\n      }\n      this.chosenVideoTransformDevice = device;\n      // VideoTransformDevice owns input MediaStream\n      this.activeDevices['video'] = null;\n      await this.chooseInputIntrinsicDevice('video', inner);\n      this.logger.info('apply processors to transform');\n      await this.chosenVideoTransformDevice.transformStream(this.activeDevices['video'].stream);\n      return;\n    }\n\n    // When saved stream is reusable, only switch the saved stream to filtered stream for sending\n    // but keep the saved stream intact.\n\n    // Note: to keep the chosen media stream intact, it is important to avoid a full stop\n    // because videoTileUpdate can be called when video is stopped and user might call `bindVideoElement` to disconnect the element.\n    // In current implementation, disconnecting the element will `hard` stop the media stream.\n\n    // Update device and stream\n    this.chosenVideoTransformDevice = device;\n    this.logger.info('video transform device uses previous stream');\n\n    // `transformStream` will start processing.\n    this.logger.info('apply processors to transform');\n    await device.transformStream(this.activeDevices['video'].stream);\n  }\n\n  async startVideoInput(device: VideoInputDevice): Promise<MediaStream | undefined> {\n    return await this.videoInputTaskQueue.add(() => this.startVideoInputTask(device));\n  }\n\n  private async startVideoInputTask(device: VideoInputDevice): Promise<MediaStream | undefined> {\n    if (!device) {\n      this.logger.error('Invalid video input device');\n      return undefined;\n    }\n\n    try {\n      if (isVideoTransformDevice(device)) {\n        this.logger.info(`Choosing video transform device ${device}`);\n        await this.chooseVideoTransformInputDevice(device);\n        this.publishVideoInputDidChangeEvent(this.chosenVideoTransformDevice.outputMediaStream);\n        return this.chosenVideoTransformDevice.outputMediaStream;\n      }\n\n      // handle direct switching from VideoTransformDevice to Device\n      // From WebRTC point, it is a device switching.\n      if (this.chosenVideoInputIsTransformDevice()) {\n        // disconnect old stream\n        this.chosenVideoTransformDevice.onOutputStreamDisconnect();\n        this.chosenVideoTransformDevice = null;\n      }\n      await this.chooseInputIntrinsicDevice('video', device);\n\n      this.trace('startVideoInputDevice', device);\n      this.publishVideoInputDidChangeEvent(this.activeDevices['video'].stream);\n      return this.activeDevices['video'].stream;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async stopVideoInput(): Promise<void> {\n    return this.videoInputTaskQueue.add(() => this.stopVideoInputTask());\n  }\n\n  private async stopVideoInputTask(): Promise<void> {\n    try {\n      if (this.chosenVideoInputIsTransformDevice()) {\n        this.releaseVideoTransformStream();\n        return;\n      }\n      this.stopTracksAndRemoveCallbacks('video');\n    } finally {\n      this.watchForDeviceChangesIfNecessary();\n      this.publishVideoInputDidChangeEvent(undefined);\n    }\n  }\n\n  async chooseAudioOutput(deviceId: string | null): Promise<void> {\n    this.audioOutputDeviceId = deviceId;\n    this.watchForDeviceChangesIfNecessary();\n    const deviceInfo = this.deviceInfoFromDeviceId('audiooutput', this.audioOutputDeviceId);\n    this.publishAudioOutputDidChangeEvent(deviceInfo);\n    this.trace('chooseAudioOutput', deviceId, null);\n    return;\n  }\n\n  addDeviceChangeObserver(observer: DeviceChangeObserver): void {\n    this.logger.info('adding device change observer');\n    this.deviceChangeObservers.add(observer);\n    this.watchForDeviceChangesIfNecessary();\n    this.trace('addDeviceChangeObserver');\n  }\n\n  removeDeviceChangeObserver(observer: DeviceChangeObserver): void {\n    this.logger.info('removing device change observer');\n    this.deviceChangeObservers.delete(observer);\n    this.watchForDeviceChangesIfNecessary();\n    this.trace('removeDeviceChangeObserver');\n  }\n\n  createAnalyserNodeForAudioInput(): RemovableAnalyserNode | null {\n    if (!this.activeDevices['audio']) {\n      return null;\n    }\n\n    // If there is a WebAudio node in the graph, we use that as the source instead of the stream.\n    const node = this.transform?.nodes?.end;\n    if (node) {\n      const analyser = node.context.createAnalyser() as RemovableAnalyserNode;\n\n      analyser.removeOriginalInputs = () => {\n        try {\n          node.disconnect(analyser);\n        } catch (e) {\n          // This can fail in some unusual cases, but this is best-effort.\n        }\n      };\n\n      node.connect(analyser);\n      return analyser;\n    }\n\n    return this.createAnalyserNodeForRawAudioInput();\n  }\n\n  //\n  // N.B., this bypasses any applied transform node.\n  //\n  createAnalyserNodeForRawAudioInput(): RemovableAnalyserNode | null {\n    if (!this.activeDevices['audio']) {\n      return null;\n    }\n    return this.createAnalyserNodeForStream(this.activeDevices['audio'].stream);\n  }\n\n  private createAnalyserNodeForStream(stream: MediaStream): RemovableAnalyserNode {\n    const audioContext = DefaultDeviceController.getAudioContext();\n    const analyser = audioContext.createAnalyser() as RemovableAnalyserNode;\n    const source = audioContext.createMediaStreamSource(stream);\n    source.connect(analyser);\n    this.trace('createAnalyserNodeForAudioInput');\n\n    analyser.removeOriginalInputs = () => {\n      try {\n        source.disconnect(analyser);\n      } catch (e) {\n        // This can fail in some unusual cases, but this is best-effort.\n      }\n    };\n\n    return analyser;\n  }\n\n  startVideoPreviewForVideoInput(element: HTMLVideoElement): void {\n    if (!this.activeDevices['video']) {\n      this.logger.warn('cannot bind video preview since video input device has not been chosen');\n      this.trace('startVideoPreviewForVideoInput', element.id);\n      return;\n    }\n    DefaultVideoTile.connectVideoStreamToVideoElement(\n      this.chosenVideoTransformDevice\n        ? this.chosenVideoTransformDevice.outputMediaStream\n        : this.activeDevices['video'].stream,\n      element,\n      true\n    );\n    this.trace('startVideoPreviewForVideoInput', element.id);\n  }\n\n  stopVideoPreviewForVideoInput(element: HTMLVideoElement): void {\n    DefaultVideoTile.disconnectVideoStreamFromVideoElement(element, false);\n    this.trace('stopVideoPreviewForVideoInput', element.id);\n  }\n\n  setDeviceLabelTrigger(trigger: () => Promise<MediaStream>): void {\n    // Discard the cache if it was populated with unlabeled devices.\n    if (this.deviceInfoCache) {\n      for (const device of this.deviceInfoCache) {\n        if (!device.label) {\n          this.deviceInfoCache = null;\n          break;\n        }\n      }\n    }\n\n    this.deviceLabelTrigger = trigger;\n    this.trace('setDeviceLabelTrigger');\n  }\n\n  mixIntoAudioInput(stream: MediaStream): MediaStreamAudioSourceNode {\n    let node: MediaStreamAudioSourceNode | null = null;\n    if (this.useWebAudio) {\n      node = DefaultDeviceController.getAudioContext().createMediaStreamSource(stream);\n      node.connect(this.getMediaStreamOutputNode());\n    } else {\n      this.logger.warn('WebAudio is not enabled, mixIntoAudioInput will not work');\n    }\n\n    this.trace('mixIntoAudioInput', stream.id);\n    return node;\n  }\n\n  chooseVideoInputQuality(width: number, height: number, frameRate: number): void {\n    const dimension = this.browserBehavior.requiresResolutionAlignment(width, height);\n    this.videoInputQualitySettings = new VideoQualitySettings(\n      dimension[0],\n      dimension[1],\n      frameRate\n    );\n  }\n\n  getVideoInputQualitySettings(): VideoQualitySettings | null {\n    return this.videoInputQualitySettings;\n  }\n\n  async acquireAudioInputStream(): Promise<MediaStream> {\n    if (!this.activeDevices['audio']) {\n      this.logger.info(`No audio device chosen, creating empty audio device`);\n      await this.startAudioInput(null);\n    }\n\n    if (this.useWebAudio) {\n      const dest = this.getMediaStreamDestinationNode();\n      return dest.stream;\n    }\n    return this.activeDevices['audio'].stream;\n  }\n\n  async acquireVideoInputStream(): Promise<MediaStream> {\n    if (!this.activeDevices['video']) {\n      throw new Error(`No video device chosen`);\n    }\n    if (this.chosenVideoInputIsTransformDevice()) {\n      return this.chosenVideoTransformDevice.outputMediaStream;\n    }\n    return this.activeDevices['video'].stream;\n  }\n\n  async acquireDisplayInputStream(\n    _streamConstraints: MediaStreamConstraints\n  ): Promise<MediaStream> {\n    throw new Error('unsupported');\n  }\n\n  /**\n   *\n   * We need to do three things to clean up audio input\n   *\n   * * Close the tracks of the source stream.\n   * * Remove the transform.\n   * * Clean up the intrinsic stream's callback -- that's the stream that's tracked in\n   *   `activeDevices` and needs to have its callbacks removed.\n   */\n  private releaseAudioTransformStream(): void {\n    this.logger.info('Stopping audio track for Web Audio graph');\n\n    this.stopTracksAndRemoveCallbacks('audio');\n\n    this.logger.info('Removing audio transform, if there is one.');\n    this.removeTransform();\n\n    // Remove the input and output nodes. They will be recreated later if\n    // needed.\n    /* istanbul ignore else */\n    if (this.audioInputSourceNode) {\n      this.audioInputSourceNode.disconnect();\n      this.audioInputSourceNode = undefined;\n    }\n\n    /* istanbul ignore else */\n    if (this.audioInputDestinationNode) {\n      this.audioInputDestinationNode.disconnect();\n      this.audioInputDestinationNode = undefined;\n    }\n  }\n\n  /**\n   *\n   * We need to do three things to clean up video input\n   *\n   * * Close the tracks of the source stream.\n   * * Remove the transform.\n   * * Clean up the intrinsic stream's callback -- that's the stream that's tracked in\n   *   `activeDevices` and needs to have its callbacks removed.\n   */\n  private releaseVideoTransformStream(): void {\n    this.logger.info('Stopping video track for transform');\n\n    this.stopTracksAndRemoveCallbacks('video');\n\n    this.logger.info('Disconnecting video transform');\n    this.chosenVideoTransformDevice.onOutputStreamDisconnect();\n    this.chosenVideoTransformDevice = null;\n  }\n\n  private stopTracksAndRemoveCallbacks(kind: 'video' | 'audio'): void {\n    const activeDevice = this.activeDevices[kind];\n\n    // Just-in-case error handling.\n    /* istanbul ignore if */\n    if (!activeDevice) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    const endedCallback = activeDevice.endedCallback;\n    const trackMuteCallback = activeDevice.trackMuteCallback;\n    const trackUnmuteCallback = activeDevice.trackUnmuteCallback;\n\n    for (const track of activeDevice.stream.getTracks()) {\n      track.stop();\n\n      /* istanbul ignore else */\n      if (endedCallback) {\n        track.removeEventListener('ended', endedCallback);\n      }\n      /* istanbul ignore else */\n      if (trackMuteCallback) {\n        track.removeEventListener('mute', trackMuteCallback);\n      }\n      /* istanbul ignore else */\n      if (trackUnmuteCallback) {\n        track.removeEventListener('unmute', trackUnmuteCallback);\n      }\n\n      delete activeDevice.endedCallback;\n      delete activeDevice.trackMuteCallback;\n      delete activeDevice.trackUnmuteCallback;\n      delete this.activeDevices[kind];\n    }\n  }\n\n  private chosenVideoInputIsTransformDevice(): boolean {\n    return !!this.chosenVideoTransformDevice;\n  }\n\n  muteLocalAudioInputStream(): void {\n    this.toggleLocalAudioInputStream(false);\n  }\n\n  unmuteLocalAudioInputStream(): void {\n    this.toggleLocalAudioInputStream(true);\n  }\n\n  private toggleLocalAudioInputStream(enabled: boolean): void {\n    let audioDevice: MediaStreamAudioDestinationNode | DeviceSelection = this.activeDevices[\n      'audio'\n    ];\n    if (this.useWebAudio) {\n      audioDevice = this.getMediaStreamDestinationNode();\n    }\n    if (!audioDevice) {\n      return;\n    }\n    for (const track of audioDevice.stream.getTracks()) {\n      if (track.enabled === enabled) {\n        continue;\n      }\n      track.enabled = enabled;\n    }\n    if (this.muted !== !enabled) {\n      this.muted = !enabled;\n      this.transform?.device.mute(this.muted);\n    }\n  }\n\n  static getIntrinsicDeviceId(device: Device | null): string | string[] | undefined {\n    if (!device) {\n      return undefined;\n    }\n\n    if (typeof device === 'string') {\n      return device;\n    }\n\n    if ((device as MediaStream).id) {\n      return (device as MediaStream).id;\n    }\n\n    const constraints: MediaTrackConstraints = device as MediaTrackConstraints;\n    const deviceIdConstraints = constraints.deviceId;\n    if (!deviceIdConstraints) {\n      return undefined;\n    }\n\n    if (typeof deviceIdConstraints === 'string' || Array.isArray(deviceIdConstraints)) {\n      return deviceIdConstraints;\n    }\n\n    const constraintStringParams: ConstrainDOMStringParameters = deviceIdConstraints as ConstrainDOMStringParameters;\n    if (\n      typeof constraintStringParams.exact === 'string' ||\n      Array.isArray(constraintStringParams.exact)\n    ) {\n      return constraintStringParams.exact;\n    }\n\n    return undefined;\n  }\n\n  static createEmptyAudioDevice(): MediaStream {\n    return DefaultDeviceController.synthesizeAudioDevice(0);\n  }\n\n  static synthesizeAudioDevice(toneHz: number): MediaStream {\n    const audioContext = DefaultDeviceController.getAudioContext();\n    const outputNode = audioContext.createMediaStreamDestination();\n    if (!toneHz) {\n      const source = audioContext.createBufferSource();\n\n      // The AudioContext object uses the sample rate of the default output device\n      // if not specified. Creating an AudioBuffer object with the output device's\n      // sample rate fails in some browsers, e.g. Safari with a Bluetooth headphone.\n      try {\n        source.buffer = audioContext.createBuffer(\n          1,\n          audioContext.sampleRate * 5,\n          audioContext.sampleRate\n        );\n      } catch (error) {\n        if (error && error.name === 'NotSupportedError') {\n          source.buffer = audioContext.createBuffer(\n            1,\n            DefaultDeviceController.defaultSampleRate * 5,\n            DefaultDeviceController.defaultSampleRate\n          );\n        } else {\n          throw error;\n        }\n      }\n\n      // Some browsers will not play audio out the MediaStreamDestination\n      // unless there is actually audio to play, so we add a small amount of\n      // noise here to ensure that audio is played out.\n      source.buffer.getChannelData(0)[0] = 0.0003;\n      source.loop = true;\n      source.connect(outputNode);\n      source.start();\n    } else {\n      const gainNode = audioContext.createGain();\n      gainNode.gain.value = 0.1;\n      gainNode.connect(outputNode);\n      const oscillatorNode = audioContext.createOscillator();\n      oscillatorNode.frequency.value = toneHz;\n      oscillatorNode.connect(gainNode);\n      oscillatorNode.start();\n    }\n    return outputNode.stream;\n  }\n\n  private async listDevicesOfKind(\n    deviceKind: string,\n    forceUpdate: boolean\n  ): Promise<MediaDeviceInfo[]> {\n    if (forceUpdate || this.deviceInfoCache === null || !this.isWatchingForDeviceChanges()) {\n      await this.updateDeviceInfoCacheFromBrowser();\n    }\n    return this.listCachedDevicesOfKind(deviceKind);\n  }\n\n  private async updateDeviceInfoCacheFromBrowser(): Promise<void> {\n    const doesNotHaveAccessToMediaDevices = typeof MediaDeviceInfo === 'undefined';\n    if (doesNotHaveAccessToMediaDevices) {\n      this.deviceInfoCache = [];\n      return;\n    }\n    let devices = await navigator.mediaDevices.enumerateDevices();\n    let hasDeviceLabels = true;\n    for (const device of devices) {\n      if (!device.label) {\n        hasDeviceLabels = false;\n        break;\n      }\n    }\n    if (!hasDeviceLabels) {\n      try {\n        this.logger.info('attempting to trigger media device labels since they are hidden');\n        const triggerStream = await this.deviceLabelTrigger();\n        devices = await navigator.mediaDevices.enumerateDevices();\n        for (const track of triggerStream.getTracks()) {\n          track.stop();\n        }\n      } catch (error) {\n        this.logger.info('unable to get media device labels');\n        this.eventController?.publishEvent('deviceLabelTriggerFailed', {\n          deviceLabelTriggerErrorMessage: this.getErrorMessage(error),\n        });\n      }\n    }\n    this.logger.debug(`Update device info cache with devices: ${JSON.stringify(devices)}`);\n    this.deviceInfoCache = devices;\n  }\n\n  private listCachedDevicesOfKind(deviceKind: string): MediaDeviceInfo[] {\n    const devicesOfKind: MediaDeviceInfo[] = [];\n    if (this.deviceInfoCache) {\n      for (const device of this.deviceInfoCache) {\n        if (device.kind === deviceKind) {\n          devicesOfKind.push(device);\n        }\n      }\n    }\n    return devicesOfKind;\n  }\n\n  private alreadyHandlingDeviceChange = false;\n  private async handleDeviceChange(): Promise<void> {\n    if (this.deviceInfoCache === null) {\n      return;\n    }\n    if (this.alreadyHandlingDeviceChange) {\n      AsyncScheduler.nextTick(() => {\n        this.handleDeviceChange();\n      });\n      return;\n    }\n    this.alreadyHandlingDeviceChange = true;\n    const oldAudioInputDevices = this.listCachedDevicesOfKind('audioinput');\n    const oldVideoInputDevices = this.listCachedDevicesOfKind('videoinput');\n    const oldAudioOutputDevices = this.listCachedDevicesOfKind('audiooutput');\n    await this.updateDeviceInfoCacheFromBrowser();\n    const newAudioInputDevices = this.listCachedDevicesOfKind('audioinput');\n    const newVideoInputDevices = this.listCachedDevicesOfKind('videoinput');\n    const newAudioOutputDevices = this.listCachedDevicesOfKind('audiooutput');\n    this.forEachObserver((observer: DeviceChangeObserver) => {\n      if (!this.areDeviceListsEqual(oldAudioInputDevices, newAudioInputDevices)) {\n        Maybe.of(observer.audioInputsChanged).map(f => f.bind(observer)(newAudioInputDevices));\n      }\n      if (!this.areDeviceListsEqual(oldVideoInputDevices, newVideoInputDevices)) {\n        Maybe.of(observer.videoInputsChanged).map(f => f.bind(observer)(newVideoInputDevices));\n      }\n      if (!this.areDeviceListsEqual(oldAudioOutputDevices, newAudioOutputDevices)) {\n        Maybe.of(observer.audioOutputsChanged).map(f => f.bind(observer)(newAudioOutputDevices));\n      }\n    });\n    this.alreadyHandlingDeviceChange = false;\n  }\n\n  private async handleDeviceStreamEnded(kind: 'audio' | 'video', deviceId: string): Promise<void> {\n    try {\n      if (kind === 'audio') {\n        if (\n          this.useWebAudio &&\n          this.browserBehavior.requiresAudioContextResetOnDeviceFailureForWebAudio()\n        ) {\n          this.logger.warn(\n            'Audio input device which was active is no longer available, suspending and resuming audio context before resetting to empty device to ensure packets are sent'\n          );\n          await this.stopAudioInput();\n          DefaultDeviceController.suspendAudioContext();\n          DefaultDeviceController.resumeAudioContext();\n        } else {\n          this.logger.warn(\n            'Audio input device which was active is no longer available, resetting to empty device to ensure packets are sent'\n          );\n        }\n        await this.startAudioInput(null);\n      } else {\n        this.logger.warn(\n          `Video input device which was active is no longer available, stopping video`\n        );\n        await this.stopVideoInput();\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      this.logger.error('Failed to choose null device after stream ended.');\n    }\n\n    if (kind === 'audio') {\n      this.forEachObserver((observer: DeviceChangeObserver) => {\n        Maybe.of(observer.audioInputStreamEnded).map(f => f.bind(observer)(deviceId));\n      });\n    } else {\n      this.forEachObserver((observer: DeviceChangeObserver) => {\n        Maybe.of(observer.videoInputStreamEnded).map(f => f.bind(observer)(deviceId));\n      });\n    }\n  }\n\n  private forEachObserver(observerFunc: (observer: DeviceChangeObserver) => void): void {\n    for (const observer of this.deviceChangeObservers) {\n      AsyncScheduler.nextTick(() => {\n        /* istanbul ignore else */\n        if (this.deviceChangeObservers.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  private forEachMediaStreamBrokerObserver(\n    observerFunc: (obsever: MediaStreamBrokerObserver) => void\n  ): void {\n    for (const observer of this.mediaStreamBrokerObservers) {\n      AsyncScheduler.nextTick(() => {\n        /* istanbul ignore else */\n        if (this.mediaStreamBrokerObservers.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  private areDeviceListsEqual(a: MediaDeviceInfo[], b: MediaDeviceInfo[]): boolean {\n    return (\n      JSON.stringify(a.map(device => JSON.stringify(device)).sort()) ===\n      JSON.stringify(b.map(device => JSON.stringify(device)).sort())\n    );\n  }\n\n  private intrinsicDeviceAsMediaStream(device: Device): MediaStream | null {\n    // @ts-ignore\n    return device && device.id ? device : null;\n  }\n\n  private hasSameMediaStreamId(\n    kind: string,\n    selection: DeviceSelection,\n    proposedConstraints: MediaStreamConstraints\n  ): boolean {\n    // Checking for stream using the fake constraint created in getMediaStreamConstraints\n    let streamId;\n    if (kind === 'audio') {\n      // @ts-ignore\n      streamId = proposedConstraints?.audio.streamId;\n      /* istanbul ignore next */\n      // @ts-ignore\n      return !!streamId && streamId === selection.constraints?.audio?.streamId;\n    }\n    /* istanbul ignore next */\n    // @ts-ignore\n    streamId = proposedConstraints?.video.streamId;\n    /* istanbul ignore next */\n    // @ts-ignore\n    return !!streamId && streamId === selection?.constraints?.video?.streamId;\n  }\n\n  private hasSameGroupId(groupId: string, kind: string, device: Device): boolean {\n    if (groupId === '') {\n      return true;\n    }\n    const deviceIds = DefaultDeviceController.getIntrinsicDeviceId(device);\n    this.logger.debug(\n      `Checking deviceIds ${deviceIds} of type ${typeof deviceIds} with groupId ${groupId}`\n    );\n    if (typeof deviceIds === 'string' && groupId === this.getGroupIdFromDeviceId(kind, deviceIds)) {\n      return true;\n    }\n    return false;\n  }\n\n  private getGroupIdFromDeviceId(kind: string, deviceId: string): string {\n    if (this.deviceInfoCache !== null) {\n      const cachedDeviceInfo = this.listCachedDevicesOfKind(`${kind}input`).find(\n        (cachedDevice: MediaDeviceInfo) => cachedDevice.deviceId === deviceId\n      );\n      if (cachedDeviceInfo && cachedDeviceInfo.groupId) {\n        this.logger.debug(\n          `GroupId of deviceId ${deviceId} found in cache is ${cachedDeviceInfo.groupId}`\n        );\n        return cachedDeviceInfo.groupId;\n      }\n    }\n    this.logger.debug(`GroupId of deviceId ${deviceId} found in cache is empty`);\n    return '';\n  }\n\n  private handleGetUserMediaError(error: Error, errorTimeMs?: number): void {\n    if (!error) {\n      throw new GetUserMediaError(error);\n    }\n\n    switch (error.name) {\n      case 'NotReadableError':\n      case 'TrackStartError':\n        throw new NotReadableError(error);\n      case 'NotFoundError':\n      case 'DevicesNotFoundError':\n        throw new NotFoundError(error);\n      case 'NotAllowedError':\n      case 'PermissionDeniedError':\n      case 'SecurityError':\n        if (\n          errorTimeMs &&\n          errorTimeMs < DefaultDeviceController.permissionDeniedOriginDetectionThresholdMs\n        ) {\n          throw new PermissionDeniedError(error, 'Permission denied by browser');\n        } else {\n          throw new PermissionDeniedError(error, 'Permission denied by user');\n        }\n      case 'OverconstrainedError':\n      case 'ConstraintNotSatisfiedError':\n        throw new OverconstrainedError(error);\n      case 'TypeError':\n        throw new TypeError(error);\n      case 'AbortError':\n      default:\n        throw new GetUserMediaError(error);\n    }\n  }\n\n  /**\n   * Check whether a device is already selected.\n   *\n   * @param kind typically 'audio' or 'video'.\n   * @param device the device about to be selected.\n   * @param selection the existing device selection of this kind.\n   * @param proposedConstraints the constraints that will be used when this device is selected.\n   * @returns whether `device` matches `selection` — that is, whether this device is already selected.\n   */\n  private matchesDeviceSelection(\n    kind: string,\n    device: Device,\n    selection: DeviceSelection | undefined,\n    proposedConstraints: MediaStreamConstraints\n  ): boolean {\n    if (\n      selection &&\n      selection.stream.active &&\n      (this.hasSameMediaStreamId(kind, selection, proposedConstraints) ||\n        (selection.groupId !== null && this.hasSameGroupId(selection.groupId, kind, device)))\n    ) {\n      // TODO: this should be computed within this function.\n      this.logger.debug(\n        `Compare current device constraint ${JSON.stringify(\n          selection.constraints\n        )} to proposed constraints ${JSON.stringify(proposedConstraints)}`\n      );\n      return selection.matchesConstraints(proposedConstraints);\n    }\n\n    return false;\n  }\n\n  private async chooseInputIntrinsicDevice(\n    kind: 'audio' | 'video',\n    device: Device | null\n  ): Promise<void> {\n    // N.B.,: the input device might already have augmented constraints supplied\n    // by an `AudioTransformDevice`. `getMediaStreamConstraints` will respect\n    // settings supplied by the device.\n    const proposedConstraints = this.getMediaStreamConstraints(kind, device);\n\n    // TODO: `matchesConstraints` should really return compatible/incompatible/exact --\n    // `applyConstraints` can be used to reuse the active device while changing the\n    // requested constraints.\n    if (this.matchesDeviceSelection(kind, device, this.activeDevices[kind], proposedConstraints)) {\n      this.logger.info(`reusing existing ${kind} input device`);\n      return;\n    }\n    if (this.activeDevices[kind] && this.activeDevices[kind].stream) {\n      this.stopTracksAndRemoveCallbacks(kind);\n    }\n\n    const startTimeMs = Date.now();\n    const newDevice: DeviceSelection = new DeviceSelection();\n    try {\n      this.logger.info(\n        `requesting new ${kind} device with constraint ${JSON.stringify(proposedConstraints)}`\n      );\n      const stream = this.intrinsicDeviceAsMediaStream(device);\n      if (kind === 'audio' && device === null) {\n        newDevice.stream = DefaultDeviceController.createEmptyAudioDevice() as MediaStream;\n        newDevice.constraints = null;\n      } else if (stream) {\n        this.logger.info(`using media stream ${stream.id} for ${kind} device`);\n        newDevice.stream = stream;\n        newDevice.constraints = proposedConstraints;\n      } else {\n        newDevice.stream = await navigator.mediaDevices.getUserMedia(proposedConstraints);\n        newDevice.constraints = proposedConstraints;\n      }\n      await this.handleNewInputDevice(kind, newDevice);\n    } catch (error) {\n      const errorMessage = this.getErrorMessage(error);\n\n      if (kind === 'audio') {\n        this.eventController?.publishEvent('audioInputFailed', {\n          audioInputErrorMessage: errorMessage,\n        });\n      } else {\n        this.eventController?.publishEvent('videoInputFailed', {\n          videoInputErrorMessage: errorMessage,\n        });\n      }\n\n      this.logger.error(\n        `failed to get ${kind} device for constraints ${JSON.stringify(\n          proposedConstraints\n        )}: ${errorMessage}`\n      );\n\n      let hasError = true;\n      // This is effectively `error instanceof OverconstrainedError` but works in Node.\n      if (error && 'constraint' in error) {\n        this.logger.error(`Over-constrained by constraint: ${error.constraint}`);\n        // Try to reduce the constraints if over-constraints\n        if (this.useMediaConstraintsFallback) {\n          const fallbackConstraints = this.getMediaStreamConstraints(kind, device, true);\n          const fallbackConstraintsJSON = JSON.stringify(fallbackConstraints);\n          if (fallbackConstraintsJSON !== JSON.stringify(proposedConstraints)) {\n            this.logger.info(\n              `retry requesting new ${kind} device with minimal constraint ${fallbackConstraintsJSON}`\n            );\n            try {\n              newDevice.stream = await navigator.mediaDevices.getUserMedia(fallbackConstraints);\n              newDevice.constraints = fallbackConstraints;\n              await this.handleNewInputDevice(kind, newDevice);\n              hasError = false;\n            } catch (e) {\n              this.logger.error(\n                `failed to get ${kind} device for constraints ${fallbackConstraintsJSON}: ${this.getErrorMessage(\n                  e\n                )}`\n              );\n            }\n          }\n        }\n      }\n\n      if (hasError) {\n        /*\n         * If there is any error while acquiring the audio device, we fall back to null device.\n         * Reason: If device selection fails (e.g. NotReadableError), the peer connection is left hanging\n         * with no active audio track since we release the previously attached track.\n         * If no audio packet has yet been sent to the server, the server will not emit the joined event.\n         */\n        if (kind === 'audio') {\n          this.logger.info(`choosing null ${kind} device instead`);\n          try {\n            newDevice.stream = DefaultDeviceController.createEmptyAudioDevice();\n            newDevice.constraints = null;\n            await this.handleNewInputDevice(kind, newDevice);\n          } catch (error) {\n            this.logger.error(\n              `failed to choose null ${kind} device. ${error.name}: ${error.message}`\n            );\n          }\n        }\n        this.handleGetUserMediaError(error, Date.now() - startTimeMs);\n      }\n    } finally {\n      this.watchForDeviceChangesIfNecessary();\n    }\n  }\n\n  private getErrorMessage(error: Error): string {\n    if (!error) {\n      return 'UnknownError';\n    }\n    if (error.name && error.message) {\n      return `${error.name}: ${error.message}`;\n    }\n    if (error.name) {\n      return error.name;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return 'UnknownError';\n  }\n\n  private async handleNewInputDevice(\n    kind: 'audio' | 'video',\n    newDevice: DeviceSelection\n  ): Promise<void> {\n    this.logger.info(`got ${kind} device for constraints ${JSON.stringify(newDevice.constraints)}`);\n    const newDeviceId = this.getMediaTrackSettings(newDevice.stream)?.deviceId;\n    newDevice.groupId = newDeviceId ? this.getGroupIdFromDeviceId(kind, newDeviceId) : '';\n    this.activeDevices[kind] = newDevice;\n    this.logger.debug(`Set activeDevice to ${JSON.stringify(newDevice)}`);\n    this.watchForDeviceChangesIfNecessary();\n\n    // Add event listener to detect ended event of media track\n    // We only monitor the first track, and use its device ID for observer notifications.\n    const track = newDevice.stream.getTracks()[0];\n\n    if (track) {\n      newDevice.endedCallback = (): void => {\n        // Hard to test, but the safety check is worthwhile.\n        /* istanbul ignore else */\n        if (this.activeDevices[kind] && this.activeDevices[kind].stream === newDevice.stream) {\n          this.handleDeviceStreamEnded(kind, newDeviceId);\n          delete newDevice.endedCallback;\n        }\n      };\n      track.addEventListener('ended', newDevice.endedCallback, { once: true });\n    }\n\n    // Add event listener to mute/unmute event for audio\n    if (kind === 'audio') {\n      // We only monitor the first track, and use its device ID for observer notifications.\n      const track = newDevice.stream.getAudioTracks()[0];\n      if (track) {\n        const id = track.getSettings().deviceId || newDevice.stream;\n\n        newDevice.trackMuteCallback = (): void => {\n          this.mediaStreamMuteObserver(id, true);\n        };\n        newDevice.trackUnmuteCallback = (): void => {\n          this.mediaStreamMuteObserver(id, false);\n        };\n        track.addEventListener('mute', newDevice.trackMuteCallback, { once: false });\n        track.addEventListener('unmute', newDevice.trackUnmuteCallback, { once: false });\n\n        this.logger.debug('Notifying mute state after selection');\n        if (track.muted) {\n          newDevice.trackMuteCallback();\n        } else {\n          newDevice.trackUnmuteCallback();\n        }\n      }\n    }\n  }\n\n  private calculateMediaStreamConstraints(\n    kind: string,\n    deviceId: string,\n    groupId: string,\n    minimal: boolean\n  ): MediaTrackConstraints | boolean {\n    // No need for any constraints if we want minimal constraint and there is only one device\n    if (minimal && this.listCachedDevicesOfKind(`${kind}input`).length === 1) {\n      return true;\n    }\n    const trackConstraints: MediaTrackConstraints = {};\n    // In Samsung Internet browser, navigator.mediaDevices.enumerateDevices()\n    // returns same deviceId but different groupdId for some audioinput and videoinput devices.\n    // To handle this, we select appropriate device using deviceId + groupId.\n    if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {\n      trackConstraints.deviceId = deviceId;\n    } else {\n      trackConstraints.deviceId = { exact: deviceId };\n    }\n    if (groupId) {\n      trackConstraints.groupId = groupId;\n    }\n\n    if (minimal) {\n      return trackConstraints;\n    }\n\n    // Video additional constraints\n    if (kind === 'video') {\n      trackConstraints.width = {\n        ideal: this.videoInputQualitySettings.videoWidth,\n      };\n      trackConstraints.height = {\n        ideal: this.videoInputQualitySettings.videoHeight,\n      };\n      trackConstraints.frameRate = {\n        ideal: this.videoInputQualitySettings.videoFrameRate,\n      };\n      return trackConstraints;\n    }\n\n    // Audio additional constraints\n    if (this.supportSampleRateConstraint()) {\n      trackConstraints.sampleRate = { ideal: DefaultDeviceController.defaultSampleRate };\n    }\n    if (this.supportSampleSizeConstraint()) {\n      trackConstraints.sampleSize = { ideal: DefaultDeviceController.defaultSampleSize };\n    }\n    if (this.supportChannelCountConstraint()) {\n      trackConstraints.channelCount = { ideal: DefaultDeviceController.defaultChannelCount };\n    }\n    const augmented = {\n      echoCancellation: true,\n      googEchoCancellation: true,\n      googEchoCancellation2: true,\n      googAutoGainControl: true,\n      googAutoGainControl2: true,\n      googNoiseSuppression: true,\n      googNoiseSuppression2: true,\n      googHighpassFilter: true,\n      ...trackConstraints,\n    };\n    return augmented as MediaTrackConstraints;\n  }\n\n  private getMediaStreamConstraintsFromTrackConstraints(\n    kind: 'audio' | 'video',\n    trackConstraints: MediaTrackConstraints | boolean\n  ): MediaStreamConstraints {\n    return kind === 'audio' ? { audio: trackConstraints } : { video: trackConstraints };\n  }\n\n  private getMediaStreamConstraints(\n    kind: 'audio' | 'video',\n    device: Device,\n    minimal: boolean = false\n  ): MediaStreamConstraints | null {\n    let trackConstraints: MediaTrackConstraints | boolean = {};\n    if (!device) {\n      return null;\n    }\n    const stream = this.intrinsicDeviceAsMediaStream(device);\n    if (stream) {\n      // @ts-ignore - create a fake track constraint using the stream id\n      trackConstraints.streamId = stream.id;\n      return this.getMediaStreamConstraintsFromTrackConstraints(kind, trackConstraints);\n    }\n    if (typeof device === 'string') {\n      let groupId = '';\n      if (this.browserBehavior.requiresGroupIdMediaStreamConstraints()) {\n        if (this.deviceInfoCache !== null) {\n          groupId = this.getGroupIdFromDeviceId(kind, device);\n        } else {\n          this.logger.error(\n            'Device cache is not populated. Please make sure to call list devices first'\n          );\n        }\n      }\n      trackConstraints = this.calculateMediaStreamConstraints(kind, device, groupId, minimal);\n      return this.getMediaStreamConstraintsFromTrackConstraints(kind, trackConstraints);\n    }\n\n    if (isMediaDeviceInfo(device)) {\n      trackConstraints = this.calculateMediaStreamConstraints(\n        kind,\n        device.deviceId,\n        device.groupId,\n        minimal\n      );\n      return this.getMediaStreamConstraintsFromTrackConstraints(kind, trackConstraints);\n    }\n    // Take the input set of constraints.\n    // In this case, we just use the constraints as-is.\n    // @ts-ignore - device is a MediaTrackConstraints\n    trackConstraints = device;\n    return this.getMediaStreamConstraintsFromTrackConstraints(kind, trackConstraints);\n  }\n\n  private deviceInfoFromDeviceId(\n    deviceKind: string,\n    deviceId: string | null\n  ): MediaDeviceInfo | null {\n    if (this.deviceInfoCache === null) {\n      return null;\n    }\n    for (const device of this.deviceInfoCache) {\n      if (device.kind === deviceKind && device.deviceId === deviceId) {\n        return device;\n      }\n    }\n    return null;\n  }\n\n  hasAppliedTransform(): boolean {\n    return !!this.transform;\n  }\n\n  private isMediaStreamReusableByDeviceId(stream: MediaStream, device: Device): boolean {\n    // for null device, assume the stream is not reusable\n    if (!stream || !stream.active || !device) {\n      return false;\n    }\n\n    if ((device as MediaStream).id) {\n      return stream.id === (device as MediaStream).id;\n    }\n\n    const settings = this.getMediaTrackSettings(stream);\n    // If a device does not specify deviceId, we have to assume the stream is not reusable.\n    if (!settings.deviceId) {\n      return false;\n    }\n    const deviceIds = DefaultDeviceController.getIntrinsicDeviceId(device);\n    if (typeof deviceIds === 'string') {\n      return settings.deviceId === deviceIds;\n    }\n    return false;\n  }\n\n  private getMediaTrackSettings(stream: MediaStream): MediaTrackSettings {\n    return stream.getTracks()[0]?.getSettings();\n  }\n\n  private reconnectAudioInputs(): void {\n    if (!this.audioInputSourceNode) {\n      return;\n    }\n\n    this.audioInputSourceNode.disconnect();\n    const output = this.getMediaStreamOutputNode();\n    this.audioInputSourceNode.connect(output);\n  }\n\n  private setTransform(device: AudioTransformDevice, nodes: AudioNodeSubgraph | undefined): void {\n    this.transform?.nodes?.end.disconnect();\n    this.transform = { nodes, device };\n\n    const proc = nodes?.end;\n    const dest = this.getMediaStreamDestinationNode();\n\n    this.logger.debug(`Connecting transform node ${proc} to destination ${dest}.`);\n    proc?.connect(dest);\n    this.reconnectAudioInputs();\n  }\n\n  private removeTransform():\n    | { device: AudioTransformDevice; nodes: AudioNodeSubgraph | undefined }\n    | undefined {\n    const previous = this.transform;\n    if (!previous) {\n      return undefined;\n    }\n\n    this.transform.nodes?.end.disconnect();\n    this.transform = undefined;\n\n    this.reconnectAudioInputs();\n\n    return previous;\n  }\n\n  private attachAudioInputStreamToAudioContext(stream: MediaStream): void {\n    this.audioInputSourceNode?.disconnect();\n    this.audioInputSourceNode = DefaultDeviceController.getAudioContext().createMediaStreamSource(\n      stream\n    );\n    const output = this.getMediaStreamOutputNode();\n    this.audioInputSourceNode.connect(output);\n  }\n\n  /**\n   * Return the end of the Web Audio graph: post-transform audio.\n   */\n  private getMediaStreamDestinationNode(): MediaStreamAudioDestinationNode {\n    if (!this.audioInputDestinationNode) {\n      this.audioInputDestinationNode = DefaultDeviceController.getAudioContext().createMediaStreamDestination();\n    }\n    return this.audioInputDestinationNode;\n  }\n\n  /**\n   * Return the start of the Web Audio graph: pre-transform audio.\n   * If there's no transform node, this is the destination node.\n   */\n  private getMediaStreamOutputNode(): AudioNode {\n    return this.transform?.nodes?.start || this.getMediaStreamDestinationNode();\n  }\n\n  /**\n   * Overrides the default latency hint used by the user agent when creating the `AudioContext`. By default,\n   * user agents will choose \"interactive\" which opts for the smallest possible audio buffer. This can\n   * cause choppy audio in some cases on Windows. Therefore, \"playback\" will be chosen on Windows unless\n   * this value is overridden with this function.\n   * @param latencyHint The latency hint to be used when creating the Web Audio `AudioContext`\n   */\n  static setDefaultLatencyHint(latencyHint?: AudioContextLatencyCategory | number): void {\n    DefaultDeviceController.defaultLatencyHint = latencyHint;\n  }\n\n  /**\n   * Returns the Web Audio `AudioContext` used by the {@link DefaultDeviceController}. The `AudioContext`\n   * is created lazily the first time this function is called.\n   *\n   * This function will not attempt to recreate a stopped context, or resume a suspended one.\n   *\n   * @returns a Web Audio `AudioContext`\n   */\n  static getAudioContext(): AudioContext {\n    if (!DefaultDeviceController.audioContext) {\n      const options: AudioContextOptions = {};\n      if (navigator.mediaDevices.getSupportedConstraints().sampleRate) {\n        options.sampleRate = DefaultDeviceController.defaultSampleRate;\n      }\n      const browserBehavior = new DefaultBrowserBehavior();\n      if (browserBehavior.requiresPlaybackLatencyHintForAudioContext()) {\n        options.latencyHint = 'playback'; // 'playback' is equivalent to 0.02s (20ms) on Windows\n      }\n      if (DefaultDeviceController.defaultLatencyHint) {\n        options.latencyHint = DefaultDeviceController.defaultLatencyHint;\n      }\n      DefaultDeviceController.audioContext = new (window.AudioContext ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (window as any).webkitAudioContext)(options);\n    }\n    return DefaultDeviceController.audioContext;\n  }\n\n  /**\n   * Calls [suspend](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend)\n   * on reusable audio context. This is useful if you want an application to power down the\n   * audio hardware when it will not be using an audio context for a while (i.e. if you\n   * have an application that isn't always running a Chime SDK meeting). This is preferrable\n   * to calling [[closeAudioContext]]\n   */\n  static async suspendAudioContext(): Promise<void> {\n    if (DefaultDeviceController.audioContext) {\n      return DefaultDeviceController.audioContext.suspend();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Calls [resume](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume)\n   * on reusable audio context.\n   */\n  static async resumeAudioContext(): Promise<void> {\n    if (DefaultDeviceController.audioContext) {\n      return DefaultDeviceController.audioContext.resume();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Calls [close](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close)\n   * on reusable audio context. This more forceful the suspend and is not recommended\n   * if you plan on reusing the Chime SDK, as it may lead to audio glitches (e.g. due to\n   * https://issues.chromium.org/issues/40282750).\n   */\n  static closeAudioContext(): void {\n    if (DefaultDeviceController.audioContext) {\n      try {\n        DefaultDeviceController.audioContext.close();\n      } catch (e) {\n        // Nothing we can do.\n      }\n    }\n    DefaultDeviceController.audioContext = null;\n  }\n\n  addMediaStreamBrokerObserver(observer: MediaStreamBrokerObserver): void {\n    this.mediaStreamBrokerObservers.add(observer);\n  }\n\n  removeMediaStreamBrokerObserver(observer: MediaStreamBrokerObserver): void {\n    this.mediaStreamBrokerObservers.delete(observer);\n  }\n\n  private publishVideoInputDidChangeEvent(videoStream: MediaStream | undefined): void {\n    this.forEachMediaStreamBrokerObserver((observer: MediaStreamBrokerObserver) => {\n      if (observer.videoInputDidChange) {\n        observer.videoInputDidChange(videoStream);\n      }\n    });\n    this.pushVideoMeetingStateForPermissions(videoStream);\n  }\n\n  private publishAudioInputDidChangeEvent(audioStream: MediaStream | undefined): void {\n    this.forEachMediaStreamBrokerObserver((observer: MediaStreamBrokerObserver) => {\n      if (observer.audioInputDidChange) {\n        observer.audioInputDidChange(audioStream);\n      }\n    });\n    this.pushAudioMeetingStateForPermissions(audioStream);\n  }\n\n  private publishAudioOutputDidChangeEvent(device: MediaDeviceInfo | null): void {\n    this.forEachMediaStreamBrokerObserver((observer: MediaStreamBrokerObserver) => {\n      if (observer.audioOutputDidChange) {\n        observer.audioOutputDidChange(device);\n      }\n    });\n  }\n\n  private supportSampleRateConstraint(): boolean {\n    return this.useWebAudio && !!navigator.mediaDevices.getSupportedConstraints().sampleRate;\n  }\n\n  private supportSampleSizeConstraint(): boolean {\n    return this.useWebAudio && !!navigator.mediaDevices.getSupportedConstraints().sampleSize;\n  }\n\n  private supportChannelCountConstraint(): boolean {\n    return this.useWebAudio && !!navigator.mediaDevices.getSupportedConstraints().channelCount;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private trace(name: string, input?: any, output?: any): void {\n    let s = `API/DefaultDeviceController/${name}`;\n    if (typeof input !== 'undefined') {\n      s += ` ${JSON.stringify(input)}`;\n    }\n    if (typeof output !== 'undefined') {\n      s += ` -> ${JSON.stringify(output)}`;\n    }\n    this.logger.info(s);\n  }\n}\n\nfunction isMediaDeviceInfo(device: unknown): device is MediaDeviceInfo {\n  return (\n    typeof device === 'object' &&\n    'deviceId' in device &&\n    'groupId' in device &&\n    'kind' in device &&\n    'label' in device\n  );\n}\n"]}