{"version":3,"file":"DeviceControllerFacade.js","sourceRoot":"","sources":["../../src/devicecontroller/DeviceControllerFacade.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DeviceChangeObserver from '../devicechangeobserver/DeviceChangeObserver';\nimport RemovableAnalyserNode from '../devicecontroller/RemovableAnalyserNode';\nimport AudioInputDevice from './AudioInputDevice';\nimport VideoInputDevice from './VideoInputDevice';\nimport VideoQualitySettings from './VideoQualitySettings';\n\n/**\n * [[DeviceControllerFacade]] keeps track of the devices being used for audio input\n * (e.g. microphone), video input (e.g. camera), audio output (e.g. speakers).\n * The list functions return MediaDeviceInfo objects. Once any list function is\n * called, changes in device availability are broadcast to any registered\n * [[DeviceChangeObserver]].\n *\n * Calling a start function will request permission for the device indicated\n * by the device id, media stream or track constraint.\n * For audio input, supply null to will generate an empty audio stream.\n * Calling stop to stop the input stream.\n * Make sure to choose the audio input before joining the session (even if\n * it is the default device) so that you can offer the user options if the\n * device cannot be selected before a connection is made.\n *\n * Note that in certain situations such as private tabs, the browser may\n * initially decline to provide device labels for when enumerating devices. If\n * this is the case, the internal device label trigger function is called to\n * try to coax the browser in to providing the labels. The default behavior of\n * the function is to make a microphone and camera access request which, if\n * successful, will unlock the labels. You may want to override this behavior to\n * provide a custom UX such as a prompt explaining why microphone and camera\n * access is being asked for by supplying your own function to\n * setDeviceLabelTrigger(). To disable the device label trigger, supply a\n * function that returns a rejected promise instead. For reference, the default\n * implementation calls getUserMedia for audio and video and returns the promise\n * to the stream so that the stream can be cleaned up once the labels are\n * detected.\n *\n * ```typescript\n * (): Promise<MediaStream> => {\n *   return navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n * }\n * ```\n */\nexport default interface DeviceControllerFacade {\n  /**\n   * Lists currently available audio input devices. If `forceUpdate` is set to true, the `deviceInfoCache` will be updated from browser.\n   */\n  listAudioInputDevices(forceUpdate?: boolean): Promise<MediaDeviceInfo[]>;\n\n  /**\n   * Lists currently available video input devices. If `forceUpdate` is set to true, the `deviceInfoCache` will be updated from browser.\n   */\n  listVideoInputDevices(forceUpdate?: boolean): Promise<MediaDeviceInfo[]>;\n\n  /**\n   * Lists currently available audio output devices. If `forceUpdate` is set to true, the `deviceInfoCache` will be updated from browser.\n   */\n  listAudioOutputDevices(forceUpdate?: boolean): Promise<MediaDeviceInfo[]>;\n\n  /**\n   * Selects an audio input device to use. The constraint may be a device id,\n   * `MediaTrackConstraint`, `MediaStream` (containing audio track), or `null` to\n   * generate a dummy audio stream. It may also be an {@link AudioTransformDevice} to customize the\n   * constraints used or to apply Web Audio transforms.\n   *\n   * The promise will resolve indicating success or it will throw an appropriate error\n   * indicating the failure.\n   */\n  startAudioInput(device: AudioInputDevice): Promise<MediaStream | undefined>;\n\n  /**\n   * Stop the current audio input. This needs to be called to clear out to stop the current audio input resources\n   * such as audio stream from microphone.\n   */\n  stopAudioInput(): Promise<void>;\n\n  /**\n   * Selects a video input device to use. The constraint may be a device id,\n   * `MediaTrackConstraint`, `MediaStream` (containing video track). It may also be an {@link VideoTransformDevice}\n   * to apply video transform.\n   * The promise will resolve indicating success or it will throw an appropriate error indicating the failure.\n   */\n  startVideoInput(device: VideoInputDevice): Promise<MediaStream | undefined>;\n\n  /**\n   * Stop the current video input. This needs to be called to clear out to stop the current video input resources\n   * such as video stream from camera.\n   */\n  stopVideoInput(): Promise<void>;\n\n  /**\n   * Selects an audio output device for use. Null specifies the default device.\n   * Note: This method will throw an error if browser does not support\n   * setSinkId. See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId\n   */\n  chooseAudioOutput(deviceId: string | null): Promise<void>;\n\n  /**\n   * Adds an observer to receive callbacks about device changes.\n   */\n  addDeviceChangeObserver(observer: DeviceChangeObserver): void;\n\n  /**\n   * Removes an observer to stop receiving callbacks about device changes.\n   */\n  removeDeviceChangeObserver(observer: DeviceChangeObserver): void;\n\n  /**\n   * Gets an `AnalyserNode` from the current audio input. This node can be used to\n   * generate the display for a mic indicator. `null` is returned if no audio\n   * input has been selected.\n   *\n   * The `AnalyserNode` is not updated automatically when you choose a new\n   * audio input. Dispose of this one and fetch another by calling this method again.\n   *\n   * Note that this node should be cleaned up after use, and as such a\n   * {@link RemovableAnalyserNode} is returned. Call\n   * {@link RemovableAnalyserNode.removeOriginalInputs} to disconnect the node from the Web Audio\n   * graph.\n   */\n  createAnalyserNodeForAudioInput(): RemovableAnalyserNode | null;\n\n  /**\n   * Starts a video preview of the currently selected video and binds it a video\n   * element to be displayed before a meeting begins. Make sure to call\n   * [[stopVideoPreviewForVideoInput]] when the preview is no longer necessary\n   * so that the stream can be released and turn off the camera if it is not\n   * being used anymore.\n   */\n  startVideoPreviewForVideoInput(element: HTMLVideoElement): void;\n\n  /**\n   * Stops the stream for a previously bound video preview and unbinds it from\n   * the video element.\n   */\n  stopVideoPreviewForVideoInput(element: HTMLVideoElement): void;\n\n  /**\n   * Sets the device label trigger to use in the case where media device labels\n   * are not present due to privacy restrictions in the browser. See above\n   * for an explanation of how this works.\n   */\n  setDeviceLabelTrigger(trigger: () => Promise<MediaStream>): void;\n\n  /**\n   * Mixes the audio from the given media stream into the main audio input stream.\n   */\n  mixIntoAudioInput(stream: MediaStream): MediaStreamAudioSourceNode;\n\n  /**\n   * Sets the video input quality parameters to request when enabling video. These settings\n   * take effect the next time a video input device is chosen. The default is 960x540 \\@ 15 fps.\n   */\n  chooseVideoInputQuality(width: number, height: number, frameRate: number): void;\n\n  /**\n   * Get the current video input quality settings to request when enabling video.\n   */\n  getVideoInputQualitySettings(): VideoQualitySettings | null;\n}\n"]}