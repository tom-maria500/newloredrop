{"version":3,"file":"DefaultAudioMixController.js","sourceRoot":"","sources":["../../src/audiomixcontroller/DefaultAudioMixController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioMixObserver from '../audiomixobserver/AudioMixObserver';\nimport BrowserBehavior from '../browserbehavior/BrowserBehavior';\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport Logger from '../logger/Logger';\nimport MediaStreamBrokerObserver from '../mediastreambrokerobserver/MediaStreamBrokerObserver';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport AudioMixController from './AudioMixController';\n\n/** @internal */\ninterface AudioElementWithSinkId extends HTMLAudioElement {\n  sinkId: string;\n  setSinkId: (id: string) => void;\n}\n\nexport default class DefaultAudioMixController\n  implements AudioMixController, MediaStreamBrokerObserver {\n  private audioDevice: MediaDeviceInfo | null = null;\n  private audioElement: HTMLAudioElement | null = null;\n  private audioStream: MediaStream | null = null;\n  private browserBehavior: BrowserBehavior = new DefaultBrowserBehavior();\n  private observers: Set<AudioMixObserver> = new Set<AudioMixObserver>();\n\n  constructor(private logger?: Logger) {}\n\n  async bindAudioElement(element: HTMLAudioElement): Promise<void> {\n    if (!element) {\n      throw new Error(`Cannot bind audio element: ${element}`);\n    }\n    this.audioElement = element;\n    this.audioElement.autoplay = true;\n    return this.bindAudioMix();\n  }\n\n  unbindAudioElement(): void {\n    if (!this.audioElement) {\n      return;\n    }\n    this.audioElement.srcObject = null;\n    this.audioElement = null;\n    this.forEachObserver((observer: AudioMixObserver) => {\n      if (this.audioStream) {\n        observer.meetingAudioStreamBecameInactive(this.audioStream);\n      }\n    });\n  }\n\n  async bindAudioStream(stream: MediaStream): Promise<void> {\n    if (!stream) {\n      return;\n    }\n\n    this.audioStream = stream;\n\n    try {\n      await this.bindAudioMix();\n    } catch (error) {\n      /* istanbul ignore else */\n      if (this.logger) {\n        this.logger.warn(`Failed to bind audio stream: ${error}`);\n      }\n    }\n  }\n\n  async bindAudioDevice(device: MediaDeviceInfo | null): Promise<void> {\n    /**\n     * Throw error if browser doesn't even support setSinkId\n     * Read more: https://caniuse.com/?search=setSinkId\n     */\n    if (device && !this.browserBehavior.supportsSetSinkId()) {\n      throw new Error(\n        'Cannot select audio output device. This browser does not support setSinkId.'\n      );\n    }\n\n    // Always set device -- we might be setting it back to `null` to reselect\n    // the default, and even in that case we need to call `bindAudioMix` in\n    // order to update the sink ID to the empty string.\n    this.audioDevice = device;\n    return this.bindAudioMix();\n  }\n\n  private forEachObserver(observerFunc: (observer: AudioMixObserver) => void): void {\n    for (const observer of this.observers) {\n      AsyncScheduler.nextTick(() => {\n        observerFunc(observer);\n      });\n    }\n  }\n\n  private async bindAudioMix(): Promise<void> {\n    if (!this.audioElement) {\n      return;\n    }\n\n    const previousStream = this.audioElement.srcObject as MediaStream;\n\n    if (this.audioStream) {\n      this.audioElement.srcObject = this.audioStream;\n    }\n\n    if (previousStream !== this.audioStream) {\n      this.forEachObserver((observer: AudioMixObserver) => {\n        if (previousStream) {\n          observer.meetingAudioStreamBecameInactive(previousStream);\n        }\n        if (this.audioStream) {\n          observer.meetingAudioStreamBecameActive(this.audioStream);\n        }\n      });\n    }\n\n    // In usual operation, the output device is undefined, and so is the element\n    // sink ID. In this case, don't throw an error -- we're being called as a side\n    // effect of just binding the audio element, not choosing an output device.\n    const shouldSetSinkId =\n      this.audioDevice?.deviceId !== (this.audioElement as AudioElementWithSinkId).sinkId;\n\n    if (\n      shouldSetSinkId &&\n      typeof (this.audioElement as AudioElementWithSinkId).sinkId === 'undefined'\n    ) {\n      throw new Error(\n        'Cannot select audio output device. This browser does not support setSinkId.'\n      );\n    }\n\n    const newSinkId = this.audioDevice ? this.audioDevice.deviceId : '';\n    const oldSinkId: string = (this.audioElement as AudioElementWithSinkId).sinkId;\n    if (newSinkId === oldSinkId) {\n      return;\n    }\n\n    // Take the existing stream and temporarily unbind it while we change\n    // the sink ID.\n\n    const existingAudioElement: AudioElementWithSinkId = this\n      .audioElement as AudioElementWithSinkId;\n    const existingStream = this.audioStream;\n    if (this.browserBehavior.hasChromiumWebRTC()) {\n      existingAudioElement.srcObject = null;\n    }\n\n    if (shouldSetSinkId) {\n      try {\n        await existingAudioElement.setSinkId(newSinkId);\n      } catch (error) {\n        this.logger?.error(`Failed to set sinkId for audio element: ${error}`);\n        throw error;\n      }\n    }\n\n    if (this.browserBehavior.hasChromiumWebRTC()) {\n      existingAudioElement.srcObject = existingStream;\n    }\n  }\n\n  async getCurrentMeetingAudioStream(): Promise<MediaStream | null> {\n    return this.audioStream;\n  }\n\n  async addAudioMixObserver(observer: AudioMixObserver): Promise<void> {\n    this.observers.add(observer);\n  }\n\n  async removeAudioMixObserver(observer: AudioMixObserver): Promise<void> {\n    this.observers.delete(observer);\n  }\n\n  async audioOutputDidChange(device: MediaDeviceInfo | null): Promise<void> {\n    this.logger.info('Receive an audio output change event');\n    return this.bindAudioDevice(device);\n  }\n}\n"]}