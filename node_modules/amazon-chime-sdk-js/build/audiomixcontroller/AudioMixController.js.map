{"version":3,"file":"AudioMixController.js","sourceRoot":"","sources":["../../src/audiomixcontroller/AudioMixController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioMixObserver from '../audiomixobserver/AudioMixObserver';\nimport AudioMixControllerFacade from './AudioMixControllerFacade';\n\n/**\n * An instance of [[AudioMixController]] is provided when constructing a\n * [[MeetingClient]] to allow for binding audio output.\n */\nexport default interface AudioMixController extends AudioMixControllerFacade {\n  /**\n   * Called when the audio mix element can be bound to a device and stream.\n   */\n  bindAudioElement(element: HTMLAudioElement): Promise<void>;\n\n  /**\n   * Called to unbind the audio element so that the audio output stream does not have a sink.\n   */\n  unbindAudioElement(): void;\n\n  /**\n   * Called when the audio mix stream can be bound to a device and element.\n   *\n   * This method rejects if you specify a device and the browser does not support `setSinkId`;\n   * use {@link BrowserBehavior.supportsSetSinkId} to check before calling this method.\n   */\n  bindAudioStream(stream: MediaStream): Promise<void>;\n\n  /**\n   * Called when the audio mix device can be bound to an element and stream.\n   *\n   * This method rejects if you specify a device and the browser does not support `setSinkId`;\n   * use {@link BrowserBehavior.supportsSetSinkId} to check before calling this method.\n   */\n  bindAudioDevice(device: MediaDeviceInfo | null): Promise<void>;\n\n  /**\n   * Returns the meeting audio stream currently bound to a HTMLAudioElement, or `null` if\n   * there is no current audio stream. This method will typically never reject.\n   */\n  getCurrentMeetingAudioStream(): Promise<MediaStream | null>;\n\n  /**\n   * Add an observer to listen for changes to the current meeting audio stream. The observer\n   * will be notified when a stream is bound or unbound from an audio element in the page.\n   */\n  addAudioMixObserver(observer: AudioMixObserver): void;\n\n  /**\n   * Remove an observer to stop listening for changes to the current meeting audio stream.\n   */\n  removeAudioMixObserver(observer: AudioMixObserver): void;\n}\n"]}