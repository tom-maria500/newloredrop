{"version":3,"file":"DefaultVideoStreamIndex.js","sourceRoot":"","sources":["../../src/videostreamindex/DefaultVideoStreamIndex.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport {\n  ISdkBitrateFrame,\n  ISdkStreamDescriptor,\n  SdkIndexFrame,\n  SdkStreamMediaType,\n  SdkSubscribeAckFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport VideoSource from '../videosource/VideoSource';\nimport DefaultVideoStreamIdSet from '../videostreamidset/DefaultVideoStreamIdSet';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport VideoStreamDescription from './VideoStreamDescription';\n\n/**\n * [[DefaultVideoStreamIndex]] implements [[VideoStreamIndex]] to facilitate video stream subscription\n * and includes query functions for stream id and attendee id.\n */\nexport default class DefaultVideoStreamIndex implements VideoStreamIndex {\n  protected currentIndex: SdkIndexFrame | null = null;\n  protected indexForSubscribe: SdkIndexFrame | null = null;\n  protected indexForLastRemoteVideoUpdate: SdkIndexFrame | null = null;\n  protected currentSubscribeAck: SdkSubscribeAckFrame | null = null;\n\n  // These are based on the index at the time of the last Subscribe Ack\n  protected subscribeTrackToStreamMap: Map<string, number> | null = null;\n  protected subscribeStreamToAttendeeMap: Map<number, string> | null = null;\n  protected subscribeStreamToExternalUserIdMap: Map<number, string> | null = null;\n  protected subscribeSsrcToStreamMap: Map<number, number> | null = null;\n  protected subscribeSsrcToGroupMap: Map<number, number> | null = null;\n\n  // These are based on the most up to date index\n  protected streamToAttendeeMap: Map<number, string> | null = null;\n  protected groupIdToAttendeeMap: Map<number, string> | null = null;\n  protected streamToExternalUserIdMap: Map<number, string> | null = null;\n\n  private videoStreamDescription = new VideoStreamDescription();\n  private sendVideoStreamId: number = 0;\n  constructor(protected logger: Logger) {\n    this.videoStreamDescription.trackLabel = 'AmazonChimeExpressVideo';\n    this.videoStreamDescription.streamId = 2;\n    this.videoStreamDescription.groupId = 2;\n  }\n\n  localStreamDescriptions(): VideoStreamDescription[] {\n    // localStreamDescriptions are used to construct IndexFrame\n    // old behavior for single video is to have streamId and groupId trackLabel fixed as the follows\n    return [this.videoStreamDescription.clone()];\n  }\n\n  convertBpsToKbps(avgBitrateBps: number): number {\n    if (avgBitrateBps > 0 && avgBitrateBps < 1000) {\n      return 1;\n    } else {\n      return Math.trunc(avgBitrateBps / 1000);\n    }\n  }\n\n  remoteStreamDescriptions(): VideoStreamDescription[] {\n    if (!this.currentIndex || !this.currentIndex.sources) {\n      return [];\n    }\n    const streamInfos: VideoStreamDescription[] = [];\n    this.currentIndex.sources.forEach(source => {\n      const description = new VideoStreamDescription();\n      description.attendeeId = source.attendeeId;\n      description.groupId = source.groupId;\n      description.streamId = source.streamId;\n      description.maxBitrateKbps = source.maxBitrateKbps;\n      description.avgBitrateKbps = this.convertBpsToKbps(source.avgBitrateBps);\n      description.width = source.width;\n      description.height = source.height;\n      description.maxFrameRate = source.framerate;\n      streamInfos.push(description);\n    });\n    return streamInfos;\n  }\n\n  integrateUplinkPolicyDecision(param: RTCRtpEncodingParameters[]): void {\n    if (!!param && param.length) {\n      const encodingParam = param[0];\n      this.videoStreamDescription.maxBitrateKbps = encodingParam.maxBitrate / 1000;\n      this.videoStreamDescription.maxFrameRate = encodingParam.maxFramerate;\n    }\n  }\n\n  integrateIndexFrame(indexFrame: SdkIndexFrame): void {\n    this.currentIndex = indexFrame;\n\n    if (!indexFrame) {\n      return;\n    }\n\n    // In the Amazon Chime SDKs, we assume a one to one mapping of group ID to profile ID when creating\n    // video tiles (multiple video sources are supported through applying a `Modality` to a given profile/session token)\n    //\n    // We enforce this here to mitigate any possible duplicate group IDs left from a reconnection where the previous\n    // signal channel hasn't been timed out yet.  To guarantee we receive the latest stream we use the highest group ID\n    // since they are monotonically increasing.\n    const attendeeIdToMainGroupIdMap = new Map<string, number>();\n    // Improve performance by not filtering sources unless\n    // we know the list will actually change\n    let attendeeWithMultipleGroupIdsExists = false;\n    for (const source of indexFrame.sources) {\n      if (!attendeeIdToMainGroupIdMap.has(source.attendeeId)) {\n        // We haven't see this attendee ID so just keep track of it\n        attendeeIdToMainGroupIdMap.set(source.attendeeId, source.groupId);\n        continue;\n      }\n\n      // Otherwise see if we should use the group ID corresponding to this source (we prefer the highest for each attendee)\n      const currentGroupId = attendeeIdToMainGroupIdMap.get(source.attendeeId);\n      if (currentGroupId < source.groupId) {\n        this.logger.warn(\n          `Old group ID ${currentGroupId} found for attendee ID ${source.attendeeId}, replacing with newer group ID ${source.groupId}`\n        );\n        attendeeIdToMainGroupIdMap.set(source.attendeeId, source.groupId);\n      }\n      attendeeWithMultipleGroupIdsExists = true;\n    }\n    if (attendeeWithMultipleGroupIdsExists) {\n      // Only use the sources corresponding to the main group IDs for the given attendee ID\n      this.currentIndex.sources = this.currentIndex.sources.filter(\n        source => attendeeIdToMainGroupIdMap.get(source.attendeeId) === source.groupId\n      );\n    }\n\n    // Null out cached maps, these will be recreated on demand\n    this.streamToAttendeeMap = null;\n    this.groupIdToAttendeeMap = null;\n    this.streamToExternalUserIdMap = null;\n  }\n\n  subscribeFrameSent(): void {\n    // This is called just as a Subscribe is being sent.  Save corresponding Index\n    this.indexForSubscribe = this.currentIndex;\n  }\n\n  remoteVideoUpdateSent(): void {\n    this.indexForLastRemoteVideoUpdate = this.currentIndex;\n  }\n\n  integrateSubscribeAckFrame(subscribeAck: SdkSubscribeAckFrame): void {\n    this.currentSubscribeAck = subscribeAck;\n\n    // These are valid until the next Subscribe Ack even if the index is updated\n    this.subscribeTrackToStreamMap = this.buildTrackToStreamMap(this.currentSubscribeAck);\n    this.subscribeSsrcToStreamMap = this.buildSSRCToStreamMap(this.currentSubscribeAck);\n    this.subscribeSsrcToGroupMap = this.buildSSRCToGroupMap(this.currentSubscribeAck);\n    this.subscribeStreamToAttendeeMap = this.buildStreamToAttendeeMap(this.indexForSubscribe);\n    this.subscribeStreamToExternalUserIdMap = this.buildStreamExternalUserIdMap(\n      this.indexForSubscribe\n    );\n\n    this.sendVideoStreamId = 0;\n    if (\n      subscribeAck.allocations &&\n      subscribeAck.allocations !== undefined &&\n      subscribeAck.allocations.length > 0\n    ) {\n      this.sendVideoStreamId = subscribeAck.allocations[0].streamId;\n    }\n  }\n\n  integrateBitratesFrame(bitrates: ISdkBitrateFrame): void {\n    if (this.currentIndex) {\n      for (const bitrate of bitrates.bitrates) {\n        const source = this.currentIndex.sources.find(\n          source => source.streamId === bitrate.sourceStreamId\n        );\n        if (source !== undefined) {\n          source.avgBitrateBps = bitrate.avgBitrateBps;\n        }\n      }\n    }\n  }\n\n  allStreams(): DefaultVideoStreamIdSet {\n    const set = new DefaultVideoStreamIdSet();\n    if (this.currentIndex) {\n      for (const source of this.currentIndex.sources) {\n        set.add(source.streamId);\n      }\n    }\n    return set;\n  }\n\n  allVideoSendingSourcesExcludingSelf(selfAttendeeId: string): VideoSource[] {\n    const videoSources: VideoSource[] = [];\n    const attendeeSet = new Set<string>();\n    if (this.currentIndex) {\n      if (this.currentIndex.sources && this.currentIndex.sources.length) {\n        for (const stream of this.currentIndex.sources) {\n          const { attendeeId, externalUserId, mediaType } = stream;\n          if (attendeeId !== selfAttendeeId && mediaType === SdkStreamMediaType.VIDEO) {\n            if (!attendeeSet.has(attendeeId)) {\n              videoSources.push({ attendee: { attendeeId, externalUserId } });\n              attendeeSet.add(attendeeId);\n            }\n          }\n        }\n      }\n    }\n    return videoSources;\n  }\n\n  streamSelectionUnderBandwidthConstraint(\n    selfAttendeeId: string,\n    largeTileAttendeeIds: Set<string>,\n    smallTileAttendeeIds: Set<string>,\n    bandwidthKbps: number\n  ): DefaultVideoStreamIdSet {\n    const newAttendees = new Set<string>();\n    if (this.currentIndex) {\n      for (const stream of this.currentIndex.sources) {\n        if (stream.attendeeId === selfAttendeeId || stream.mediaType !== SdkStreamMediaType.VIDEO) {\n          continue;\n        }\n        if (\n          !largeTileAttendeeIds.has(stream.attendeeId) &&\n          !smallTileAttendeeIds.has(stream.attendeeId)\n        ) {\n          newAttendees.add(stream.attendeeId);\n        }\n      }\n    }\n\n    const attendeeToStreamDescriptorMap = this.buildAttendeeToSortedStreamDescriptorMapExcludingSelf(\n      selfAttendeeId\n    );\n    const selectionMap = new Map<string, ISdkStreamDescriptor>();\n\n    let usage = 0;\n    attendeeToStreamDescriptorMap.forEach((streams: ISdkStreamDescriptor[], attendeeId: string) => {\n      selectionMap.set(attendeeId, streams[0]);\n      usage += streams[0].maxBitrateKbps;\n    });\n\n    usage = this.trySelectHighBitrateForAttendees(\n      attendeeToStreamDescriptorMap,\n      largeTileAttendeeIds,\n      usage,\n      bandwidthKbps,\n      selectionMap\n    );\n    this.trySelectHighBitrateForAttendees(\n      attendeeToStreamDescriptorMap,\n      newAttendees,\n      usage,\n      bandwidthKbps,\n      selectionMap\n    );\n\n    const streamSelectionSet = new DefaultVideoStreamIdSet();\n    for (const source of selectionMap.values()) {\n      streamSelectionSet.add(source.streamId);\n    }\n\n    return streamSelectionSet;\n  }\n\n  highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId: string): DefaultVideoStreamIdSet {\n    const set = new DefaultVideoStreamIdSet();\n    if (this.currentIndex) {\n      const maxes = new Map<number, ISdkStreamDescriptor>();\n      for (const source of this.currentIndex.sources) {\n        if (source.attendeeId === selfAttendeeId || source.mediaType !== SdkStreamMediaType.VIDEO) {\n          continue;\n        }\n        if (\n          !maxes.has(source.groupId) ||\n          source.maxBitrateKbps > maxes.get(source.groupId).maxBitrateKbps\n        ) {\n          maxes.set(source.groupId, source);\n        }\n      }\n      for (const source of maxes.values()) {\n        set.add(source.streamId);\n      }\n    }\n    return set;\n  }\n\n  numberOfVideoPublishingParticipantsExcludingSelf(selfAttendeeId: string): number {\n    return this.highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId).array().length;\n  }\n\n  numberOfParticipants(): number {\n    if (!!this.currentIndex.numParticipants) {\n      return this.currentIndex.numParticipants;\n    }\n\n    return -1;\n  }\n\n  attendeeIdForTrack(trackId: string): string {\n    const streamId: number = this.streamIdForTrack(trackId);\n    if (streamId === undefined || !this.subscribeStreamToAttendeeMap) {\n      this.logger.warn(`no attendee found for track ${trackId}`);\n      return '';\n    }\n    const attendeeId: string = this.subscribeStreamToAttendeeMap.get(streamId);\n    if (!attendeeId) {\n      this.logger.info(\n        `track ${trackId} (stream ${streamId}) does not correspond to a known attendee`\n      );\n      return '';\n    }\n    return attendeeId;\n  }\n\n  externalUserIdForTrack(trackId: string): string {\n    const streamId: number = this.streamIdForTrack(trackId);\n    if (streamId === undefined || !this.subscribeStreamToExternalUserIdMap) {\n      this.logger.warn(`no external user id found for track ${trackId}`);\n      return '';\n    }\n    const externalUserId: string = this.subscribeStreamToExternalUserIdMap.get(streamId);\n    if (!externalUserId) {\n      this.logger.info(\n        `track ${trackId} (stream ${streamId}) does not correspond to a known externalUserId`\n      );\n      return '';\n    }\n    return externalUserId;\n  }\n\n  attendeeIdForStreamId(streamId: number): string {\n    if (!this.streamToAttendeeMap) {\n      if (this.currentIndex) {\n        this.streamToAttendeeMap = this.buildStreamToAttendeeMap(this.currentIndex);\n      } else {\n        return '';\n      }\n    }\n    const attendeeId: string = this.streamToAttendeeMap.get(streamId);\n    if (!attendeeId) {\n      this.logger.info(`stream ID ${streamId} does not correspond to a known attendee`);\n      return '';\n    }\n    return attendeeId;\n  }\n\n  attendeeIdForGroupId(groupId: number): string {\n    if (!this.groupIdToAttendeeMap) {\n      if (this.currentIndex) {\n        this.groupIdToAttendeeMap = this.buildGroupIdToAttendeeMap(this.currentIndex);\n      } else {\n        return '';\n      }\n    }\n    const attendeeId: string = this.groupIdToAttendeeMap.get(groupId);\n    if (!attendeeId) {\n      this.logger.info(`group ID ${groupId} does not correspond to a known attendee`);\n      return '';\n    }\n    return attendeeId;\n  }\n\n  groupIdForStreamId(streamId: number): number {\n    if (!this.currentIndex || !this.currentIndex.sources) {\n      return undefined;\n    }\n\n    for (const source of this.currentIndex.sources) {\n      if (source.streamId === streamId) {\n        return source.groupId;\n      }\n    }\n\n    // If wasn't found in current index, then it could be in index used in last subscribe\n    if (!!this.indexForSubscribe) {\n      for (const source of this.indexForSubscribe.sources) {\n        if (source.streamId === streamId) {\n          return source.groupId;\n        }\n      }\n    }\n\n    // Lastly check if it can be found in the index last used for remote video update\n    if (!!this.indexForLastRemoteVideoUpdate) {\n      for (const source of this.indexForLastRemoteVideoUpdate.sources) {\n        if (source.streamId === streamId) {\n          return source.groupId;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  StreamIdsInSameGroup(streamId1: number, streamId2: number): boolean {\n    if (this.groupIdForStreamId(streamId1) === this.groupIdForStreamId(streamId2)) {\n      return true;\n    }\n    return false;\n  }\n\n  streamIdForTrack(trackId: string): number {\n    if (!this.subscribeTrackToStreamMap) {\n      return undefined;\n    }\n    return this.subscribeTrackToStreamMap.get(trackId);\n  }\n\n  streamIdForSSRC(ssrcId: number): number {\n    if (!this.subscribeSsrcToStreamMap) {\n      return undefined;\n    }\n    return this.subscribeSsrcToStreamMap.get(ssrcId);\n  }\n\n  overrideStreamIdMappings(previous: number, current: number): void {\n    if (this.subscribeTrackToStreamMap) {\n      for (const [track, streamId] of this.subscribeTrackToStreamMap.entries()) {\n        if (previous === streamId) {\n          this.subscribeTrackToStreamMap.set(track, current);\n          break;\n        }\n      }\n    }\n\n    if (this.subscribeSsrcToStreamMap) {\n      for (const [ssrc, streamId] of this.subscribeSsrcToStreamMap.entries()) {\n        if (previous === streamId) {\n          this.subscribeSsrcToStreamMap.set(ssrc, current);\n          break;\n        }\n      }\n    }\n  }\n\n  groupIdForSSRC(ssrcId: number): number {\n    if (!this.subscribeSsrcToGroupMap) {\n      return undefined;\n    }\n    return this.subscribeSsrcToGroupMap.get(ssrcId);\n  }\n\n  streamsPausedAtSource(): DefaultVideoStreamIdSet {\n    const paused = new DefaultVideoStreamIdSet();\n    if (this.currentIndex) {\n      for (const streamId of this.currentIndex.pausedAtSourceIds) {\n        paused.add(streamId);\n      }\n    }\n    return paused;\n  }\n\n  sendVideoStreamIdFromRid(_rid: string): number {\n    return this.sendVideoStreamId;\n  }\n\n  private buildTrackToStreamMap(subscribeAck: SdkSubscribeAckFrame): Map<string, number> {\n    const map = new Map<string, number>();\n    this.logger.debug(() => `trackMap ${JSON.stringify(subscribeAck.tracks)}`);\n    for (const trackMapping of subscribeAck.tracks) {\n      if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {\n        map.set(trackMapping.trackLabel, trackMapping.streamId);\n      }\n    }\n    return map;\n  }\n\n  private buildSSRCToStreamMap(subscribeAck: SdkSubscribeAckFrame): Map<number, number> {\n    const map = new Map<number, number>();\n    this.logger.debug(() => `ssrcMap ${JSON.stringify(subscribeAck.tracks)}`);\n    for (const trackMapping of subscribeAck.tracks) {\n      if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {\n        map.set(trackMapping.ssrc, trackMapping.streamId);\n      }\n    }\n    return map;\n  }\n\n  private buildSSRCToGroupMap(subscribeAck: SdkSubscribeAckFrame): Map<number, number> {\n    const map = new Map<number, number>();\n    for (const trackMapping of subscribeAck.tracks) {\n      if (trackMapping.trackLabel.length > 0 && trackMapping.streamId > 0) {\n        map.set(trackMapping.ssrc, this.groupIdForStreamId(trackMapping.streamId));\n      }\n    }\n    return map;\n  }\n\n  private buildStreamToAttendeeMap(indexFrame: SdkIndexFrame): Map<number, string> {\n    const map = new Map<number, string>();\n    if (indexFrame) {\n      for (const source of indexFrame.sources) {\n        map.set(source.streamId, source.attendeeId);\n      }\n    }\n    return map;\n  }\n\n  private buildGroupIdToAttendeeMap(indexFrame: SdkIndexFrame): Map<number, string> {\n    const map = new Map<number, string>();\n    for (const source of indexFrame.sources) {\n      map.set(source.groupId, source.attendeeId);\n    }\n    return map;\n  }\n\n  private buildStreamExternalUserIdMap(indexFrame: SdkIndexFrame): Map<number, string> {\n    const map = new Map<number, string>();\n    if (indexFrame) {\n      for (const source of indexFrame.sources) {\n        if (!!source.externalUserId) {\n          map.set(source.streamId, source.externalUserId);\n        }\n      }\n    }\n    return map;\n  }\n\n  private trySelectHighBitrateForAttendees(\n    attendeeToStreamDescriptorMap: Map<string, ISdkStreamDescriptor[]>,\n    highAttendees: Set<string>,\n    currentUsage: number,\n    bandwidthKbps: number,\n    currentSelectionRef: Map<string, ISdkStreamDescriptor>\n  ): number {\n    for (const attendeeId of highAttendees) {\n      if (currentUsage >= bandwidthKbps) {\n        break;\n      }\n      if (attendeeToStreamDescriptorMap.has(attendeeId)) {\n        const streams = attendeeToStreamDescriptorMap.get(attendeeId);\n        for (const l of streams.reverse()) {\n          if (\n            currentUsage - currentSelectionRef.get(attendeeId).maxBitrateKbps + l.maxBitrateKbps <\n            bandwidthKbps\n          ) {\n            currentUsage =\n              currentUsage - currentSelectionRef.get(attendeeId).maxBitrateKbps + l.maxBitrateKbps;\n            currentSelectionRef.set(attendeeId, l);\n            break;\n          }\n        }\n      }\n    }\n\n    return currentUsage;\n  }\n\n  private buildAttendeeToSortedStreamDescriptorMapExcludingSelf(\n    selfAttendeeId: string\n  ): Map<string, ISdkStreamDescriptor[]> {\n    const attendeeToStreamDescriptorMap = new Map<string, ISdkStreamDescriptor[]>();\n    if (this.currentIndex) {\n      for (const source of this.currentIndex.sources) {\n        if (source.attendeeId === selfAttendeeId || source.mediaType !== SdkStreamMediaType.VIDEO) {\n          continue;\n        }\n        if (attendeeToStreamDescriptorMap.has(source.attendeeId)) {\n          attendeeToStreamDescriptorMap.get(source.attendeeId).push(source);\n        } else {\n          attendeeToStreamDescriptorMap.set(source.attendeeId, [source]);\n        }\n      }\n    }\n\n    attendeeToStreamDescriptorMap.forEach(\n      (streams: ISdkStreamDescriptor[], _attendeeId: string) => {\n        streams.sort((stream1, stream2) => {\n          if (stream1.maxBitrateKbps > stream2.maxBitrateKbps) {\n            return 1;\n          } else if (stream1.maxBitrateKbps < stream2.maxBitrateKbps) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      }\n    );\n\n    return attendeeToStreamDescriptorMap;\n  }\n}\n"]}