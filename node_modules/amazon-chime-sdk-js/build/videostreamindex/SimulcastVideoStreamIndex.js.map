{"version":3,"file":"SimulcastVideoStreamIndex.js","sourceRoot":"","sources":["../../src/videostreamindex/SimulcastVideoStreamIndex.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  SdkBitrateFrame,\n  SdkIndexFrame,\n  SdkStreamMediaType,\n  SdkSubscribeAckFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport DefaultVideoStreamIndex from './DefaultVideoStreamIndex';\nimport VideoStreamDescription from './VideoStreamDescription';\n\n/**\n * [[SimulcastTransceiverController]] implements [[VideoStreamIndex]] to facilitate video stream\n * subscription and includes query functions for stream id and attendee id.\n */\nexport default class SimulcastVideoStreamIndex extends DefaultVideoStreamIndex {\n  private streamIdToBitrateKbpsMap: Map<number, number> = new Map<number, number>();\n\n  // First time when the bitrate of a stream id is missing from bitrate message, mark it as UNSEEN\n  static readonly UNSEEN_STREAM_BITRATE = -2;\n  // Second time when the bitrate is missing, mark it as recently inactive\n  static readonly RECENTLY_INACTIVE_STREAM_BITRATE = -1;\n  // Third time when bitrate is missing, mark it as not sending\n  static readonly NOT_SENDING_STREAM_BITRATE = 0;\n\n  static readonly BitratesMsgFrequencyMs: number = 4000;\n\n  private _localStreamInfos: VideoStreamDescription[] = [];\n\n  // Map send rid to stream Id\n  private _sendRidToVideoStreamIdMap: Map<string, number> = new Map<string, number>();\n\n  localStreamDescriptions(): VideoStreamDescription[] {\n    const clonedDescriptions: VideoStreamDescription[] = [];\n    this._localStreamInfos.forEach(desc => {\n      clonedDescriptions.push(desc.clone());\n    });\n    return clonedDescriptions;\n  }\n\n  integrateUplinkPolicyDecision(encodingParams: RTCRtpEncodingParameters[]): void {\n    // Reuse local streams (that might already have stream IDs allocated) until\n    // there are no more and then add as many new local streams as needed\n    let hasStreamsToReuse = true;\n    let localStreamIndex = 0;\n    for (let i = 0; i < encodingParams.length; i++) {\n      const targetMaxBitrateKbps = encodingParams[i].maxBitrate / 1000;\n      const targetMaxFrameRate = encodingParams[i].maxFramerate;\n      if (!hasStreamsToReuse || i === this._localStreamInfos.length) {\n        hasStreamsToReuse = false;\n        const newInfo = new VideoStreamDescription();\n        newInfo.maxBitrateKbps = targetMaxBitrateKbps;\n        newInfo.maxFrameRate = targetMaxFrameRate;\n        newInfo.disabledByUplinkPolicy = targetMaxBitrateKbps === 0 ? true : false;\n        newInfo.rid = encodingParams[i].rid;\n        if (targetMaxBitrateKbps !== 0) {\n          newInfo.timeEnabled = Date.now();\n        }\n        this._localStreamInfos.push(newInfo);\n        localStreamIndex++;\n        continue;\n      }\n\n      if (\n        this._localStreamInfos[localStreamIndex].maxBitrateKbps === 0 &&\n        targetMaxBitrateKbps > 0\n      ) {\n        this._localStreamInfos[localStreamIndex].timeEnabled = Date.now();\n      }\n      this._localStreamInfos[localStreamIndex].maxBitrateKbps = targetMaxBitrateKbps;\n      this._localStreamInfos[localStreamIndex].maxFrameRate = targetMaxFrameRate;\n      this._localStreamInfos[localStreamIndex].disabledByUplinkPolicy =\n        targetMaxBitrateKbps === 0 ? true : false;\n      localStreamIndex++;\n    }\n\n    if (hasStreamsToReuse) {\n      // splice is zero-based, remove stream starting from localStreamIndex\n      this._localStreamInfos.splice(localStreamIndex);\n    }\n  }\n\n  integrateBitratesFrame(bitrateFrame: SdkBitrateFrame): void {\n    super.integrateBitratesFrame(bitrateFrame);\n\n    const stillSending = new Set<number>();\n    const existingSet = new Set<number>(this.streamIdToBitrateKbpsMap.keys());\n    for (const bitrateMsg of bitrateFrame.bitrates) {\n      stillSending.add(bitrateMsg.sourceStreamId);\n      this.streamIdToBitrateKbpsMap.set(\n        bitrateMsg.sourceStreamId,\n        this.convertBpsToKbps(bitrateMsg.avgBitrateBps)\n      );\n    }\n\n    for (const id of existingSet) {\n      if (!stillSending.has(id)) {\n        const avgBitrateBps = this.streamIdToBitrateKbpsMap.get(id);\n        if (avgBitrateBps === SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE) {\n          this.streamIdToBitrateKbpsMap.set(\n            id,\n            SimulcastVideoStreamIndex.RECENTLY_INACTIVE_STREAM_BITRATE\n          );\n        } else {\n          this.streamIdToBitrateKbpsMap.set(\n            id,\n            SimulcastVideoStreamIndex.NOT_SENDING_STREAM_BITRATE\n          );\n        }\n      }\n    }\n\n    this.logLocalStreamDescriptions();\n  }\n\n  private logLocalStreamDescriptions(): void {\n    let msg = '';\n    for (const desc of this._localStreamInfos) {\n      msg += `streamId=${desc.streamId} maxBitrate=${desc.maxBitrateKbps} disabledByUplink=${desc.disabledByUplinkPolicy}\\n`;\n    }\n    this.logger.debug(() => {\n      return msg;\n    });\n  }\n\n  integrateIndexFrame(indexFrame: SdkIndexFrame): void {\n    super.integrateIndexFrame(indexFrame);\n\n    const newIndexStreamIdSet = new Set<number>();\n    const existingSet = new Set<number>(this.streamIdToBitrateKbpsMap.keys());\n    for (const stream of this.currentIndex.sources) {\n      if (stream.mediaType !== SdkStreamMediaType.VIDEO) {\n        continue;\n      }\n      newIndexStreamIdSet.add(stream.streamId);\n      if (!this.streamIdToBitrateKbpsMap.has(stream.streamId)) {\n        this.streamIdToBitrateKbpsMap.set(\n          stream.streamId,\n          SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE\n        );\n      }\n    }\n\n    for (const id of existingSet) {\n      if (!newIndexStreamIdSet.has(id)) {\n        this.streamIdToBitrateKbpsMap.delete(id);\n      }\n    }\n  }\n\n  integrateSubscribeAckFrame(subscribeAck: SdkSubscribeAckFrame): void {\n    super.integrateSubscribeAckFrame(subscribeAck);\n    if (!subscribeAck.allocations || subscribeAck.allocations === undefined) {\n      return;\n    }\n\n    let localStreamStartIndex = 0;\n    this._sendRidToVideoStreamIdMap.clear();\n    for (const allocation of subscribeAck.allocations) {\n      // track label is what we offered to the server\n      if (this._localStreamInfos.length < localStreamStartIndex + 1) {\n        this.logger.info('simulcast: allocation has more than number of local streams');\n        break;\n      }\n      this._localStreamInfos[localStreamStartIndex].groupId = allocation.groupId;\n      this._localStreamInfos[localStreamStartIndex].streamId = allocation.streamId;\n      if (!this.streamIdToBitrateKbpsMap.has(allocation.streamId)) {\n        this.streamIdToBitrateKbpsMap.set(\n          allocation.streamId,\n          SimulcastVideoStreamIndex.UNSEEN_STREAM_BITRATE\n        );\n      }\n      this._sendRidToVideoStreamIdMap.set(\n        this._localStreamInfos[localStreamStartIndex].rid,\n        allocation.streamId\n      );\n      localStreamStartIndex++;\n    }\n  }\n\n  sendVideoStreamIdFromRid(rid: string): number {\n    let res = 0;\n    if (this._sendRidToVideoStreamIdMap.has(rid)) {\n      res = this._sendRidToVideoStreamIdMap.get(rid);\n    }\n    return res;\n  }\n}\n"]}