{"version":3,"file":"VideoStreamIndex.js","sourceRoot":"","sources":["../../src/videostreamindex/VideoStreamIndex.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  ISdkBitrateFrame,\n  SdkIndexFrame,\n  SdkSubscribeAckFrame,\n} from '../signalingprotocol/SignalingProtocol.js';\nimport VideoSource from '../videosource/VideoSource';\nimport VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';\nimport VideoStreamDescription from './VideoStreamDescription';\n\n/**\n * [[VideoStreamIndex]] holds the set of video streams available on the server for subscription\n */\nexport default interface VideoStreamIndex {\n  /**\n   * Saves [[SdkIndexFrame]] in [[VideoStreamIndex]]\n   */\n  integrateIndexFrame(indexFrame: SdkIndexFrame): void;\n\n  /**\n   * This function caches the currently ingested index frame for subscribe related activities (e.g. mapping tracks).\n   *\n   * The index will also use the stored index as a backup for map functions like `groupIdForStreamId`so that we can maintain information\n   * about previous senders simulcast streams to enable stream switching, e.g. if a sender is transmitting low/hi and\n   * switches to just low, receivers need the previous index to be able to know what group ID the high stream corresponds to.\n   */\n  subscribeFrameSent(): void;\n\n  /**\n   * This function caches the currently ingested index frame specifically as a backup for map functions like `groupIdForStreamId`so that we can maintain information\n   * about previous senders simulcast streams to enable stream switching, e.g. if a sender is transmitting low/hi and\n   * switches to just low, receivers need the previously used index to be able to know what group ID the high stream corresponds to.\n   */\n  remoteVideoUpdateSent(): void;\n\n  /**\n   * Saves [[SdkSubscribeAckFrame]] in [[VideoStreamIndex]]\n   */\n  integrateSubscribeAckFrame(subscribeAck: SdkSubscribeAckFrame): void;\n\n  /**\n   * Saves [[SdkBitrateFrame]] in [[VideoStreamIndex]]\n   */\n  integrateBitratesFrame(bitrates: ISdkBitrateFrame): void;\n\n  /**\n   * Returns the set of all streams as [[VideoStreamIdSet]]\n   */\n  allStreams(): VideoStreamIdSet;\n\n  /**\n   * Returns an array of video sources who are sending video excluding self\n   */\n  allVideoSendingSourcesExcludingSelf(selfAttendeeId: string): VideoSource[];\n\n  /**\n   * Return a selection set of streams for subscription based on self attendee id, size information of tiles, bandwidth limitation\n   */\n  streamSelectionUnderBandwidthConstraint(\n    selfAttendeeId: string,\n    largeTileAttendeeIds: Set<string>,\n    smallTileAttendeeIds: Set<string>,\n    bandwidthKbps: number\n  ): VideoStreamIdSet;\n\n  /**\n   * Returns the set of the highest quality videos for subscription\n   */\n  highestQualityStreamFromEachGroupExcludingSelf(selfAttendeeId: string): VideoStreamIdSet;\n\n  /**\n   * Returns the number of participants who are publishing videos excluding self\n   */\n  numberOfVideoPublishingParticipantsExcludingSelf(selfAttendeeId: string): number;\n\n  /**\n   * Returns the number of video participants\n   */\n  numberOfParticipants(): number;\n\n  /**\n   * Returns attendee id for a track id\n   */\n  attendeeIdForTrack(trackId: string): string;\n\n  /**\n   * Returns external user id for a track id\n   */\n  externalUserIdForTrack(trackId: string): string;\n\n  /**\n   * Returns attendee id for a stream id\n   */\n  attendeeIdForStreamId(streamId: number): string;\n\n  /**\n   * Returns attendee id for a group id\n   */\n  attendeeIdForGroupId?(groupId: number): string;\n\n  /**\n   * Returns group id for a stream id\n   */\n  groupIdForStreamId(streamId: number): number;\n\n  /**\n   * Determines if the stream ID's are from the same group (client)\n   */\n  StreamIdsInSameGroup(streamId1: number, streamId2: number): boolean;\n\n  /**\n   * Returns a stream id for a track id\n   */\n  streamIdForTrack(trackId: string): number;\n\n  /**\n   * Returns a stream id for an SSRC Id\n   */\n  streamIdForSSRC(ssrcId: number): number;\n\n  /**\n   * Override mappings using stream ID (i.e. for `streamIdForTrack`, and `streamIdForSSRC`)\n   * locally (i.e. without the need for a subscribe ACK message)\n   */\n  overrideStreamIdMappings?(previous: number, current: number): void;\n\n  /**\n   * Returns a group id for an SSRC\n   */\n  groupIdForSSRC?(ssrcId: number): number;\n\n  /**\n   * Returns the set of streams which are paused at source.\n   */\n  streamsPausedAtSource(): VideoStreamIdSet;\n\n  /**\n   * Updates cached local stream description array via uplink decisions, an array of [[RTCRtpEncodingParameters]]\n   */\n  integrateUplinkPolicyDecision(encodingParameters: RTCRtpEncodingParameters[]): void;\n\n  /**\n   * Returns the cloned array of [[VideoStreamDescription]] corresponding to local streams\n   */\n  localStreamDescriptions(): VideoStreamDescription[];\n\n  /**\n   * Returns the cloned array of [[VideoStreamDescription]] corresponding to remote streams\n   */\n  remoteStreamDescriptions(): VideoStreamDescription[];\n\n  /**\n   * Returns send video stream ID that correspond to the Rid\n   */\n  sendVideoStreamIdFromRid(rid: string): number;\n}\n"]}