{"version":3,"file":"DefaultSimulcastUplinkPolicyForContentShare.js","sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicyForContentShare.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,qJAA6H;AAQ7H;;;GAGG;AACH,MAAqB,2CAA2C;IAK9D,YAAY,OAAe,EAAU,cAAwD;QAAxD,mBAAc,GAAd,cAAc,CAA0C;QAJrF,qBAAgB,GAAY,KAAK,CAAC;QAClC,+BAA0B,GAAW,IAAI,CAAC;QAC1C,gCAA2B,GAAW,GAAG,CAAC;IAE8C,CAAC;IAEjG,sBAAsB,CAAC,QAA2B,IAAS,CAAC;IAE5D,2BAA2B;QACzB,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,wBAAwB;;QACtB,MAAM,MAAM,GAAG,IAAI,GAAG,EAAoC,CAAC;QAC3D,MAAM,KAAK,GAAG,IAAI,CAAC;QACnB,MAAM,OAAO,GAAG,oDAA0C,CAAC,kBAAkB,CAAC;QAC9E,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACrB,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;YACf,MAAM,EAAE,IAAI;YACZ,qBAAqB,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,0CAAE,qBAAqB,KAAI,CAAC;YAC3E,UAAU,EACR,CAAC,CAAA,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,0CAAE,cAAc,KAAI,IAAI,CAAC,2BAA2B,CAAC,GAAG,KAAK;YACxF,YAAY,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,0CAAE,YAAY,KAAI,CAAC;SAC1D,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACrB,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;YACf,MAAM,EAAE,IAAI;YACZ,qBAAqB,EAAE,CAAA,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,IAAI,0CAAE,qBAAqB,KAAI,CAAC;YAC5E,UAAU,EACR,CAAC,CAAA,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,IAAI,0CAAE,cAAc,KAAI,IAAI,CAAC,0BAA0B,CAAC,GAAG,KAAK;YACxF,YAAY,EAAE,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,IAAI,0CAAE,YAAY;SACtD,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,WAAW,CAAC,WAA6B,IAAS,CAAC;IAEnD,gBAAgB;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IAED,gCAAgC;QAC9B,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7C,CAAC;IAED,wBAAwB,CAAC,sBAA8B,IAAS,CAAC;IAEjE,uBAAuB,CAAC,qBAA8B,IAAS,CAAC;IAEhE,+BAA+B,CAAC,OAAgB;QAC9C,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,0BAA0B,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACxD,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACzD,CAAC;IAED,WAAW,CAAC,SAAkC,IAAS,CAAC;IAExD,cAAc,CAAC,SAAkC,IAAS,CAAC;IAE3D,eAAe,CAAC,aAA0D,IAAS,CAAC;CACrF;AAjED,8DAiEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport SimulcastContentShareTransceiverController from '../transceivercontroller/SimulcastContentShareTransceiverController';\nimport DefaultVideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport ConnectionMetrics from './ConnectionMetrics';\nimport ContentShareSimulcastEncodingParameters from './ContentShareSimulcastEncodingParameters';\nimport SimulcastUplinkObserver from './SimulcastUplinkObserver';\nimport SimulcastUplinkPolicy from './SimulcastUplinkPolicy';\n\n/**\n * [[DefaultSimulcastUplinkPolicyForContentShare]] sets the capture and encode\n *  parameters based on constructor input parameters\n */\nexport default class DefaultSimulcastUplinkPolicyForContentShare implements SimulcastUplinkPolicy {\n  private enableUhdContent: boolean = false;\n  private defaultHiTargetBitrateKbps: number = 1200;\n  private defaultLowTargetBitrateKbps: number = 300;\n\n  constructor(_logger: Logger, private encodingParams?: ContentShareSimulcastEncodingParameters) {}\n\n  updateConnectionMetric(_metrics: ConnectionMetrics): void {}\n\n  chooseMediaTrackConstraints(): MediaTrackConstraints {\n    return undefined;\n  }\n\n  chooseEncodingParameters(): Map<string, RTCRtpEncodingParameters> {\n    const newMap = new Map<string, RTCRtpEncodingParameters>();\n    const toBps = 1000;\n    const nameArr = SimulcastContentShareTransceiverController.NAME_ARR_ASCENDING;\n    newMap.set(nameArr[0], {\n      rid: nameArr[0],\n      active: true,\n      scaleResolutionDownBy: this.encodingParams?.low?.scaleResolutionDownBy || 2,\n      maxBitrate:\n        (this.encodingParams?.low?.maxBitrateKbps || this.defaultLowTargetBitrateKbps) * toBps,\n      maxFramerate: this.encodingParams?.low?.maxFramerate || 5,\n    });\n    newMap.set(nameArr[1], {\n      rid: nameArr[1],\n      active: true,\n      scaleResolutionDownBy: this.encodingParams?.high?.scaleResolutionDownBy || 1,\n      maxBitrate:\n        (this.encodingParams?.high?.maxBitrateKbps || this.defaultHiTargetBitrateKbps) * toBps,\n      maxFramerate: this.encodingParams?.high?.maxFramerate,\n    });\n    return newMap;\n  }\n\n  updateIndex(_videoIndex: VideoStreamIndex): void {}\n\n  wantsResubscribe(): boolean {\n    return false;\n  }\n\n  chooseCaptureAndEncodeParameters(): DefaultVideoCaptureAndEncodeParameter {\n    return undefined;\n  }\n\n  maxBandwidthKbps(): number {\n    return this.enableUhdContent ? 2000 : 1200;\n  }\n\n  setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps: number): void {}\n\n  setHasBandwidthPriority(_hasBandwidthPriority: boolean): void {}\n\n  setHighResolutionFeatureEnabled(enabled: boolean): void {\n    this.enableUhdContent = enabled;\n    this.defaultHiTargetBitrateKbps = enabled ? 2000 : 1200;\n    this.defaultLowTargetBitrateKbps = enabled ? 500 : 300;\n  }\n\n  addObserver(_observer: SimulcastUplinkObserver): void {}\n\n  removeObserver(_observer: SimulcastUplinkObserver): void {}\n\n  forEachObserver(_observerFunc: (observer: SimulcastUplinkObserver) => void): void {}\n}\n"]}