import Logger from '../logger/Logger';
import DefaultVideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter';
import VideoStreamIndex from '../videostreamindex/VideoStreamIndex';
import ConnectionMetrics from './ConnectionMetrics';
import ContentShareSimulcastEncodingParameters from './ContentShareSimulcastEncodingParameters';
import SimulcastUplinkObserver from './SimulcastUplinkObserver';
import SimulcastUplinkPolicy from './SimulcastUplinkPolicy';
/**
 * [[DefaultSimulcastUplinkPolicyForContentShare]] sets the capture and encode
 *  parameters based on constructor input parameters
 */
export default class DefaultSimulcastUplinkPolicyForContentShare implements SimulcastUplinkPolicy {
    private encodingParams?;
    private enableUhdContent;
    private defaultHiTargetBitrateKbps;
    private defaultLowTargetBitrateKbps;
    constructor(_logger: Logger, encodingParams?: ContentShareSimulcastEncodingParameters);
    updateConnectionMetric(_metrics: ConnectionMetrics): void;
    chooseMediaTrackConstraints(): MediaTrackConstraints;
    chooseEncodingParameters(): Map<string, RTCRtpEncodingParameters>;
    updateIndex(_videoIndex: VideoStreamIndex): void;
    wantsResubscribe(): boolean;
    chooseCaptureAndEncodeParameters(): DefaultVideoCaptureAndEncodeParameter;
    maxBandwidthKbps(): number;
    setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps: number): void;
    setHasBandwidthPriority(_hasBandwidthPriority: boolean): void;
    setHighResolutionFeatureEnabled(enabled: boolean): void;
    addObserver(_observer: SimulcastUplinkObserver): void;
    removeObserver(_observer: SimulcastUplinkObserver): void;
    forEachObserver(_observerFunc: (observer: SimulcastUplinkObserver) => void): void;
}
