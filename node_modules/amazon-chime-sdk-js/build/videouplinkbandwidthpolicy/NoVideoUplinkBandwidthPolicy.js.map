{"version":3,"file":"NoVideoUplinkBandwidthPolicy.js","sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/NoVideoUplinkBandwidthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAEtC,oJAA4H;AAM5H,MAAqB,4BAA4B;IAC/C,gBAAe,CAAC;IAChB,sBAAsB,CAAC,QAA2B,IAAS,CAAC;IAC5D,2BAA2B;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,wBAAwB;QACtB,OAAO,IAAI,GAAG,EAAoC,CAAC;IACrD,CAAC;IACD,WAAW,CAAC,WAA6B,IAAS,CAAC;IACnD,gBAAgB;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IACD,gCAAgC;QAC9B,OAAO,IAAI,+CAAqC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACtE,CAAC;IACD,gBAAgB;QACd,OAAO,CAAC,CAAC;IACX,CAAC;IACD,wBAAwB,CAAC,sBAA8B,IAAS,CAAC;IACjE,uBAAuB,CAAC,qBAA8B,IAAS,CAAC;IAChE,+BAA+B,CAAE,QAAiB,IAAS,CAAC;IAC5D,gDAAgD;QAC9C,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAzBD,+CAyBC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DefaultVideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter';\nimport VideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/VideoCaptureAndEncodeParameter';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport VideoUplinkBandwidthPolicy from '../videouplinkbandwidthpolicy/VideoUplinkBandwidthPolicy';\nimport ConnectionMetrics from './ConnectionMetrics';\n\nexport default class NoVideoUplinkBandwidthPolicy implements VideoUplinkBandwidthPolicy {\n  constructor() {}\n  updateConnectionMetric(_metrics: ConnectionMetrics): void {}\n  chooseMediaTrackConstraints(): MediaTrackConstraints {\n    return {};\n  }\n  chooseEncodingParameters(): Map<string, RTCRtpEncodingParameters> {\n    return new Map<string, RTCRtpEncodingParameters>();\n  }\n  updateIndex(_videoIndex: VideoStreamIndex): void {}\n  wantsResubscribe(): boolean {\n    return false;\n  }\n  chooseCaptureAndEncodeParameters(): VideoCaptureAndEncodeParameter {\n    return new DefaultVideoCaptureAndEncodeParameter(0, 0, 0, 0, false);\n  }\n  maxBandwidthKbps(): number {\n    return 0;\n  }\n  setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps: number): void {}\n  setHasBandwidthPriority(_hasBandwidthPriority: boolean): void {}\n  setHighResolutionFeatureEnabled?(_enabled: boolean): void {}\n  wantsVideoDependencyDescriptorRtpHeaderExtension(): boolean {\n    return false;\n  }\n}\n"]}