"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SimulcastContentShareTransceiverController_1 = __importDefault(require("../transceivercontroller/SimulcastContentShareTransceiverController"));
/**
 * [[DefaultSimulcastUplinkPolicyForContentShare]] sets the capture and encode
 *  parameters based on constructor input parameters
 */
class DefaultSimulcastUplinkPolicyForContentShare {
    constructor(_logger, encodingParams) {
        this.encodingParams = encodingParams;
        this.enableUhdContent = false;
        this.defaultHiTargetBitrateKbps = 1200;
        this.defaultLowTargetBitrateKbps = 300;
    }
    updateConnectionMetric(_metrics) { }
    chooseMediaTrackConstraints() {
        return undefined;
    }
    chooseEncodingParameters() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const newMap = new Map();
        const toBps = 1000;
        const nameArr = SimulcastContentShareTransceiverController_1.default.NAME_ARR_ASCENDING;
        newMap.set(nameArr[0], {
            rid: nameArr[0],
            active: true,
            scaleResolutionDownBy: ((_b = (_a = this.encodingParams) === null || _a === void 0 ? void 0 : _a.low) === null || _b === void 0 ? void 0 : _b.scaleResolutionDownBy) || 2,
            maxBitrate: (((_d = (_c = this.encodingParams) === null || _c === void 0 ? void 0 : _c.low) === null || _d === void 0 ? void 0 : _d.maxBitrateKbps) || this.defaultLowTargetBitrateKbps) * toBps,
            maxFramerate: ((_f = (_e = this.encodingParams) === null || _e === void 0 ? void 0 : _e.low) === null || _f === void 0 ? void 0 : _f.maxFramerate) || 5,
        });
        newMap.set(nameArr[1], {
            rid: nameArr[1],
            active: true,
            scaleResolutionDownBy: ((_h = (_g = this.encodingParams) === null || _g === void 0 ? void 0 : _g.high) === null || _h === void 0 ? void 0 : _h.scaleResolutionDownBy) || 1,
            maxBitrate: (((_k = (_j = this.encodingParams) === null || _j === void 0 ? void 0 : _j.high) === null || _k === void 0 ? void 0 : _k.maxBitrateKbps) || this.defaultHiTargetBitrateKbps) * toBps,
            maxFramerate: (_m = (_l = this.encodingParams) === null || _l === void 0 ? void 0 : _l.high) === null || _m === void 0 ? void 0 : _m.maxFramerate,
        });
        return newMap;
    }
    updateIndex(_videoIndex) { }
    wantsResubscribe() {
        return false;
    }
    chooseCaptureAndEncodeParameters() {
        return undefined;
    }
    maxBandwidthKbps() {
        return this.enableUhdContent ? 2000 : 1200;
    }
    setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps) { }
    setHasBandwidthPriority(_hasBandwidthPriority) { }
    setHighResolutionFeatureEnabled(enabled) {
        this.enableUhdContent = enabled;
        this.defaultHiTargetBitrateKbps = enabled ? 2000 : 1200;
        this.defaultLowTargetBitrateKbps = enabled ? 500 : 300;
    }
    addObserver(_observer) { }
    removeObserver(_observer) { }
    forEachObserver(_observerFunc) { }
}
exports.default = DefaultSimulcastUplinkPolicyForContentShare;
//# sourceMappingURL=DefaultSimulcastUplinkPolicyForContentShare.js.map