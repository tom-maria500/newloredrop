{"version":3,"file":"DefaultSimulcastUplinkPolicy.js","sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport SimulcastLayers from '../simulcastlayers/SimulcastLayers';\nimport SimulcastTransceiverController from '../transceivercontroller/SimulcastTransceiverController';\nimport { Maybe } from '../utils/Types';\nimport DefaultVideoAndEncodeParameter from '../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport BitrateParameters from './BitrateParameters';\nimport ConnectionMetrics from './ConnectionMetrics';\nimport SimulcastUplinkObserver from './SimulcastUplinkObserver';\nimport SimulcastUplinkPolicy from './SimulcastUplinkPolicy';\n\nconst enum ActiveStreams {\n  kHi,\n  kHiAndLow,\n  kMidAndLow,\n}\n\n/**\n * [[DefaultSimulcastUplinkPolicy]] determines capture and encode\n *  parameters that reacts to estimated uplink bandwidth\n */\nexport default class DefaultSimulcastUplinkPolicy implements SimulcastUplinkPolicy {\n  static readonly kHiTargetBitrateKbpsHd = 1200;\n  static readonly kMidTargetBitrateKbpsHd = 600;\n  static readonly kLowTargetBitrateKbpsHd = 300;\n  static readonly kHiTargetBitrateKbpsFhd = 2000;\n  static readonly kMidTargetBitrateKbpsFhd = 1000;\n  static readonly kLowTargetBitrateKbpsFhd = 500;\n\n  private numSenders: number = 0;\n  // Simulcast is disabled when there are only 2 or fewer attendees, because in that case the backend will forward REMBs from\n  // receiver to sender. Therefore there is no need for simulcast based adaption.\n  private shouldDisableSimulcast: boolean = false;\n  private optimalParameters: DefaultVideoAndEncodeParameter;\n  private parametersInEffect: DefaultVideoAndEncodeParameter;\n  private newQualityMap = new Map<string, RTCRtpEncodingParameters>();\n  private currentQualityMap = new Map<string, RTCRtpEncodingParameters>();\n  private newActiveStreams: ActiveStreams = ActiveStreams.kHiAndLow;\n  private videoIndex: VideoStreamIndex | null = null;\n  private activeStreamsToPublish: ActiveStreams;\n  private observerQueue: Set<SimulcastUplinkObserver> = new Set<SimulcastUplinkObserver>();\n  private hiTargetBitrateKbps: number = DefaultSimulcastUplinkPolicy.kHiTargetBitrateKbpsHd;\n  private midTargetBitrateKbps: number = DefaultSimulcastUplinkPolicy.kMidTargetBitrateKbpsHd;\n  private lowTargetBitrateKbps: number = DefaultSimulcastUplinkPolicy.kLowTargetBitrateKbpsHd;\n  private enableFhdVideo: boolean = false;\n\n  constructor(private selfAttendeeId: string, private logger: Logger) {\n    this.optimalParameters = new DefaultVideoAndEncodeParameter(0, 0, 0, 0, true);\n    this.parametersInEffect = new DefaultVideoAndEncodeParameter(0, 0, 0, 0, true);\n    this.currentQualityMap = this.fillEncodingParamWithBitrates([\n      this.lowTargetBitrateKbps,\n      0,\n      this.hiTargetBitrateKbps,\n    ]);\n    this.newQualityMap = this.fillEncodingParamWithBitrates([\n      this.lowTargetBitrateKbps,\n      0,\n      this.hiTargetBitrateKbps,\n    ]);\n  }\n\n  updateConnectionMetric(_metrics: ConnectionMetrics): void {}\n\n  private calculateEncodingParameters(): Map<string, RTCRtpEncodingParameters> {\n    // bitrates parameter min is not used for now\n    const newBitrates: BitrateParameters[] = [\n      new BitrateParameters(),\n      new BitrateParameters(),\n      new BitrateParameters(),\n    ];\n\n    if (this.shouldDisableSimulcast) {\n      // See comment above `shouldDisableSimulcast` for usage.\n      //\n      // The value of `newActiveStreams` is somewhat irrelevant since in one to one calls\n      // we forward REMBs, so this single stream will adapt anywhere from < 100 kbps to 1200 kbps\n      // based on both sender and receiver network conditions. E.g. A receiver may calculate it's\n      // receive BWE as 300 kbps, send that in a REMB which is forwarded, and on receipt the sender\n      // will set its own BWE at 300 kbps, and start sending that as well (again, only for one-to-one\n      // calls). Additionally the value `kHi` is only relevant to the send side (via\n      // `encodingSimulcastLayersDidChange`) as it is not transmitted in anyform to the receiver.\n      //\n      // We use middle layer here to work around a bug in Chromium where\n      // it seems when a transceiver is created when BWE is low (e.g. on a reconnection),\n      // it will never reset the encoder even when `setParameters` is called.  WebRTC bug\n      // #12788 seems to call a similar issue out as fixed for VP8, it's not clear if this\n      // is the same issue for H.264. Additionally we are not able to force a keyframe\n      // request from the backend since it will only be sending padding (which also\n      // don't have MID due to #10822). Since we don't scale when simulcast is disabled\n      // this doesn't have any end-user effect.\n      //\n      // Note that this still relies on a little bit (5-6 packets) of padding on reconnect\n      // and that technically the browser will still eventually try to send all 3 streams.\n      //\n      // Also note that due to some uninvestigated logic in bitrate allocation, Chromium\n      // will skip the bottom layer if we try setting it to 1200 kbps instead so it will\n      // still take a while to recover (as it needs to send padding until it reaches around\n      // 1000 kbps).\n      this.newActiveStreams = ActiveStreams.kHi;\n      newBitrates[0].maxBitrateKbps = 0;\n      newBitrates[1].maxBitrateKbps = this.hiTargetBitrateKbps;\n      newBitrates[2].maxBitrateKbps = 0;\n    } else if (this.numSenders <= 4) {\n      // E.g., 320x192+ (640x384)  + 1280x768\n      this.newActiveStreams = ActiveStreams.kHiAndLow;\n      newBitrates[0].maxBitrateKbps = this.lowTargetBitrateKbps;\n      newBitrates[1].maxBitrateKbps = 0;\n      newBitrates[2].maxBitrateKbps = this.hiTargetBitrateKbps;\n    } else {\n      // E.g., 320x192 + 640x384 + (1280x768)\n      this.newActiveStreams = ActiveStreams.kMidAndLow;\n      // Given the high number of senders, we reduce the low bitrate marginally to\n      // make it easier to obtain videos from all remote senders\n      newBitrates[0].maxBitrateKbps = (this.lowTargetBitrateKbps * 2) / 3;\n      newBitrates[1].maxBitrateKbps =\n        this.numSenders <= 6 ? this.midTargetBitrateKbps : this.midTargetBitrateKbps * 0.6;\n      newBitrates[2].maxBitrateKbps = 0;\n    }\n    const bitrates: number[] = newBitrates.map((v, _i, _a) => {\n      return v.maxBitrateKbps;\n    });\n\n    this.newQualityMap = this.fillEncodingParamWithBitrates(bitrates);\n    if (!this.encodingParametersEqual()) {\n      this.logger.info(\n        `simulcast: policy:calculateEncodingParameters numSources:${\n          this.numSenders\n        } shouldDisableSimulcast:${\n          this.shouldDisableSimulcast\n        } newQualityMap: ${this.getQualityMapString(this.newQualityMap)}`\n      );\n    }\n    return this.newQualityMap;\n  }\n\n  chooseMediaTrackConstraints(): MediaTrackConstraints {\n    return undefined;\n  }\n\n  chooseEncodingParameters(): Map<string, RTCRtpEncodingParameters> {\n    this.currentQualityMap = this.newQualityMap;\n    if (this.activeStreamsToPublish !== this.newActiveStreams) {\n      this.activeStreamsToPublish = this.newActiveStreams;\n      this.publishEncodingSimulcastLayer();\n    }\n    return this.currentQualityMap;\n  }\n\n  updateIndex(videoIndex: VideoStreamIndex): void {\n    // the +1 for self is assuming that we intend to send video, since\n    // the context here is VideoUplinkBandwidthPolicy\n    const numSenders =\n      videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + 1;\n    const numSendersChanged = numSenders !== this.numSenders;\n\n    // See comment above `shouldDisableSimulcast`\n    const numParticipants = videoIndex.numberOfParticipants();\n    const newShouldDisableSimulcast = numParticipants >= 0 && numParticipants <= 2;\n    const shouldDisableSimulcastChanged = this.shouldDisableSimulcast !== newShouldDisableSimulcast;\n\n    this.numSenders = numSenders;\n    this.shouldDisableSimulcast = newShouldDisableSimulcast;\n    this.optimalParameters = new DefaultVideoAndEncodeParameter(\n      this.captureWidth(),\n      this.captureHeight(),\n      this.captureFrameRate(),\n      this.maxBandwidthKbps(),\n      false\n    );\n    this.videoIndex = videoIndex;\n    if (numSendersChanged || shouldDisableSimulcastChanged) {\n      this.newQualityMap = this.calculateEncodingParameters();\n    }\n  }\n\n  wantsResubscribe(): boolean {\n    return !this.encodingParametersEqual();\n  }\n\n  private compareEncodingParameter(\n    encoding1: RTCRtpEncodingParameters,\n    encoding2: RTCRtpEncodingParameters\n  ): boolean {\n    return JSON.stringify(encoding1) === JSON.stringify(encoding2);\n  }\n\n  private encodingParametersEqual(): boolean {\n    let different = false;\n    for (const ridName of SimulcastTransceiverController.NAME_ARR_ASCENDING) {\n      different =\n        different ||\n        !this.compareEncodingParameter(\n          this.newQualityMap.get(ridName),\n          this.currentQualityMap.get(ridName)\n        );\n      if (different) {\n        break;\n      }\n    }\n\n    return !different;\n  }\n\n  chooseCaptureAndEncodeParameters(): DefaultVideoAndEncodeParameter {\n    // should deprecate in this policy\n    this.parametersInEffect = this.optimalParameters.clone();\n    return this.parametersInEffect.clone();\n  }\n\n  private captureWidth(): number {\n    // should deprecate in this policy\n    const width = this.enableFhdVideo ? 1920 : 1280;\n    return width;\n  }\n\n  private captureHeight(): number {\n    // should deprecate in this policy\n    const height = this.enableFhdVideo ? 1080 : 768;\n    return height;\n  }\n\n  private captureFrameRate(): number {\n    // should deprecate in this policy\n    return 15;\n  }\n\n  maxBandwidthKbps(): number {\n    // should deprecate in this policy\n    return this.enableFhdVideo ? 2500 : 1400;\n  }\n\n  setIdealMaxBandwidthKbps(_idealMaxBandwidthKbps: number): void {}\n  setHasBandwidthPriority(_hasBandwidthPriority: boolean): void {}\n\n  setHighResolutionFeatureEnabled(enabled: boolean): void {\n    this.enableFhdVideo = enabled;\n    // Raise the bitrates if we are sending FHD\n    this.hiTargetBitrateKbps = enabled\n      ? DefaultSimulcastUplinkPolicy.kHiTargetBitrateKbpsFhd\n      : DefaultSimulcastUplinkPolicy.kHiTargetBitrateKbpsHd;\n    this.midTargetBitrateKbps = enabled\n      ? DefaultSimulcastUplinkPolicy.kMidTargetBitrateKbpsFhd\n      : DefaultSimulcastUplinkPolicy.kMidTargetBitrateKbpsHd;\n    this.lowTargetBitrateKbps = enabled\n      ? DefaultSimulcastUplinkPolicy.kLowTargetBitrateKbpsFhd\n      : DefaultSimulcastUplinkPolicy.kLowTargetBitrateKbpsHd;\n  }\n\n  wantsVideoDependencyDescriptorRtpHeaderExtension(): boolean {\n    return true;\n  }\n\n  private fillEncodingParamWithBitrates(\n    bitratesKbps: number[]\n  ): Map<string, RTCRtpEncodingParameters> {\n    const newMap = new Map<string, RTCRtpEncodingParameters>();\n    const toBps = 1000;\n    const nameArr = SimulcastTransceiverController.NAME_ARR_ASCENDING;\n    const bitrateArr = bitratesKbps;\n    // Don't scale the single simulcast stream regardless of its layer.\n    let scale = this.shouldDisableSimulcast ? 1 : 4;\n    for (let i = 0; i < nameArr.length; i++) {\n      const ridName = nameArr[i];\n      newMap.set(ridName, {\n        rid: ridName,\n        active: bitrateArr[i] > 0,\n        scaleResolutionDownBy: Math.max(scale, 1),\n        maxBitrate: bitrateArr[i] * toBps,\n      });\n      scale = scale / 2;\n    }\n\n    return newMap;\n  }\n\n  private getQualityMapString(params: Map<string, RTCRtpEncodingParameters>): string {\n    let qualityString = '';\n    const localDescriptions = this.videoIndex.localStreamDescriptions();\n    if (localDescriptions.length === 3) {\n      params.forEach((value: RTCRtpEncodingParameters) => {\n        qualityString += `{ rid: ${value.rid} active:${value.active} maxBitrate:${value.maxBitrate}}`;\n      });\n    }\n    return qualityString;\n  }\n\n  getEncodingSimulcastLayer(activeStreams: ActiveStreams): SimulcastLayers {\n    switch (activeStreams) {\n      case ActiveStreams.kHi:\n        return SimulcastLayers.High;\n      case ActiveStreams.kHiAndLow:\n        return SimulcastLayers.LowAndHigh;\n      case ActiveStreams.kMidAndLow:\n        return SimulcastLayers.LowAndMedium;\n    }\n  }\n\n  private publishEncodingSimulcastLayer(): void {\n    const simulcastLayers = this.getEncodingSimulcastLayer(this.activeStreamsToPublish);\n    this.forEachObserver(observer => {\n      Maybe.of(observer.encodingSimulcastLayersDidChange).map(f =>\n        f.bind(observer)(simulcastLayers)\n      );\n    });\n  }\n\n  addObserver(observer: SimulcastUplinkObserver): void {\n    this.logger.info('adding simulcast uplink observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer: SimulcastUplinkObserver): void {\n    this.logger.info('removing simulcast uplink observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc: (observer: SimulcastUplinkObserver) => void): void {\n    for (const observer of this.observerQueue) {\n      observerFunc(observer);\n    }\n  }\n}\n"]}