{"version":3,"file":"NScaleVideoUplinkBandwidthPolicy.js","sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ExtendedBrowserBehavior from '../browserbehavior/ExtendedBrowserBehavior';\nimport Logger from '../logger/Logger';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport TransceiverController from '../transceivercontroller/TransceiverController';\nimport DefaultVideoAndEncodeParameter from '../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport ConnectionMetrics from './ConnectionMetrics';\nimport VideoUplinkBandwidthPolicy from './VideoUplinkBandwidthPolicy';\n\n/** NScaleVideoUplinkBandwidthPolicy implements capture and encode\n *  parameters that are nearly equivalent to those chosen by the\n *  traditional native clients, except for a modification to\n *  maxBandwidthKbps and scaleResolutionDownBy described below. */\nexport default class NScaleVideoUplinkBandwidthPolicy implements VideoUplinkBandwidthPolicy {\n  static readonly encodingMapKey = 'video';\n  // 0, 1, 2 have dummy value as we keep the original resolution if we have less than 2 videos.\n  // For each video cource, we define a target height for low resoultion and high resolution,\n  // respectively. This is corresponding to the meeting feature specified for the meeting.\n  static readonly targetHeightArray = [\n    [0, 0], // 0\n    [0, 0], // 1\n    [0, 0], // 2\n    [540, 720], // 3\n    [540, 720], // 4\n    [480, 540], // 5\n    [480, 540], // 6\n    [480, 540], // 7\n    [480, 540], // 8\n    [360, 480], // 9\n    [360, 480], // 10\n    [360, 480], // 11\n    [360, 480], // 12\n    [270, 360], // 13\n    [270, 360], // 14\n    [270, 360], // 15\n    [270, 360], // 16\n    [180, 270], // 17\n    [180, 270], // 18\n    [180, 270], // 19\n    [180, 270], // 20\n    [180, 270], // 21\n    [180, 270], // 22\n    [180, 270], // 23\n    [180, 270], // 24\n    [180, 270], // 25\n  ];\n  static readonly SVCCodecNames: string[] = ['VP9'];\n\n  private numberOfPublishedVideoSources: number | undefined = undefined;\n  private optimalParameters: DefaultVideoAndEncodeParameter;\n  private parametersInEffect: DefaultVideoAndEncodeParameter;\n  private idealMaxBandwidthKbps = 1500;\n  private hasBandwidthPriority: boolean = false;\n  private encodingParamMap = new Map<string, RTCRtpEncodingParameters>();\n  private transceiverController: TransceiverController;\n  private enableHighResolutionFeature: boolean = false;\n  private enableSVC: boolean = false;\n  private isUsingSVCCodec: boolean = true;\n  private numParticipants: number = 0;\n\n  constructor(\n    private selfAttendeeId: string,\n    private scaleResolution: boolean = true,\n    private logger: Logger | undefined = undefined,\n    private browserBehavior: ExtendedBrowserBehavior | undefined = undefined\n  ) {\n    this.reset();\n  }\n\n  reset(): void {\n    // Don't reset `idealMaxBandwidthKbps` or `hasBandwidthPriority` which are set via builder API paths\n    this.numberOfPublishedVideoSources = undefined;\n    this.optimalParameters = new DefaultVideoAndEncodeParameter(0, 0, 0, 0, false);\n    this.parametersInEffect = new DefaultVideoAndEncodeParameter(0, 0, 0, 0, false);\n    this.encodingParamMap.set(NScaleVideoUplinkBandwidthPolicy.encodingMapKey, {\n      maxBitrate: 0,\n    });\n  }\n\n  updateConnectionMetric(_metrics: ConnectionMetrics): void {\n    return;\n  }\n\n  chooseMediaTrackConstraints(): MediaTrackConstraints {\n    return {};\n  }\n\n  chooseEncodingParameters(): Map<string, RTCRtpEncodingParameters> {\n    return new Map<string, RTCRtpEncodingParameters>();\n  }\n\n  updateIndex(videoIndex: VideoStreamIndex): void {\n    let hasLocalVideo = true;\n    if (this.transceiverController) {\n      hasLocalVideo = this.transceiverController.hasVideoInput();\n    }\n    // the +1 for self is assuming that we intend to send video, since\n    // the context here is VideoUplinkBandwidthPolicy\n    const numberOfPublishedVideoSources =\n      videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) +\n      (hasLocalVideo ? 1 : 0);\n    const numParticipants = videoIndex.numberOfParticipants();\n    if (\n      this.numParticipants === numParticipants &&\n      this.numberOfPublishedVideoSources === numberOfPublishedVideoSources\n    ) {\n      this.logger?.debug('Skipping update index; Number of participants has not changed');\n      return;\n    }\n    this.numberOfPublishedVideoSources = numberOfPublishedVideoSources;\n    this.numParticipants = numParticipants;\n\n    this.updateOptimalParameters();\n  }\n\n  wantsResubscribe(): boolean {\n    return !this.parametersInEffect.equal(this.optimalParameters);\n  }\n\n  chooseCaptureAndEncodeParameters(): DefaultVideoAndEncodeParameter {\n    this.parametersInEffect = this.optimalParameters.clone();\n    return this.parametersInEffect.clone();\n  }\n\n  private updateOptimalParameters(): void {\n    let scale = 1;\n    if (this.transceiverController) {\n      const settings = this.getStreamCaptureSetting();\n      if (settings) {\n        const encodingParams = this.calculateEncodingParameters(settings);\n        scale = encodingParams.scaleResolutionDownBy;\n      }\n    }\n    this.optimalParameters = new DefaultVideoAndEncodeParameter(\n      this.captureWidth(),\n      this.captureHeight(),\n      this.captureFrameRate(),\n      this.maxBandwidthKbps(),\n      false,\n      scale,\n      this.enableSVC && this.numParticipants > 2 && this.isUsingSVCCodec\n    );\n  }\n\n  private captureWidth(): number {\n    let width = 640;\n    if (this.getNumberOfPublishedVideoSources() > 4) {\n      width = 320;\n    }\n    return width;\n  }\n\n  private captureHeight(): number {\n    let height = 384;\n    if (this.getNumberOfPublishedVideoSources() > 4) {\n      height = 192;\n    }\n    return height;\n  }\n\n  private captureFrameRate(): number {\n    return 15;\n  }\n\n  maxBandwidthKbps(): number {\n    if (this.hasBandwidthPriority) {\n      return Math.trunc(this.idealMaxBandwidthKbps);\n    }\n    let rate = 0;\n    if (this.getNumberOfPublishedVideoSources() <= 2) {\n      rate = this.idealMaxBandwidthKbps;\n    } else if (this.getNumberOfPublishedVideoSources() <= 4) {\n      rate = (this.idealMaxBandwidthKbps * 2) / 3;\n    } else {\n      rate =\n        ((544 / 11 + 14880 / (11 * this.getNumberOfPublishedVideoSources())) / 600) *\n        this.idealMaxBandwidthKbps;\n    }\n    return Math.trunc(rate);\n  }\n\n  setIdealMaxBandwidthKbps(idealMaxBandwidthKbps: number): void {\n    this.idealMaxBandwidthKbps = idealMaxBandwidthKbps;\n  }\n\n  setHasBandwidthPriority(hasBandwidthPriority: boolean): void {\n    this.hasBandwidthPriority = hasBandwidthPriority;\n  }\n\n  setTransceiverController(transceiverController: TransceiverController | undefined): void {\n    this.transceiverController = transceiverController;\n  }\n\n  setSVCEnabled(enable: boolean): void {\n    this.enableSVC = enable;\n    this.logger?.info(`setSVCEnabled, enable: ${enable}}`);\n  }\n\n  setHighResolutionFeatureEnabled(enabled: boolean): void {\n    this.enableHighResolutionFeature = enabled;\n  }\n\n  async updateTransceiverController(): Promise<void> {\n    const settings = this.getStreamCaptureSetting();\n    if (!settings) {\n      return;\n    }\n    const encodingParams: RTCRtpEncodingParameters = this.calculateEncodingParameters(settings);\n    if (this.shouldUpdateEndcodingParameters(encodingParams)) {\n      this.encodingParamMap.set(NScaleVideoUplinkBandwidthPolicy.encodingMapKey, encodingParams);\n      this.transceiverController.setEncodingParameters(this.encodingParamMap);\n    }\n  }\n\n  private shouldUpdateEndcodingParameters(encoding: RTCRtpEncodingParameters): boolean {\n    const transceiverEncoding = this.transceiverController\n      .localVideoTransceiver()\n      .sender.getParameters()?.encodings?.[0];\n\n    /* istanbul ignore next: transceiverEncoding?.scaleResolutionDownBy cannot be covered */\n    return (\n      encoding.maxBitrate !== transceiverEncoding?.maxBitrate ||\n      encoding.scaleResolutionDownBy !== transceiverEncoding?.scaleResolutionDownBy ||\n      // @ts-ignore\n      encoding?.scalabilityMode !== transceiverEncoding?.scalabilityMode\n    );\n  }\n\n  private calculateEncodingParameters(setting: MediaTrackSettings): RTCRtpEncodingParameters {\n    const maxBitrate = this.maxBandwidthKbps() * 1000;\n    let scale = 1;\n    let targetHeight = 720;\n    if (\n      setting.height !== undefined &&\n      setting.width !== undefined &&\n      this.scaleResolution &&\n      !this.hasBandwidthPriority &&\n      this.getNumberOfPublishedVideoSources() > 2\n    ) {\n      targetHeight =\n        NScaleVideoUplinkBandwidthPolicy.targetHeightArray[\n          Math.min(\n            this.getNumberOfPublishedVideoSources(),\n            NScaleVideoUplinkBandwidthPolicy.targetHeightArray.length - 1\n          )\n        ][this.enableHighResolutionFeature ? 1 : 0];\n      //Workaround for issue https://github.com/aws/amazon-chime-sdk-js/issues/2002\n      if (targetHeight === 480 && this.browserBehavior?.disable480pResolutionScaleDown()) {\n        targetHeight = 360;\n      }\n      scale = Math.max(Math.min(setting.height, setting.width) / targetHeight, 1);\n      this.logger?.info(\n        `Resolution scale factor is ${scale} for capture resolution ${setting.width}x${\n          setting.height\n        }. New dimension is ${setting.width / scale}x${setting.height / scale}`\n      );\n    }\n\n    if (this.enableSVC) {\n      let scalabilityMode: string;\n      if ((this.numParticipants >= 0 && this.numParticipants < 3) || !this.isUsingSVCCodec) {\n        scalabilityMode = 'L1T1';\n      } else {\n        // We do not limit the number of layers depending on input resolution, however Chrome will drop anything below around 135p.\n        scalabilityMode = 'L3T3';\n      }\n      this.logger?.info(\n        `calculateEncodingParameters: SVC: ${this.enableSVC}    participants: ${\n          this.numParticipants\n        }     publishers: ${this.getNumberOfPublishedVideoSources()}     bitrate: ${maxBitrate}  targetHeight: ${targetHeight}  scalabilityMode: ${scalabilityMode}   isUsingSVCCodec: ${\n          this.isUsingSVCCodec\n        }`\n      );\n      return {\n        scaleResolutionDownBy: scale,\n        maxBitrate: maxBitrate,\n        // @ts-ignore\n        scalabilityMode: scalabilityMode,\n      };\n    } else {\n      return {\n        scaleResolutionDownBy: scale,\n        maxBitrate: maxBitrate,\n      };\n    }\n  }\n\n  private getStreamCaptureSetting(): MediaTrackSettings | undefined {\n    return this.transceiverController?.localVideoTransceiver()?.sender?.track?.getSettings();\n  }\n\n  private getNumberOfPublishedVideoSources(): number {\n    /* istanbul ignore next: policy calculation is dependent on index so this is never undefined at time of use */\n    return this.numberOfPublishedVideoSources ?? 0;\n  }\n\n  wantsVideoDependencyDescriptorRtpHeaderExtension(): boolean {\n    return this.enableSVC;\n  }\n\n  setMeetingSupportedVideoSendCodecs(\n    meetingSupportedVideoSendCodecPreferences: VideoCodecCapability[] | undefined,\n    videoSendCodecPreferences: VideoCodecCapability[]\n  ): void {\n    const codecs = meetingSupportedVideoSendCodecPreferences ?? videoSendCodecPreferences;\n\n    const isUsingSVCCodec =\n      codecs.length > 0 &&\n      NScaleVideoUplinkBandwidthPolicy.SVCCodecNames.includes(codecs[0].codecName);\n    if (isUsingSVCCodec !== this.isUsingSVCCodec) {\n      this.isUsingSVCCodec = isUsingSVCCodec;\n      this.updateOptimalParameters();\n    }\n  }\n}\n"]}