{"version":3,"file":"VideoUplinkBandwidthPolicy.js","sourceRoot":"","sources":["../../src/videouplinkbandwidthpolicy/VideoUplinkBandwidthPolicy.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport TransceiverController from '../transceivercontroller/TransceiverController';\nimport VideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/VideoCaptureAndEncodeParameter';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport ConnectionMetrics from './ConnectionMetrics';\n\n/**\n * A [[VideoUplinkBandwidthPolicy]] makes decisions about uplink video\n * bandwidth usage and related camera capture parameters.\n */\nexport default interface VideoUplinkBandwidthPolicy {\n  /**\n   * Reset back to initial state\n   */\n  reset?(): void;\n\n  /**\n   * Potentially update the optimal capture and encode parameters\n   * based on the given VideoStreamIndex.\n   */\n  updateIndex(videoIndex: VideoStreamIndex): void;\n\n  /**\n   * Return true if the policy has decided that a change to the\n   * captured and transmitted video stream would be beneficial.\n   */\n  wantsResubscribe(): boolean;\n\n  /**\n   * Update the internal state with the capture and encode parameters\n   * we expect to be used, and return the parameters.\n   */\n  chooseCaptureAndEncodeParameters(): VideoCaptureAndEncodeParameter;\n\n  /**\n   * Gets the maximum encoding bitrate kbps after bandwidth constraints are applied.\n   */\n  maxBandwidthKbps(): number;\n\n  /**\n   * Sets ideal maximum bandwidth kbps.\n   */\n  setIdealMaxBandwidthKbps(maxBandwidthKbps: number): void;\n\n  /**\n   * Sets whether video uplink bandwidth is currently prioritized.\n   */\n  setHasBandwidthPriority(hasBandwidthPriority: boolean): void;\n\n  /**\n   * Returns the selected encoding parameter\n   */\n  chooseEncodingParameters(): Map<string, RTCRtpEncodingParameters>;\n\n  /**\n   * Updates VideoUplinkPolicy with connection metrics\n   */\n  updateConnectionMetric(metrics: ConnectionMetrics): void;\n\n  /**\n   * This function is deprecated and unused, and will be removed in a future release.\n   */\n  chooseMediaTrackConstraints(): MediaTrackConstraints;\n\n  /**\n   * Set a reference to the current transceiver controller.\n   * The audio video controller should call this method to pass down a transceiver controller to the policy\n   * when the meeting starts and set it to undefined when the meeting ends.\n   * If a meeting is stopped and started repeatedly, this pair of calls will be repeated to match.\n   * All calls to updateTransceiverController will occur between this pair of calls.\n   * This method should not throw.\n   * @param {TransceiverController} transceiverController - The transceiver controller\n   */\n  setTransceiverController?(transceiverController: TransceiverController | undefined): void;\n\n  /**\n   * Update the transceiver controller that is set from setTransceiverController such as setEncodingParameters.\n   * Only used when unified plan is enabled but not available for simulcast for now.\n   * This method should be called when the policy needs to update the local video encoding parameters such as after\n   * setHasBandwidthPriority has been called.\n   * The default audio video controller calls this after a video is on/off or when an active speakers changes.\n   * This method should not throw.\n   */\n  updateTransceiverController?(): void;\n\n  /**\n   * Set if high resultion feature (i.e., 1080p for camera and 4k for content) is enabled.\n   */\n  setHighResolutionFeatureEnabled?(enabled: boolean): void;\n\n  /**\n   * Set whether to enable scalable video coding (SVC)\n   */\n  setSVCEnabled?(enable: boolean): void;\n\n  /**\n   * Dependency descriptors can be used by the backend to designate spatial or temporal layers\n   * on a single encoding. Along with the video layers allocation exension this will\n   * result in the ability for remote attendees to subscribe to individual layers below the top.\n   *\n   * If the send transceiver is in a state where the layers allocation extension is not matching up with\n   * the dependency descriptor extension, or we simply don't want to allow for the seperation of spatial\n   * or temporal layers, we can remove the dependency descriptor from the SDP.\n   */\n  wantsVideoDependencyDescriptorRtpHeaderExtension?(): boolean;\n\n  /**\n   * Called when the intersection of the client's video codec send preferences\n   * and the meeting's video codec receive preferences is updated.\n   * @param meetingSupportedVideoSendCodecs - The intersection;\n   * undefined if the intersection is empty.\n   * @param videoSendCodecPreferences - The original preferences to use as a\n   * fallback when the intersection is empty.\n   */\n  setMeetingSupportedVideoSendCodecs?(\n    meetingSupportedVideoSendCodecs: VideoCodecCapability[] | undefined,\n    videoSendCodecPreferences: VideoCodecCapability[]\n  ): void;\n}\n"]}