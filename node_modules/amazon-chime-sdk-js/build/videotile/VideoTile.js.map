{"version":3,"file":"VideoTile.js","sourceRoot":"","sources":["../../src/videotile/VideoTile.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoTileState from './VideoTileState';\n\n/**\n * [[VideoTile]] is a binding of attendee id, a video stream, and a video element\n * that sends out updates to session observers whenever one of its properties changes.\n */\nexport default interface VideoTile {\n  /**\n   * Returns the tile id for this tile.\n   */\n  id(): number;\n\n  /**\n   * Returns a [[VideoTileState]] representing a copy of the state of the tile.\n   */\n  state(): VideoTileState;\n\n  /**\n   * Returns a [[VideoTileState]]] representing a mutable reference to the state of the tile.\n   */\n  stateRef(): VideoTileState;\n\n  /**\n   * Updates current video tile’s state with the provided arguments.\n   * If the tile state is updated, the new tile state is sent to the meeting session's\n   * AudioVideoObserver's [[videoTileDidUpdate]] callback.\n   */\n  bindVideoStream(\n    attendeeId: string,\n    localTile: boolean,\n    mediaStream: MediaStream | null,\n    contentWidth: number | null,\n    contentHeight: number | null,\n    streamId: number | null,\n    externalUserId?: string,\n    groupId?: number | null\n  ): void;\n\n  /**\n   * Binds the video element to the tile and sends out updates. This must also be called\n   * anytime the display of the video element changes,\n   * for example, when changing its dimensions or hiding it. To unbind\n   * the video element from the tile pass null.\n   */\n  bindVideoElement(videoElement: HTMLVideoElement | null): void;\n\n  /**\n   * Pauses the tile if it is not paused. When paused, the tile moves to an inactive state.\n   * The updated video tile state is sent to the meeting session’s\n   * AudioVideoObserver's [[videoTileDidUpdate]] callback.\n   * This API is intended to be called on the remote videos. If called on a local video tile,\n   * then the tile will no longer be updated, but the local video source will continue to be sent into the meeting.\n   */\n  pause(): void;\n\n  /**\n   * Unpauses the tile if it was paused. When unpaused, the tile moves to the active state.\n   * The updated video tile state is sent to the meeting session’s\n   * AudioVideoObserver's [[videoTileDidUpdate]] callback.\n   * This API is intended to be called on the remote videos and has no effect on the local video.\n   * When called on a remote video, the remote video source will start getting the updates if paused earlier.\n   */\n  unpause(): void;\n\n  /**\n   * Marks the tile as having poor connection returning whether it was previously unmarked.\n   * The updated video tile state is sent to the meeting session’s\n   * AudioVideoObserver's [[videoTileDidUpdate]] callback.\n   */\n  markPoorConnection(): boolean;\n\n  /**\n   * Unmarks the tile as having a poor connection returning whether it was previously marked.\n   * The updated video tile state is sent to the meeting session’s\n   * AudioVideoObserver's [[videoTileDidUpdate]] callback.\n   */\n  unmarkPoorConnection(): boolean;\n\n  /**\n   * Cleans up resources associated with the tile. The tile may not be used\n   * after destroy is called.\n   */\n  destroy(): void;\n\n  /**\n   * Captures a snapshot image from the tile, or null if the tile is not\n   * active right now.\n   */\n  capture(): ImageData | null;\n\n  /**\n   * Override the internal stream ID.  Needed as some logic around pause state has been\n   * coupled to the stream ID in the `VideoTileState` struct.\n   */\n  setStreamId?(id: number): void;\n}\n"]}