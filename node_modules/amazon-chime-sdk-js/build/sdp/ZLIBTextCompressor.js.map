{"version":3,"file":"ZLIBTextCompressor.js","sourceRoot":"","sources":["../../src/sdp/ZLIBTextCompressor.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;AAEtC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAG7B;;GAEG;AACH,MAAqB,kBAAkB;IAUrC;;;OAGG;IACH,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEtC;;;;;;;;;;OAUG;IACH,QAAQ,CAAC,IAAY,EAAE,UAAkB;QACvC,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;YAC3F,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;SAClD;QAED,MAAM,OAAO,GAAG;YACd,QAAQ,EAAE,kBAAkB,CAAC,WAAW;YACxC,UAAU,EAAE,UAAU;SACvB,CAAC;QAEF,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACtD,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;;;;;;;;;OAUG;IACH,UAAU,CAAC,cAA0B,EAAE,UAAkB;QACvD,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;YAC3F,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;SAClD;QAED,MAAM,OAAO,GAAG;YACd,EAAE,EAAE,QAAQ;YACZ,UAAU,EAAE,UAAU;YACtB,SAAS,EAAE,IAAI;SAChB,CAAC;QAEF,IAAI,gBAAgB,GAAG,EAAE,CAAC;QAC1B,IAAI;YACF,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;SAC7D;QAAC,OAAO,EAAE,EAAE;YACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gDAAgD,EAAE,GAAG,CAAC,CAAC;SAC1E;QACD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;;AAxEH,qCAyEC;AAxEC,sFAAsF;AACtF,qFAAqF;AACrF,6BAA6B;AAC7B,0BAA0B;AACX,8BAAW,GAAW,CAAC,CAAC;AAEvC,oEAAoE;AACrD,sCAAmB,GAAW,KAAK,CAAC,CAAC,QAAQ","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nconst pako = require('pako');\nimport Logger from '../logger/Logger';\n\n/**\n * [[ZLIBTextCompressor]] Performs the text compression and decompression using zlib\n */\nexport default class ZLIBTextCompressor {\n  // The memory Level parameter specifies how much memory to use for the internal state.\n  // Smaller values use less memory but are slower, while higher values use more memory\n  // to gain compression speed.\n  // Range is between 1 to 9\n  private static Z_MEM_LEVEL: number = 9;\n\n  // 32kB is the maximum dictionary size supported by the zlib format.\n  private static MAX_DICTIONARY_SIZE: number = 31744; // 31 KB\n\n  /**\n   * Constructs an instance of [[ZLIBTextCompressor]]\n   * @param logger\n   */\n  constructor(private logger: Logger) {}\n\n  /**\n   * Compresses the given text.\n   *\n   * Note: The dictionary used during compression should be the same as\n   * that being used during decompression.\n   *\n   * @param text - the text that needs to be compressed\n   * @param dictionary - that will be used to seed the compression\n   *      library to improve compression's performance\n   * @returns a compressed text\n   */\n  compress(text: string, dictionary: string): Uint8Array {\n    if (dictionary.length > 0) {\n      const dictionarySize = Math.min(dictionary.length, ZLIBTextCompressor.MAX_DICTIONARY_SIZE);\n      dictionary = dictionary.slice(0, dictionarySize);\n    }\n\n    const options = {\n      memLevel: ZLIBTextCompressor.Z_MEM_LEVEL,\n      dictionary: dictionary,\n    };\n\n    const compressedText = pako.deflateRaw(text, options);\n    return compressedText;\n  }\n\n  /**\n   * Decompresses the given text and returns the original text.\n   *\n   * Note: The dictionary used during compression should be the same as\n   * that being used during decompression.\n   *\n   * @param compressedText that will be decompressed\n   * @param dictionary that will be used to seed the compression library to improve\n   *      decompression's performance\n   * @returns decompressed string\n   */\n  decompress(compressedText: Uint8Array, dictionary: string): string {\n    if (dictionary.length > 0) {\n      const dictionarySize = Math.min(dictionary.length, ZLIBTextCompressor.MAX_DICTIONARY_SIZE);\n      dictionary = dictionary.slice(0, dictionarySize);\n    }\n\n    const options = {\n      to: 'string',\n      dictionary: dictionary,\n      chunkSize: 4096,\n    };\n\n    let decompressedText = '';\n    try {\n      decompressedText = pako.inflateRaw(compressedText, options);\n    } catch (ex) {\n      this.logger.error(`failed to decompress the string with error: [${ex}]`);\n    }\n    return decompressedText;\n  }\n}\n"]}