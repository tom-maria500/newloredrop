{"version":3,"file":"VideoCodecCapability.js","sourceRoot":"","sources":["../../src/sdp/VideoCodecCapability.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SdkVideoCodecCapability } from '../signalingprotocol/SignalingProtocol';\nimport { Eq } from '../utils/Types';\n\n/**\n * `VideoCodecCapability` represents a higher level type to wrap `RTCRtpCodecCapability`\n * and the codec name used in the SDP, while also namespacing static create functions\n * for codecs supported in the SDK.\n *\n * Note that `codecName` is different then `codecCapability.mimeType`\n */\nexport default class VideoCodecCapability implements Eq {\n  constructor(\n    public readonly codecName: string,\n    public readonly codecCapability: RTCRtpCodecCapability\n  ) {}\n\n  equals(other: this): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    if (\n      this.codecName !== other.codecName ||\n      this.codecCapability.mimeType !== other.codecCapability.mimeType ||\n      this.codecCapability.clockRate !== other.codecCapability.clockRate\n    ) {\n      return false;\n    }\n\n    const thisFmtpLine = this.codecCapability.sdpFmtpLine\n      ? this.cleanupFmtpLine(this.codecCapability.sdpFmtpLine, this.codecName)\n      : '';\n    const otherFmtpLine = other.codecCapability.sdpFmtpLine\n      ? this.cleanupFmtpLine(other.codecCapability.sdpFmtpLine, other.codecName)\n      : '';\n    return thisFmtpLine === otherFmtpLine;\n  }\n\n  /**\n   * Returns whether the codec capability fmtp line matches. This will not\n   * attempt to match H.264 profile levels (e.g. 5.2, 3.1), see internal comments for\n   * more detailed information. This function takes care of checking for an\n   * expected payload type as well.\n   *\n   * This function is meant to only be used internally.\n   */\n  fmtpLineMatches(line: string, expectedPayloadType: number): boolean {\n    const codecCapabilityFmtpLine = this.codecCapability.sdpFmtpLine;\n    if (!codecCapabilityFmtpLine) {\n      return false;\n    }\n\n    const prefix = `a=fmtp:${expectedPayloadType} `;\n    if (!line.startsWith(prefix)) {\n      return false;\n    }\n    const fmtpLineFromSdp = line.substring(prefix.length);\n\n    return (\n      this.cleanupFmtpLine(fmtpLineFromSdp, this.codecName) ===\n      this.cleanupFmtpLine(codecCapabilityFmtpLine, this.codecName)\n    );\n  }\n\n  /**\n   * Helper function to clean up the FMTP line by removing unnecessary parameters\n   * and normalizing certain codec-specific attributes.\n   */\n  private cleanupFmtpLine(fmtpLine: string, codecName: string): string {\n    // Remove starting bitrate parameter which isn't relevant to matching.\n    const bitrateRegex = /;x-google-start-bitrate=\\d+/g;\n    let cleanedLine = fmtpLine.replace(bitrateRegex, '');\n\n    if (codecName === 'H264') {\n      // Given that most H.264 decoders for the past decade can support level 5.2, we do not bother checking the Profile Level\n      // with regards to canonically defined, meeting wide, H.264 profile options (i.e. we intentionally do not split up `h264HighProfile`\n      // into `h264HighProfileLevel52, `h264HighProfileLevel31`, etc.).\n      //\n      // Additionally, Chrome bundles FFmpeg software decoders which while advertised as 3.1, will happily decode any bitrate/resolution.\n      //\n      // If maximum compatability with H.264 is desired by a builder they should stick to H.264 Constrained Baseline Profile.\n      const profileLevelIdRegex = /profile-level-id=([0-9a-f]{4})[0-9a-f]{2}/i;\n      cleanedLine = cleanedLine.replace(profileLevelIdRegex, 'profile-level-id=$1');\n    }\n\n    return cleanedLine;\n  }\n\n  /**\n   * Returns the configuration of VP8 supported by the SDK\n   */\n  static vp8(): VideoCodecCapability {\n    return new VideoCodecCapability('VP8', {\n      clockRate: 90000,\n      mimeType: 'video/VP8',\n    });\n  }\n\n  /**\n   * Returns the configuration of H.264 Baseline Profile supported by the SDK.\n   *\n   * This profile is more likely to use hardware for encode on most browsers\n   * then constrained baseline profile.\n   */\n  static h264BaselineProfile(): VideoCodecCapability {\n    return new VideoCodecCapability('H264', {\n      clockRate: 90000,\n      mimeType: 'video/H264',\n      sdpFmtpLine: 'level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f',\n    });\n  }\n\n  /**\n   * Returns the configuration of H.264 CBP supported by the SDK.\n   *\n   * This profile is required in all WebRTC implementations and typically\n   * uses software for the encode for stability. Hardware decode is common.\n   */\n  static h264ConstrainedBaselineProfile(): VideoCodecCapability {\n    return new VideoCodecCapability('H264', {\n      clockRate: 90000,\n      mimeType: 'video/H264',\n      sdpFmtpLine: 'level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f',\n    });\n  }\n\n  /**\n   * Returns the configuration of H.264 Main Profile supported by the SDK\n   *\n   * This profile is more likely to use hardware for encode on most browsers\n   * then constrained baseline profile. It may have modest quality/bitrate improvements\n   * over baseline/constrained baseline profile.\n   */\n  static h264MainProfile(): VideoCodecCapability {\n    return new VideoCodecCapability('H264', {\n      clockRate: 90000,\n      mimeType: 'video/H264',\n      sdpFmtpLine: 'level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=4d001f',\n    });\n  }\n\n  /**\n   * Returns the configuration of H.264 High Profile supported by the SDK.\n   *\n   * Currently most browsers do not have software fallback for high profile\n   * which may impact stability. Its usage should be done with caution.\n   *\n   * On MacOS, until https://bugs.chromium.org/p/chromium/issues/detail?id=1520287 is\n   * resolved, receivers will fail to allocate the decoder for this profile if the sender switches away and back\n   * to this codec (e.g. fallback for a Firefox receiver, and then recovery when the Firefox\n   * receiver leaves).\n   *\n   * If you expect a decent amount of iOS safari traffic, you should include `h264ConstrainedHighProfile` in your\n   * preferences as well. It will be forwarded as High profile to receivers that negotiated High but not Constrained\n   * High\n   */\n  static h264HighProfile(): VideoCodecCapability {\n    return new VideoCodecCapability('H264', {\n      clockRate: 90000,\n      mimeType: 'video/H264',\n      sdpFmtpLine: 'level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=64001f',\n    });\n  }\n\n  /**\n   * Returns the configuration of H.264 Constrained High Profile supported by the SDK\n   *\n   * This is currently only used on Safari. The same notes on H.264 High Profile apply to this\n   * codec.\n   */\n  static h264ConstrainedHighProfile(): VideoCodecCapability {\n    return new VideoCodecCapability('H264', {\n      clockRate: 90000,\n      mimeType: 'video/H264',\n      sdpFmtpLine: 'level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=640c1f',\n    });\n  }\n\n  /**\n   * Returns the configuration of H.264 recommended by the SDK for maximum compatability.\n   */\n  static h264(): VideoCodecCapability {\n    return VideoCodecCapability.h264ConstrainedBaselineProfile();\n  }\n\n  /**\n   * Returns the configuration of VP9 profile 0 supported by the SDK.\n   * Profile 0 is for use with 8-bit source content.\n   */\n  static vp9Profile0(): VideoCodecCapability {\n    return new VideoCodecCapability('VP9', {\n      clockRate: 90000,\n      mimeType: 'video/VP9',\n      sdpFmtpLine: 'profile-id=0',\n    });\n  }\n\n  /**\n   * Returns the configuration of AV1 recommended by the SDK\n   */\n  static vp9(): VideoCodecCapability {\n    return VideoCodecCapability.vp9Profile0();\n  }\n\n  /**\n   * Returns the configuration of AV1 main profile used by the SDK\n   */\n  static av1Main(): VideoCodecCapability {\n    return new VideoCodecCapability('AV1', {\n      clockRate: 90000,\n      mimeType: 'video/AV1',\n    });\n  }\n\n  /**\n   * Returns the configuration of AV1 recommended by the SDK\n   */\n  static av1(): VideoCodecCapability {\n    return VideoCodecCapability.av1Main();\n  }\n\n  /**\n   * Returns the configuration of codec corresponding to the signaled capability\n   */\n  static fromSignaled(capability: SdkVideoCodecCapability): VideoCodecCapability | undefined {\n    switch (capability) {\n      case SdkVideoCodecCapability.VP8:\n        return VideoCodecCapability.vp8();\n      case SdkVideoCodecCapability.H264_BASELINE_PROFILE:\n        return VideoCodecCapability.h264BaselineProfile();\n      case SdkVideoCodecCapability.H264_CONSTRAINED_BASELINE_PROFILE:\n        return VideoCodecCapability.h264ConstrainedBaselineProfile();\n      case SdkVideoCodecCapability.H264_MAIN_PROFILE:\n        return VideoCodecCapability.h264MainProfile();\n      case SdkVideoCodecCapability.H264_HIGH_PROFILE:\n        return VideoCodecCapability.h264HighProfile();\n      case SdkVideoCodecCapability.H264_CONSTRAINED_HIGH_PROFILE:\n        return VideoCodecCapability.h264ConstrainedHighProfile();\n      case SdkVideoCodecCapability.VP9_PROFILE_0:\n        return VideoCodecCapability.vp9Profile0();\n      case SdkVideoCodecCapability.AV1_MAIN_PROFILE:\n        return VideoCodecCapability.av1Main();\n      default:\n        return undefined;\n    }\n  }\n}\n"]}