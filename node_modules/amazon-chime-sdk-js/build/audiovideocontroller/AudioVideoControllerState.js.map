{"version":3,"file":"AudioVideoControllerState.js","sourceRoot":"","sources":["../../src/audiovideocontroller/AudioVideoControllerState.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AudioMixController from '../audiomixcontroller/AudioMixController';\nimport AudioProfile from '../audioprofile/AudioProfile';\nimport AudioVideoController from '../audiovideocontroller/AudioVideoController';\nimport ExtendedBrowserBehavior from '../browserbehavior/ExtendedBrowserBehavior';\nimport ConnectionMonitor from '../connectionmonitor/ConnectionMonitor';\nimport EventController from '../eventcontroller/EventController';\nimport Logger from '../logger/Logger';\nimport MediaStreamBroker from '../mediastreambroker/MediaStreamBroker';\nimport MeetingSessionConfiguration from '../meetingsession/MeetingSessionConfiguration';\nimport MeetingSessionTURNCredentials from '../meetingsession/MeetingSessionTURNCredentials';\nimport MeetingSessionVideoAvailability from '../meetingsession/MeetingSessionVideoAvailability';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport ReconnectController from '../reconnectcontroller/ReconnectController';\nimport RemovableObserver from '../removableobserver/RemovableObserver';\nimport SDP from '../sdp/SDP';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport SignalingClient from '../signalingclient/SignalingClient';\nimport SignalingClientVideoSubscriptionConfiguration from '../signalingclient/SignalingClientVideoSubscriptionConfiguration';\nimport { SdkIndexFrame, SdkStreamServiceType } from '../signalingprotocol/SignalingProtocol.js';\nimport StatsCollector from '../statscollector/StatsCollector';\nimport TransceiverController from '../transceivercontroller/TransceiverController';\nimport VideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/VideoCaptureAndEncodeParameter';\nimport VideoDownlinkBandwidthPolicy from '../videodownlinkbandwidthpolicy/VideoDownlinkBandwidthPolicy';\nimport VideoStreamIdSet from '../videostreamidset/VideoStreamIdSet';\nimport VideoStreamIndex from '../videostreamindex/VideoStreamIndex';\nimport VideoTileController from '../videotilecontroller/VideoTileController';\nimport VideoUplinkBandwidthPolicy from '../videouplinkbandwidthpolicy/VideoUplinkBandwidthPolicy';\nimport VolumeIndicatorAdapter from '../volumeindicatoradapter/VolumeIndicatorAdapter';\n\nexport const DEFAULT_VIDEO_SUBSCRIPTION_LIMIT = 25;\n\n/**\n * [[AudioVideoControllerState]] includes the compute resources shared by [[DefaultAudioVideoController]] and any running [[Task]].\n *\n * **Note**: Any additions to this class need to consider whether they need to be reset in `resetConnectionSpecificState`, `CleanStoppedSessionTask`, or\n * `CleanRestartedSessionTask`, e.g. if it is relies on backend state and will go stale across reconnections.  Failing\n * to reset state may lead to unexpected behavior.\n */\nexport default class AudioVideoControllerState {\n  logger: Logger | null = null;\n\n  browserBehavior: ExtendedBrowserBehavior | null = null;\n\n  meetingSessionConfiguration: MeetingSessionConfiguration | null = null;\n\n  signalingClient: SignalingClient | null = null;\n\n  peer: RTCPeerConnection | null = null;\n\n  previousSdpOffer: SDP | null = null;\n\n  sdpOfferInit: RTCSessionDescriptionInit | null = null;\n\n  audioVideoController: AudioVideoController | null = null;\n\n  realtimeController: RealtimeController | null = null;\n\n  videoTileController: VideoTileController | null = null;\n\n  mediaStreamBroker: MediaStreamBroker | null = null;\n\n  activeAudioInput: MediaStream | undefined = undefined;\n\n  activeVideoInput: MediaStream | undefined = undefined;\n\n  audioMixController: AudioMixController | null = null;\n\n  transceiverController: TransceiverController | null = null;\n\n  indexFrame: SdkIndexFrame | null = null;\n\n  iceCandidates: RTCIceCandidate[] = [];\n\n  iceCandidateHandler: ((event: RTCPeerConnectionIceEvent) => void) | null = null;\n\n  iceGatheringStateEventHandler: (() => void) | null = null;\n\n  sdpAnswer: string | null = null;\n\n  turnCredentials: MeetingSessionTURNCredentials | null = null;\n\n  reconnectController: ReconnectController | null = null;\n\n  removableObservers: RemovableObserver[] = [];\n\n  audioProfile: AudioProfile | null = null;\n\n  videoStreamIndex: VideoStreamIndex | null = null;\n\n  videoDownlinkBandwidthPolicy: VideoDownlinkBandwidthPolicy | null = null;\n\n  videoUplinkBandwidthPolicy: VideoUplinkBandwidthPolicy | null = null;\n\n  lastKnownVideoAvailability: MeetingSessionVideoAvailability | null = null;\n\n  videoCaptureAndEncodeParameter: VideoCaptureAndEncodeParameter | null = null;\n\n  // An unordered list of IDs provided by the downlink policy that\n  // we will eventually subscribe to.\n  videosToReceive: VideoStreamIdSet | null = null;\n\n  // The last processed set of IDs provided by the policy, so that we can\n  // compare what changes were additions, stream switches, or removals.\n  lastVideosToReceive: VideoStreamIdSet | null = null;\n\n  // An ordered list corresponding to `videosToReceive` where the order\n  // itself correspond to transceivers; 0 in this list corresponds to an inactive tranceiver.\n  videoSubscriptions: number[] | null = null;\n\n  // The last calculated list of subscription configuration used to send a remote video\n  // update (i.e. not necessarily related to what is in subscribe). This is used to make the remote\n  // video update a differential message (i.e. only sending changes)\n  //\n  // This is stored as a map keyed by group ID for convenience\n  lastVideoSubscriptionConfiguration: Map<\n    number,\n    SignalingClientVideoSubscriptionConfiguration\n  > = new Map();\n\n  // The video subscription limit is set by the backend and is subject to change in future.\n  // This value is set in the `JoinAndReceiveIndexTask` when we process the `SdkJoinAckFrame`\n  // and is used in the `ReceiveVideoStreamIndexTask` to limit the total number of streams\n  // that we include in the `videosToReceive`.\n  videoSubscriptionLimit: number = DEFAULT_VIDEO_SUBSCRIPTION_LIMIT;\n\n  // The previous SDP answer will be used as a dictionary to seed the compression library\n  // during decompressing the compressed SDP answer.\n  previousSdpAnswerAsString: string = '';\n\n  // This flag indicates if the backend supports compression for the client.\n  serverSupportsCompression: boolean = false;\n\n  // Values set by `setVideoCodecSendPreferences`.\n  videoSendCodecPreferences: VideoCodecCapability[] = [];\n\n  // Calculated as the highest priority available codec set in the (possibly munged) SDP answer\n  // that is provide to the peer connection, which will be what is sent.\n  currentVideoSendCodec: VideoCodecCapability | undefined = undefined;\n\n  // Intersection of `videoSendCodecPreferences` and the supported receive codecs of\n  // all the other clients in the meeting.\n  meetingSupportedVideoSendCodecPreferences: VideoCodecCapability[] | undefined = undefined;\n\n  // Calculated as the list of available codec set in the (possibly munged) SDP answer\n  // that is provided to the peer connection, which will be ordered by priority.\n  prioritizedSendVideoCodecCapabilities: VideoCodecCapability[] = [];\n\n  // Video codecs that we have detected encoding issues with that we will\n  // avoid using even if they are provided in `videoSendCodecPreferences`\n  degradedVideoSendCodecs: VideoCodecCapability[] = [];\n\n  videosPaused: VideoStreamIdSet | null = null;\n\n  videoDuplexMode: SdkStreamServiceType | null = null;\n\n  volumeIndicatorAdapter: VolumeIndicatorAdapter | null = null;\n\n  statsCollector: StatsCollector | null = null;\n\n  connectionMonitor: ConnectionMonitor | null = null;\n\n  // This state is deprecated and unused.\n  videoInputAttachedTimestampMs: number = 0;\n\n  // This state is deprecated and unused.\n  audioDeviceInformation: { [id: string]: string } = {};\n\n  // This state is deprecated and unused.\n  videoDeviceInformation: { [id: string]: string } = {};\n\n  enableSimulcast: boolean = false;\n\n  // If set to true, the client will actively try to use Scalable Video Coding (SVC) features\n  // if possible. The availability of these features depends dynamically on the video codec used;\n  // static browser availability and any competing features (e.g. simulcast) should\n  // have already been checked before this is set to true.\n  enableSVC: boolean = false;\n\n  eventController: EventController | null = null;\n\n  signalingOpenDurationMs: number | null = null;\n\n  iceGatheringDurationMs: number | null = null;\n\n  startAudioVideoTimestamp: number | null = null;\n\n  attendeePresenceDurationMs: number | null = null;\n\n  meetingStartDurationMs: number | null = null;\n\n  poorConnectionCount: number = 0;\n\n  maxVideoTileCount: number = 0;\n\n  startTimeMs: number | null = null;\n\n  /*\n   * Reset state corresponding to state that is dependent on a individual connection\n   * and may not be valid for others, e.g. on a reconnection.\n   */\n  resetConnectionSpecificState(): void {\n    // For auditing reasons, we will comment on the state that we do not touch here. Note that `DefaultAudioVideoController.actionConnect`\n    // also resets certain state, some to cached members:\n    // Reset to empty/null/new state: `browserBehavior`, `transceiverController`, `volumeIndicatorAdapter`, `enableSimulcast`\n    //                                `signalingOpenDurationMs`, `iceGatheringDurationMs`, `startAudioVideoTimestamp`, `attendeePresenceDurationMs`\n    //                                `meetingStartDurationMs`, `startTimeMs`, `lastKnownVideoAvailability`, `videoCaptureAndEncodeParameter`, `videosToReceive`\n    //                                `videosPaused`, `videoStreamIndex`, `statsCollector`, `connectionMonitor`\n    // Reset to existing/cached values: `logger`, `meetingSessionConfiguration`, `realtimeController`, `mediaStreamBroker`,\n    //                                  `audioMixController`, `reconnectController, `audioProfile`, `eventController`\n\n    // `signalingClient` can be reused from a failed/disconnected state.\n\n    if (this.peer) {\n      this.peer.close();\n    }\n    this.peer = null;\n    this.previousSdpOffer = null;\n    this.sdpOfferInit = null;\n\n    // `audioVideoController` members should either be reusable, or moved to `AudioVideoControllerState` and\n    // cleaned up here.\n\n    // We don't want to mutate `videoTileController` as most video tiles will still be there on reconnect. We can remove tiles on the\n    // first index we receive if they no longer exist\n\n    // `mediaStreamBroker`, `activeAudioInput`, and `activeVideoInput` are cleaned up seperately in `DefaultAudioVideoController.cleanUpMediaStreamsAfterStop`\n    // but only on `stop` or non-reconnectable failures. They are also set to cached `DefaultAudioVideoController` members on restart.\n\n    if (this.transceiverController !== undefined) {\n      this.transceiverController.reset();\n    }\n    this.indexFrame = null;\n    this.iceCandidates = [];\n    this.iceCandidateHandler = null;\n    this.sdpAnswer = null;\n    this.turnCredentials = null;\n\n    this.videoDownlinkBandwidthPolicy.reset();\n    if (this.videoUplinkBandwidthPolicy.reset) {\n      this.videoUplinkBandwidthPolicy.reset();\n    }\n\n    this.lastVideosToReceive = null;\n    this.lastVideoSubscriptionConfiguration = new Map();\n    this.videoSubscriptions = null;\n    this.videoSubscriptionLimit = DEFAULT_VIDEO_SUBSCRIPTION_LIMIT;\n    this.previousSdpAnswerAsString = '';\n    this.serverSupportsCompression = false;\n\n    // `videoSendCodecPreferences` is set by builder and needs to stay consistent.\n\n    this.currentVideoSendCodec = undefined;\n    this.meetingSupportedVideoSendCodecPreferences = undefined;\n    this.videoDuplexMode = null;\n\n    // `poorConnectionCount`and `maxVideoTileCount` is intentionally not set to 0 across reconnections.\n  }\n}\n"]}