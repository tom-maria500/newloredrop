{"version":3,"file":"DefaultAudioVideoController.js","sourceRoot":"","sources":["../../src/audiovideocontroller/DefaultAudioVideoController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { MeetingSessionCredentials, ReceiveRemoteVideoPauseResumeTask } from '..';\nimport ActiveSpeakerDetector from '../activespeakerdetector/ActiveSpeakerDetector';\nimport DefaultActiveSpeakerDetector from '../activespeakerdetector/DefaultActiveSpeakerDetector';\nimport AudioMixController from '../audiomixcontroller/AudioMixController';\nimport DefaultAudioMixController from '../audiomixcontroller/DefaultAudioMixController';\nimport AudioProfile from '../audioprofile/AudioProfile';\nimport AudioVideoController from '../audiovideocontroller/AudioVideoController';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\nimport ConnectionHealthData from '../connectionhealthpolicy/ConnectionHealthData';\nimport SignalingAndMetricsConnectionMonitor from '../connectionmonitor/SignalingAndMetricsConnectionMonitor';\nimport Destroyable from '../destroyable/Destroyable';\nimport VideoQualitySettings from '../devicecontroller/VideoQualitySettings';\nimport AudioVideoEventAttributes from '../eventcontroller/AudioVideoEventAttributes';\nimport EventController from '../eventcontroller/EventController';\nimport Logger from '../logger/Logger';\nimport MediaStreamBroker from '../mediastreambroker/MediaStreamBroker';\nimport MediaStreamBrokerObserver from '../mediastreambrokerobserver/MediaStreamBrokerObserver';\nimport MeetingSessionConfiguration from '../meetingsession/MeetingSessionConfiguration';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport MeetingSessionStatusCode from '../meetingsession/MeetingSessionStatusCode';\nimport MeetingSessionVideoAvailability from '../meetingsession/MeetingSessionVideoAvailability';\nimport DefaultModality from '../modality/DefaultModality';\nimport DefaultPingPong from '../pingpong/DefaultPingPong';\nimport DefaultRealtimeController from '../realtimecontroller/DefaultRealtimeController';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport ReconnectController from '../reconnectcontroller/ReconnectController';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport VideoCodecCapability from '../sdp/VideoCodecCapability';\nimport DefaultSessionStateController from '../sessionstatecontroller/DefaultSessionStateController';\nimport SessionStateController from '../sessionstatecontroller/SessionStateController';\nimport SessionStateControllerAction from '../sessionstatecontroller/SessionStateControllerAction';\nimport SessionStateControllerState from '../sessionstatecontroller/SessionStateControllerState';\nimport SessionStateControllerTransitionResult from '../sessionstatecontroller/SessionStateControllerTransitionResult';\nimport DefaultSignalingClient from '../signalingclient/DefaultSignalingClient';\nimport ServerSideNetworkAdaption, {\n  serverSideNetworkAdaptionIsNoneOrDefault,\n} from '../signalingclient/ServerSideNetworkAdaption';\nimport SignalingClientEvent from '../signalingclient/SignalingClientEvent';\nimport SignalingClientEventType from '../signalingclient/SignalingClientEventType';\nimport SignalingClientVideoSubscriptionConfiguration from '../signalingclient/SignalingClientVideoSubscriptionConfiguration';\nimport SignalingClientObserver from '../signalingclientobserver/SignalingClientObserver';\nimport { SdkStreamServiceType } from '../signalingprotocol/SignalingProtocol.js';\nimport SimulcastLayers from '../simulcastlayers/SimulcastLayers';\nimport StatsCollector from '../statscollector/StatsCollector';\nimport AttachMediaInputTask from '../task/AttachMediaInputTask';\nimport CleanRestartedSessionTask from '../task/CleanRestartedSessionTask';\nimport CleanStoppedSessionTask from '../task/CleanStoppedSessionTask';\nimport CreatePeerConnectionTask from '../task/CreatePeerConnectionTask';\nimport CreateSDPTask from '../task/CreateSDPTask';\nimport FinishGatheringICECandidatesTask from '../task/FinishGatheringICECandidatesTask';\nimport JoinAndReceiveIndexTask from '../task/JoinAndReceiveIndexTask';\nimport LeaveAndReceiveLeaveAckTask from '../task/LeaveAndReceiveLeaveAckTask';\nimport ListenForVolumeIndicatorsTask from '../task/ListenForVolumeIndicatorsTask';\nimport MonitorTask from '../task/MonitorTask';\nimport OpenSignalingConnectionTask from '../task/OpenSignalingConnectionTask';\nimport ParallelGroupTask from '../task/ParallelGroupTask';\nimport PromoteToPrimaryMeetingTask from '../task/PromoteToPrimaryMeetingTask';\nimport ReceiveAudioInputTask from '../task/ReceiveAudioInputTask';\nimport ReceiveRemoteVideoPauseResume from '../task/ReceiveRemoteVideoPauseResumeTask';\nimport ReceiveVideoInputTask from '../task/ReceiveVideoInputTask';\nimport ReceiveVideoStreamIndexTask from '../task/ReceiveVideoStreamIndexTask';\nimport SendAndReceiveDataMessagesTask from '../task/SendAndReceiveDataMessagesTask';\nimport SerialGroupTask from '../task/SerialGroupTask';\nimport SetLocalDescriptionTask from '../task/SetLocalDescriptionTask';\nimport SetRemoteDescriptionTask from '../task/SetRemoteDescriptionTask';\nimport SubscribeAndReceiveSubscribeAckTask from '../task/SubscribeAndReceiveSubscribeAckTask';\nimport Task from '../task/Task';\nimport TimeoutTask from '../task/TimeoutTask';\nimport WaitForAttendeePresenceTask from '../task/WaitForAttendeePresenceTask';\nimport DefaultTransceiverController from '../transceivercontroller/DefaultTransceiverController';\nimport SimulcastContentShareTransceiverController from '../transceivercontroller/SimulcastContentShareTransceiverController';\nimport SimulcastTransceiverController from '../transceivercontroller/SimulcastTransceiverController';\nimport VideoOnlyTransceiverController from '../transceivercontroller/VideoOnlyTransceiverController';\nimport { Maybe } from '../utils/Types';\nimport DefaultVideoCaptureAndEncodeParameter from '../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter';\nimport AllHighestVideoBandwidthPolicy from '../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy';\nimport VideoAdaptiveProbePolicy from '../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy';\nimport { convertVideoPreferencesToSignalingClientVideoSubscriptionConfiguration } from '../videodownlinkbandwidthpolicy/VideoPreferences';\nimport VideoSource from '../videosource/VideoSource';\nimport DefaultVideoStreamIdSet from '../videostreamidset/DefaultVideoStreamIdSet';\nimport DefaultVideoStreamIndex from '../videostreamindex/DefaultVideoStreamIndex';\nimport SimulcastVideoStreamIndex from '../videostreamindex/SimulcastVideoStreamIndex';\nimport DefaultVideoTileController from '../videotilecontroller/DefaultVideoTileController';\nimport VideoTileController from '../videotilecontroller/VideoTileController';\nimport DefaultVideoTileFactory from '../videotilefactory/DefaultVideoTileFactory';\nimport DefaultSimulcastUplinkPolicy from '../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy';\nimport NScaleVideoUplinkBandwidthPolicy from '../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy';\nimport SimulcastUplinkObserver from '../videouplinkbandwidthpolicy/SimulcastUplinkObserver';\nimport SimulcastUplinkPolicy from '../videouplinkbandwidthpolicy/SimulcastUplinkPolicy';\nimport DefaultVolumeIndicatorAdapter from '../volumeindicatoradapter/DefaultVolumeIndicatorAdapter';\nimport WebSocketAdapter from '../websocketadapter/WebSocketAdapter';\nimport AudioVideoControllerState from './AudioVideoControllerState';\n\nexport default class DefaultAudioVideoController\n  implements AudioVideoController, SimulcastUplinkObserver, MediaStreamBrokerObserver, Destroyable {\n  private _logger: Logger;\n  private _configuration: MeetingSessionConfiguration;\n  private _webSocketAdapter: WebSocketAdapter;\n  private _realtimeController: RealtimeController;\n  private _activeSpeakerDetector: ActiveSpeakerDetector;\n  private _videoTileController: VideoTileController;\n  private _mediaStreamBroker: MediaStreamBroker;\n  private _reconnectController: ReconnectController;\n  private _audioMixController: DefaultAudioMixController;\n  private _eventController: EventController;\n  private _audioProfile: AudioProfile = new AudioProfile();\n\n  private connectionHealthData = new ConnectionHealthData();\n  private observerQueue: Set<AudioVideoObserver> = new Set<AudioVideoObserver>();\n  private meetingSessionContext = new AudioVideoControllerState();\n  private sessionStateController: SessionStateController;\n\n  private static MIN_VOLUME_DECIBELS = -42;\n  private static MAX_VOLUME_DECIBELS = -14;\n  private static PING_PONG_INTERVAL_MS = 10000;\n\n  private enableSimulcast: boolean = false;\n  private enableSVC: boolean = false;\n  private useUpdateTransceiverControllerForUplink: boolean = false;\n  private totalRetryCount = 0;\n  private startAudioVideoTimestamp: number = 0;\n  private signalingTask: Task;\n  private preStartObserver: SignalingClientObserver | undefined;\n  private mayNeedRenegotiationForSimulcastLayerChange: boolean = false;\n  private maxUplinkBandwidthKbps: number;\n  private videoSendCodecPreferences: VideoCodecCapability[];\n  // Stored solely to trigger demotion callback on disconnection (expected behavior).\n  //\n  // We otherwise intentionally do not use this for any other behavior to avoid the complexity\n  // of the added state.\n  private promotedToPrimaryMeeting: boolean = false;\n  private hasGetRTCPeerConnectionStatsDeprecationMessageBeenSent: boolean = false;\n\n  // `connectWithPromises`, and `actionUpdateWithRenegotiation` all\n  // contains a significant portion of asynchronous tasks, so we need to explicitly defer\n  // any task operation which may be performed on the event queue that may modify\n  // mutable state in `MeetingSessionContext`, as this mutable state needs to be consistent over the course of the update.\n  //\n  // Currently this includes\n  // * `ReceiveVideoStreamIndexTask` which updates `videosToReceive` and `videoCaptureAndEncodeParameter`\n  // * `MonitorTask` which updates `videosToReceive`\n  private receiveIndexTask: ReceiveVideoStreamIndexTask | undefined = undefined;\n  private monitorTask: MonitorTask | undefined = undefined;\n  private receiveRemotePauseResumeTask: ReceiveRemoteVideoPauseResumeTask | undefined = undefined;\n\n  destroyed = false;\n\n  constructor(\n    configuration: MeetingSessionConfiguration,\n    logger: Logger,\n    webSocketAdapter: WebSocketAdapter,\n    mediaStreamBroker: MediaStreamBroker,\n    reconnectController: ReconnectController,\n    eventController?: EventController\n  ) {\n    this._logger = logger;\n    this.sessionStateController = new DefaultSessionStateController(this._logger);\n    this._configuration = configuration;\n\n    this._webSocketAdapter = webSocketAdapter;\n    this._realtimeController = new DefaultRealtimeController(mediaStreamBroker);\n    this._realtimeController.realtimeSetLocalAttendeeId(\n      configuration.credentials.attendeeId,\n      configuration.credentials.externalUserId\n    );\n\n    this._mediaStreamBroker = mediaStreamBroker;\n    this._reconnectController = reconnectController;\n    this._videoTileController = new DefaultVideoTileController(\n      new DefaultVideoTileFactory(),\n      this,\n      this._logger\n    );\n    this._audioMixController = new DefaultAudioMixController(this._logger);\n    this._mediaStreamBroker.addMediaStreamBrokerObserver(this._audioMixController);\n    this.meetingSessionContext.logger = this._logger;\n    this._eventController = eventController;\n  }\n\n  async destroy(): Promise<void> {\n    this.observerQueue.clear();\n    this._mediaStreamBroker.removeMediaStreamBrokerObserver(this._audioMixController);\n    this.destroyed = true;\n  }\n\n  get configuration(): MeetingSessionConfiguration {\n    return this._configuration;\n  }\n\n  get realtimeController(): RealtimeController {\n    return this._realtimeController;\n  }\n\n  get activeSpeakerDetector(): ActiveSpeakerDetector {\n    // Lazy init.\n    if (!this._activeSpeakerDetector) {\n      this._activeSpeakerDetector = new DefaultActiveSpeakerDetector(\n        this._realtimeController,\n        this._configuration.credentials.attendeeId,\n        this.handleHasBandwidthPriority.bind(this)\n      );\n    }\n    return this._activeSpeakerDetector;\n  }\n\n  get videoTileController(): VideoTileController {\n    return this._videoTileController;\n  }\n\n  get audioMixController(): AudioMixController {\n    return this._audioMixController;\n  }\n\n  get logger(): Logger {\n    return this._logger;\n  }\n\n  get rtcPeerConnection(): RTCPeerConnection | null {\n    return (this.meetingSessionContext && this.meetingSessionContext.peer) || null;\n  }\n\n  get mediaStreamBroker(): MediaStreamBroker {\n    return this._mediaStreamBroker;\n  }\n\n  get eventController(): EventController | undefined {\n    return this._eventController;\n  }\n\n  /**\n   * This API will be deprecated in favor of `ClientMetricReport.getRTCStatsReport()`.\n   *\n   * It makes an additional call to the `getStats` API and therefore may cause slight performance degradation.\n   *\n   * Please subscribe to `metricsDidReceive(clientMetricReport: ClientMetricReport)` callback,\n   * and get the raw `RTCStatsReport` via `clientMetricReport.getRTCStatsReport()`.\n   */\n  getRTCPeerConnectionStats(selector?: MediaStreamTrack): Promise<RTCStatsReport> {\n    /* istanbul ignore else */\n    if (!this.hasGetRTCPeerConnectionStatsDeprecationMessageBeenSent) {\n      this.logger.warn(\n        'The `getRTCPeerConnectionStats()` is on its way to be deprecated. It makes an additional call to the `getStats` API and therefore may cause slight performance degradation. Please use the new API `clientMetricReport.getRTCStatsReport()` returned by `metricsDidReceive(clientMetricReport)` callback instead.'\n      );\n      this.hasGetRTCPeerConnectionStatsDeprecationMessageBeenSent = true;\n    }\n\n    if (!this.rtcPeerConnection) {\n      return null;\n    }\n    return this.rtcPeerConnection.getStats(selector);\n  }\n\n  setAudioProfile(audioProfile: AudioProfile): void {\n    this._audioProfile = audioProfile;\n  }\n\n  addObserver(observer: AudioVideoObserver): void {\n    this.logger.info('adding meeting observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer: AudioVideoObserver): void {\n    this.logger.info('removing meeting observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc: (observer: AudioVideoObserver) => void): void {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  private initSignalingClient(): void {\n    this.connectionHealthData.reset();\n    if (this.meetingSessionContext.signalingClient) {\n      return;\n    }\n\n    this.meetingSessionContext = new AudioVideoControllerState();\n    this.meetingSessionContext.logger = this.logger;\n    this.meetingSessionContext.eventController = this.eventController;\n    this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior();\n    this.meetingSessionContext.videoSendCodecPreferences = this.videoSendCodecPreferences;\n    this.meetingSessionContext.audioProfile = this._audioProfile;\n\n    this.meetingSessionContext.meetingSessionConfiguration = this.configuration;\n    this.meetingSessionContext.signalingClient = new DefaultSignalingClient(\n      this._webSocketAdapter,\n      this.logger\n    );\n  }\n\n  private uninstallPreStartObserver(): void {\n    this.meetingSessionContext.signalingClient.removeObserver(this.preStartObserver);\n    this.preStartObserver = undefined;\n  }\n\n  private prestart(): Promise<void> {\n    this.logger.info('Pre-connecting signaling connection.');\n    return this.createOrReuseSignalingTask()\n      .run()\n      .then(() => {\n        const handleClosed = async (): Promise<void> => {\n          this.logger.info('Early connection closed; discarding signaling task.');\n          this.signalingTask = undefined;\n          this.uninstallPreStartObserver();\n        };\n\n        this.preStartObserver = {\n          handleSignalingClientEvent(event: SignalingClientEvent): void {\n            if (event.type === SignalingClientEventType.WebSocketClosed) {\n              handleClosed();\n            }\n          },\n        };\n\n        this.meetingSessionContext.signalingClient.registerObserver(this.preStartObserver);\n      })\n      .catch(e => {\n        this.logger.error(`Signaling task pre-start failed: ${e}`);\n\n        // Clean up just in case a subsequent attempt will succeed.\n        this.signalingTask = undefined;\n      });\n  }\n\n  start(options?: { signalingOnly?: boolean }): void {\n    this.startReturningPromise(options)\n      .then(() => {\n        this.logger.info('start completed');\n      })\n      // Just-in-case error handling.\n      .catch(\n        /* istanbul ignore next */\n        e => {\n          this.logger.error(`start failed: ${e}`);\n        }\n      );\n  }\n\n  // This is public (albeit marked internal) for tests only.\n  /* @internal */\n  startReturningPromise(options?: { signalingOnly?: boolean }): Promise<void> {\n    if (options?.signalingOnly === true) {\n      return this.prestart();\n    }\n\n    // For side-effects: lazy getter.\n    this.activeSpeakerDetector;\n\n    return new Promise((resolve, reject) => {\n      this.sessionStateController.perform(SessionStateControllerAction.Connect, () => {\n        this.actionConnect(false).then(resolve).catch(reject);\n      });\n    });\n  }\n\n  // @ts-ignore\n  private connectWithPromises(needsToWaitForAttendeePresence: boolean): Task {\n    const context = this.meetingSessionContext;\n\n    // Syntactic sugar.\n    const timeout = (timeoutMs: number, task: Task): TimeoutTask => {\n      return new TimeoutTask(this.logger, task, timeoutMs);\n    };\n\n    // First layer.\n    this.monitorTask = new MonitorTask(\n      context,\n      this.configuration.connectionHealthPolicyConfiguration,\n      this.connectionHealthData\n    );\n    const monitor = this.monitorTask.once();\n\n    // Second layer.\n    const receiveAudioInput = new ReceiveAudioInputTask(context).once();\n    this.receiveIndexTask = new ReceiveVideoStreamIndexTask(context);\n    // See declaration (unpaused in actionFinishConnecting)\n    this.monitorTask.pauseResubscribeCheck();\n    this.receiveIndexTask.pauseIngestion();\n    const signaling = new SerialGroupTask(this.logger, 'Signaling', [\n      // If pre-connecting, this will be an existing task that has already been run.\n      this.createOrReuseSignalingTask(),\n      new ListenForVolumeIndicatorsTask(context),\n      new SendAndReceiveDataMessagesTask(context),\n      new JoinAndReceiveIndexTask(context),\n      this.receiveIndexTask,\n    ]).once();\n\n    // Third layer.\n    const createPeerConnection = new CreatePeerConnectionTask(context).once(signaling);\n    const attachMediaInput = new AttachMediaInputTask(context).once(\n      createPeerConnection,\n      receiveAudioInput\n    );\n\n    // Mostly serial section -- kept as promises to allow for finer-grained breakdown.\n    const createSDP = new CreateSDPTask(context).once(attachMediaInput);\n    const setLocalDescription = new SetLocalDescriptionTask(context).once(createSDP);\n    const ice = new FinishGatheringICECandidatesTask(context).once(setLocalDescription);\n    const subscribeAck = new SubscribeAndReceiveSubscribeAckTask(context).once(ice);\n\n    this.receiveRemotePauseResumeTask = new ReceiveRemoteVideoPauseResume(context);\n    this.receiveRemotePauseResumeTask.once(subscribeAck);\n\n    // The ending is a delicate time: we need the connection as a whole to have a timeout,\n    // and for the attendee presence timer to not start ticking until after the subscribe/ack.\n    return new SerialGroupTask(this.logger, this.wrapTaskName('AudioVideoStart'), [\n      monitor,\n      timeout(\n        this.configuration.connectionTimeoutMs,\n        new SerialGroupTask(this.logger, 'Peer', [\n          // The order of these two matters. If canceled, the first one that's still running\n          // will contribute any special rejection, and we don't want that to be \"attendee not found\"!\n          subscribeAck,\n          this.receiveRemotePauseResumeTask,\n          needsToWaitForAttendeePresence\n            ? new TimeoutTask(\n                this.logger,\n                new ParallelGroupTask(this.logger, 'FinalizeConnection', [\n                  new WaitForAttendeePresenceTask(context),\n                  new SetRemoteDescriptionTask(context),\n                ]),\n                this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs\n              )\n            : /* istanbul ignore next */ new SetRemoteDescriptionTask(context),\n        ])\n      ),\n    ]);\n  }\n\n  private async actionConnect(reconnecting: boolean): Promise<void> {\n    this.initSignalingClient();\n\n    // We no longer need to watch for the early connection dropping; we're back where\n    // we otherwise would have been had we not pre-started.\n    this.uninstallPreStartObserver();\n\n    // Note that some of the assignments in this function exist to clean up previous connections.\n    // All future 'clean up' assignments should go in `AudioVideoControllerState.resetConnectionSpecificState`\n    // for consolidation purposes.\n\n    this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;\n    this.meetingSessionContext.realtimeController = this._realtimeController;\n    this.meetingSessionContext.audioMixController = this._audioMixController;\n    this.meetingSessionContext.audioVideoController = this;\n\n    this.enableSimulcast =\n      this.configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers &&\n      new DefaultBrowserBehavior().hasChromiumWebRTC();\n\n    if (this.enableSimulcast && this.configuration.enableSVC) {\n      this.logger.warn(\n        'SVC cannot be enabled at the same time as simulcast. Disabling SVC, using simulcast.'\n      );\n    }\n    this.enableSVC =\n      !this.enableSimulcast &&\n      this.configuration.enableSVC &&\n      new DefaultBrowserBehavior().supportsScalableVideoCoding();\n\n    const useAudioConnection: boolean = !!this.configuration.urls.audioHostURL;\n\n    if (!useAudioConnection) {\n      this.logger.info(`Using video only transceiver controller`);\n      this.meetingSessionContext.transceiverController = new VideoOnlyTransceiverController(\n        this.logger,\n        this.meetingSessionContext.browserBehavior,\n        this.meetingSessionContext\n      );\n    } else if (this.enableSimulcast) {\n      this.logger.info(`Using transceiver controller with simulcast support`);\n      if (\n        new DefaultModality(this.configuration.credentials.attendeeId).hasModality(\n          DefaultModality.MODALITY_CONTENT\n        )\n      ) {\n        this.meetingSessionContext.transceiverController = new SimulcastContentShareTransceiverController(\n          this.logger,\n          this.meetingSessionContext.browserBehavior,\n          this.meetingSessionContext\n        );\n      } else {\n        this.meetingSessionContext.transceiverController = new SimulcastTransceiverController(\n          this.logger,\n          this.meetingSessionContext.browserBehavior,\n          this.meetingSessionContext\n        );\n      }\n    } else {\n      this.logger.info(`Using default transceiver controller`);\n      this.meetingSessionContext.transceiverController = new DefaultTransceiverController(\n        this.logger,\n        this.meetingSessionContext.browserBehavior,\n        this.meetingSessionContext\n      );\n    }\n\n    this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter(\n      this.logger,\n      this._realtimeController,\n      DefaultAudioVideoController.MIN_VOLUME_DECIBELS,\n      DefaultAudioVideoController.MAX_VOLUME_DECIBELS,\n      this.configuration.credentials.attendeeId\n    );\n    this.meetingSessionContext.videoTileController = this._videoTileController;\n    this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;\n    this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;\n    this.meetingSessionContext.enableSimulcast = this.enableSimulcast;\n    this.meetingSessionContext.enableSVC = this.enableSVC;\n\n    if (this.enableSimulcast) {\n      let simulcastPolicy = this.meetingSessionContext\n        .videoUplinkBandwidthPolicy as SimulcastUplinkPolicy;\n      if (!simulcastPolicy) {\n        simulcastPolicy = new DefaultSimulcastUplinkPolicy(\n          this.configuration.credentials.attendeeId,\n          this.meetingSessionContext.logger\n        );\n        this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;\n      }\n\n      simulcastPolicy.addObserver(this);\n\n      if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n        this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy(\n          this.meetingSessionContext.logger\n        );\n      }\n\n      this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex(this.logger);\n    } else {\n      this.meetingSessionContext.enableSimulcast = false;\n      this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex(this.logger);\n\n      if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy(\n          this.configuration.credentials.attendeeId,\n          !this.meetingSessionContext.browserBehavior.disableResolutionScaleDown(),\n          this.meetingSessionContext.logger,\n          this.meetingSessionContext.browserBehavior\n        );\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setSVCEnabled(this.enableSVC);\n      }\n      if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n        this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy(\n          this.configuration.credentials.attendeeId\n        );\n      }\n\n      if (\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setTransceiverController &&\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController\n      ) {\n        this.useUpdateTransceiverControllerForUplink = true;\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setTransceiverController(\n          this.meetingSessionContext.transceiverController\n        );\n      }\n      this.meetingSessionContext.audioProfile = this._audioProfile;\n    }\n\n    if (\n      new DefaultModality(this.configuration.credentials.attendeeId).hasModality(\n        DefaultModality.MODALITY_CONTENT\n      )\n    ) {\n      const enableUhdContent =\n        this.configuration.meetingFeatures.contentMaxResolution ===\n        VideoQualitySettings.VideoResolutionUHD;\n      if (enableUhdContent) {\n        // Increase default bandwidth for content share since this is not yet configuration that can be exposed\n        // without using simulcast\n        this.setVideoMaxBandwidthKbps(2500);\n      }\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setHighResolutionFeatureEnabled(\n        enableUhdContent\n      );\n    } else {\n      const enableFhdVideo =\n        this.configuration.meetingFeatures.videoMaxResolution ===\n        VideoQualitySettings.VideoResolutionFHD;\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setHighResolutionFeatureEnabled(\n        enableFhdVideo\n      );\n    }\n\n    if (this.meetingSessionContext.videoUplinkBandwidthPolicy && this.maxUplinkBandwidthKbps) {\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(\n        this.maxUplinkBandwidthKbps\n      );\n    }\n\n    if (this.meetingSessionContext.videoDownlinkBandwidthPolicy.bindToTileController) {\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy.bindToTileController(\n        this._videoTileController\n      );\n    }\n\n    if (this.meetingSessionContext.videoDownlinkBandwidthPolicy.setWantsResubscribeObserver) {\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy.setWantsResubscribeObserver(() =>\n        this.update({ needsRenegotiation: false })\n      );\n    }\n\n    this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability();\n    this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter(\n      0,\n      0,\n      0,\n      0,\n      false\n    );\n    this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet();\n    this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet();\n    this.meetingSessionContext.statsCollector = new StatsCollector(this, this.logger);\n    this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor(\n      this,\n      this._realtimeController,\n      this.connectionHealthData,\n      new DefaultPingPong(\n        this.meetingSessionContext.signalingClient,\n        DefaultAudioVideoController.PING_PONG_INTERVAL_MS,\n        this.logger\n      ),\n      this.meetingSessionContext.statsCollector\n    );\n    this.meetingSessionContext.reconnectController = this._reconnectController;\n    this.meetingSessionContext.videoDeviceInformation = {};\n\n    if (!reconnecting) {\n      this.totalRetryCount = 0;\n      this._reconnectController.reset();\n      this.startAudioVideoTimestamp = Date.now();\n      this.forEachObserver(observer => {\n        Maybe.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(false));\n      });\n      this.eventController?.publishEvent('meetingStartRequested');\n    }\n\n    this.meetingSessionContext.startAudioVideoTimestamp = this.startAudioVideoTimestamp;\n    if (this._reconnectController.hasStartedConnectionAttempt()) {\n      // This does not reset the reconnect deadline, but declare it's not the first connection.\n      this._reconnectController.startedConnectionAttempt(false);\n    } else {\n      this._reconnectController.startedConnectionAttempt(true);\n    }\n\n    // No attendee presence event will be triggered if there is no audio connection.\n    // Waiting for attendee presence is explicitly executed\n    // if `attendeePresenceTimeoutMs` is configured to larger than 0.\n    const needsToWaitForAttendeePresence =\n      useAudioConnection &&\n      this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0;\n\n    this.logger.info('Needs to wait for attendee presence? ' + needsToWaitForAttendeePresence);\n\n    const connect = this.connectWithPromises(needsToWaitForAttendeePresence);\n\n    // The rest.\n    try {\n      await connect.run();\n\n      this.connectionHealthData.setConnectionStartTime();\n      this._mediaStreamBroker.addMediaStreamBrokerObserver(this);\n      this.sessionStateController.perform(SessionStateControllerAction.FinishConnecting, () => {\n        /* istanbul ignore else */\n        if (this.eventController) {\n          this.meetingSessionContext.meetingStartDurationMs =\n            Date.now() - this.startAudioVideoTimestamp;\n          this.eventController.publishEvent('meetingStartSucceeded', {\n            maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n            poorConnectionCount: this.meetingSessionContext.poorConnectionCount,\n            retryCount: this.totalRetryCount,\n            signalingOpenDurationMs: this.meetingSessionContext.signalingOpenDurationMs,\n            iceGatheringDurationMs: this.meetingSessionContext.iceGatheringDurationMs,\n            meetingStartDurationMs: this.meetingSessionContext.meetingStartDurationMs,\n          });\n        }\n        this.meetingSessionContext.startTimeMs = Date.now();\n        this.actionFinishConnecting();\n      });\n    } catch (error) {\n      this.signalingTask = undefined;\n      const status = new MeetingSessionStatus(\n        this.getMeetingStatusCode(error) || MeetingSessionStatusCode.TaskFailed\n      );\n      this.logger.info(`Start failed: ${status} due to error ${error}.`);\n\n      // I am not able to successfully reach this state in the test suite with mock\n      // websockets -- it always ends up in 'Disconnecting' instead. As such, this\n      // has to be marked for Istanbul.\n      /* istanbul ignore if */\n      if (this.sessionStateController.state() === SessionStateControllerState.NotConnected) {\n        // There's no point trying to 'disconnect', because we're not connected.\n        // The session state controller will bail.\n        this.logger.info('Start failed and not connected. Not cleaning up.');\n        return;\n      }\n\n      this.sessionStateController.perform(SessionStateControllerAction.Fail, async () => {\n        await this.actionDisconnect(status, true, error);\n        if (!this.handleMeetingSessionStatus(status, error)) {\n          this.notifyStop(status, error);\n        }\n      });\n    }\n  }\n\n  private createOrReuseSignalingTask(): Task {\n    if (!this.signalingTask) {\n      this.initSignalingClient();\n      this.signalingTask = new TimeoutTask(\n        this.logger,\n        new OpenSignalingConnectionTask(this.meetingSessionContext),\n        this.configuration.connectionTimeoutMs\n      ).once();\n    }\n\n    return this.signalingTask;\n  }\n\n  private actionFinishConnecting(): void {\n    this.signalingTask = undefined;\n    this.meetingSessionContext.videoDuplexMode = SdkStreamServiceType.RX;\n    if (!this.meetingSessionContext.enableSimulcast) {\n      if (this.useUpdateTransceiverControllerForUplink) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController();\n      } else {\n        this.enforceBandwidthLimitationForSender(\n          this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]\n        );\n      }\n    }\n    this.forEachObserver(observer => {\n      Maybe.of(observer.audioVideoDidStart).map(f => f.bind(observer)());\n    });\n    this._reconnectController.reset();\n\n    // `receiveIndexTask` needs to be resumed first so it can set `remoteStreamDescriptions`\n    this.receiveIndexTask.resumeIngestion();\n    this.monitorTask.resumeResubscribeCheck();\n  }\n\n  /* @internal */\n  stopReturningPromise(): Promise<void> {\n    // In order to avoid breaking backward compatibility, when only the\n    // signaling connection is established we appear to not be connected.\n    // We handle this by simply disconnecting the websocket directly.\n    if (this.sessionStateController.state() === SessionStateControllerState.NotConnected) {\n      // Unfortunately, this does not return a promise.\n      this.meetingSessionContext.signalingClient?.closeConnection();\n      this.cleanUpMediaStreamsAfterStop();\n      return Promise.resolve();\n    }\n\n    /*\n      Stops the current audio video meeting session.\n      The stop method execution is deferred and executed after\n      the current reconnection attempt completes.\n      It disables any further reconnection attempts.\n      Upon completion, AudioVideoObserver's `audioVideoDidStop`\n      callback function is called with `MeetingSessionStatusCode.Left`.\n    */\n    return new Promise((resolve, reject) => {\n      this.sessionStateController.perform(SessionStateControllerAction.Disconnect, () => {\n        this._reconnectController.disableReconnect();\n        this.logger.info('attendee left meeting, session will not be reconnected');\n        this.actionDisconnect(new MeetingSessionStatus(MeetingSessionStatusCode.Left), false, null)\n          .then(resolve)\n          .catch(reject);\n      });\n    });\n  }\n\n  stop(): void {\n    this.stopReturningPromise();\n  }\n\n  private async actionDisconnect(\n    status: MeetingSessionStatus,\n    reconnecting: boolean,\n    error: Error | null\n  ): Promise<void> {\n    try {\n      await new SerialGroupTask(this.logger, this.wrapTaskName('AudioVideoStop'), [\n        new TimeoutTask(\n          this.logger,\n          new LeaveAndReceiveLeaveAckTask(this.meetingSessionContext),\n          this.configuration.connectionTimeoutMs\n        ),\n      ]).run();\n    } catch (stopError) {\n      this.logger.info('fail to stop');\n    }\n\n    try {\n      const subtasks: Task[] = [\n        new TimeoutTask(\n          this.logger,\n          new CleanStoppedSessionTask(this.meetingSessionContext),\n          this.configuration.connectionTimeoutMs\n        ),\n      ];\n      this.cleanUpMediaStreamsAfterStop();\n      await new SerialGroupTask(this.logger, this.wrapTaskName('AudioVideoClean'), subtasks).run();\n    } catch (cleanError) {\n      /* istanbul ignore next */\n      this.logger.info('fail to clean');\n    }\n    this.sessionStateController.perform(SessionStateControllerAction.FinishDisconnecting, () => {\n      if (!reconnecting) {\n        this.notifyStop(status, error);\n      }\n    });\n  }\n\n  update(options: { needsRenegotiation: boolean } = { needsRenegotiation: true }): boolean {\n    let needsRenegotiation = options.needsRenegotiation;\n\n    // Check in case this function has been called before peer connection is set up\n    // since that is necessary to try to update remote videos without the full resubscribe path\n    needsRenegotiation ||= this.meetingSessionContext.peer === undefined;\n    needsRenegotiation ||= !this.updateRemoteVideosFromPolicy();\n    needsRenegotiation ||= !this.updateLocalVideoFromPolicy();\n    // `MeetingSessionContext.lastVideosToReceive` needs to be updated regardless\n    this.meetingSessionContext.lastVideosToReceive = this.meetingSessionContext.videosToReceive;\n    if (!needsRenegotiation) {\n      this.logger.info('Update request does not require resubscribe');\n      // Call `actionFinishUpdating` to apply the new encoding parameters that may have been set in `updateLocalVideoFromPolicy`.\n      this.actionFinishUpdating();\n      return true; // Skip the subscribe!\n    }\n    this.logger.info('Update request requires resubscribe');\n\n    const result = this.sessionStateController.perform(SessionStateControllerAction.Update, () => {\n      this.actionUpdateWithRenegotiation(true);\n    });\n    return (\n      result === SessionStateControllerTransitionResult.Transitioned ||\n      result === SessionStateControllerTransitionResult.DeferredTransition\n    );\n  }\n\n  // Depending on if using server-side bandwidth probing and if using server-side quality adaption,\n  // decide if needs to send necessary updates, and if send through full renegotiaton.\n  // It returns true if downlink policy took care of everything and no renegotiation needed.\n  private updateRemoteVideosFromPolicy(): boolean {\n    if (\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy &&\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy.getVideoPreferences !== undefined &&\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption !==\n        undefined &&\n      !serverSideNetworkAdaptionIsNoneOrDefault(\n        this.meetingSessionContext.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption()\n      )\n    ) {\n      // Send up-to-date video preferences to server. This is fine if it includes remote sources/MIDs we need a full renegotiation for (i.e.\n      // ones that were added or removed). We will re-include these updates in the subscribe.\n      /* istanbul ignore if: Extremely unlikely that `videosToReceive` is null */\n      if (!this.sendRemoteVideoUpdate()) {\n        return false;\n      }\n\n      if (\n        this.meetingSessionContext.videoDownlinkBandwidthPolicy.getServerSideNetworkAdaption() ===\n        ServerSideNetworkAdaption.BandwidthProbingAndRemoteVideoQualityAdaption\n      ) {\n        // If using server side remote video quality adaption (i.e. server is picking the encoding to send), we don't need\n        // to do anything after sending the update, as long as we are not adding or removing streams, in which case\n        // we need to complete a full renegotiation.\n        return this.isNotAddingOrRemovingStreams();\n      }\n    }\n    // If using client-side network adaptation, try skipping renegotitaiton if only simulcast stream swicth.\n    return this.updateRemoteVideosIfNotAddingOrRemovingStreams();\n  }\n\n  // When `ServerSideNetworkAdaption.BandwidthProbingAndRemoteVideoQualityAdaption` has been signalled,\n  // trigger server side video quality adaption logic through `SignalingClient.remoteVideoUpdate` and skip full subscribe.\n  //\n  // This function also tries to use the diff between `this.meetingSessionContext.lastVideosToReceive`\n  // and `this.meetingSessionContext.videosToReceive` to determine if update is only simulcast stream switch,\n  // which is accomplished through `SignalingClient.remoteVideoUpdate` rather than the full subscribe.\n  //\n  // It requires the caller to manage `this.meetingSessionContext.lastVideosToReceive`\n  // and `this.meetingSessionContext.videosToReceive` so that `this.meetingSessionContext.lastVideosToReceive`\n  // contains the stream IDs from either last time a subscribe was set, or last time this function was set.\n  //\n  // It will return true if successful, if false the caller must fall back to a full renegotiation\n  private updateRemoteVideosIfNotAddingOrRemovingStreams(): boolean {\n    const streamChanges = this.detectChangesInVideosToReceive();\n    /* istanbul ignore if: Extremely unlikely that `videosToReceive` is null or missing requisite functions and made it this far */\n    if (streamChanges === undefined) {\n      return false;\n    }\n\n    const added: number[] = streamChanges.added;\n    const simulcastStreamUpdates: Map<number, number> = streamChanges.simulcastStreamUpdates;\n    const removed: number[] = streamChanges.removed;\n\n    const context = this.meetingSessionContext;\n    const updatedVideoSubscriptionConfigurations: SignalingClientVideoSubscriptionConfiguration[] = [];\n    for (const [previousId, currentId] of simulcastStreamUpdates.entries()) {\n      const updatedConfig = new SignalingClientVideoSubscriptionConfiguration();\n      updatedConfig.streamId = currentId;\n      updatedConfig.attendeeId = context.videoStreamIndex.attendeeIdForStreamId(currentId);\n      updatedConfig.mid = context.transceiverController.getMidForStreamId(previousId);\n      if (updatedConfig.mid === undefined) {\n        this.logger.info(\n          `No MID found for stream ID ${previousId}, cannot update stream without renegotiation`\n        );\n        return false;\n      }\n      updatedVideoSubscriptionConfigurations.push(updatedConfig);\n      // We need to override some other components dependent on the subscribe paths for certain functionality\n      context.transceiverController.setStreamIdForMid(updatedConfig.mid, currentId);\n      context.videoStreamIndex.overrideStreamIdMappings(previousId, currentId);\n      if (context.videoTileController.haveVideoTileForAttendeeId(updatedConfig.attendeeId)) {\n        const tile = context.videoTileController.getVideoTileForAttendeeId(\n          updatedConfig.attendeeId\n        );\n        if (!tile.setStreamId) {\n          // Required function\n          return false;\n        }\n        tile.setStreamId(currentId);\n      }\n    }\n    // accomplish simulcast stream switches by sending removeVideoUpdate signaling frame instead of full renegotiation\n    if (updatedVideoSubscriptionConfigurations.length !== 0) {\n      context.signalingClient.remoteVideoUpdate(updatedVideoSubscriptionConfigurations, []);\n    }\n\n    // but cannot skip renegotiation if there are more changes than simulcast stream switch (i.e. add/remove/source switches)\n    if (added.length !== 0 || removed.length !== 0) {\n      return false;\n    }\n    // We use `remoteVideoUpdateSent` to cache the previous index so that we are able to do switches (not add/removes)\n    // for simulcast stream layer changes. See `subscribeFrameSent` for more details.\n    context.videoStreamIndex.remoteVideoUpdateSent();\n    return true;\n  }\n\n  private detectChangesInVideosToReceive():\n    | {\n        added: number[];\n        removed: number[];\n        simulcastStreamUpdates: Map<number, number>;\n      }\n    | undefined {\n    const context = this.meetingSessionContext;\n    /* istanbul ignore next: Extremely unlikely that `videosToReceive` is null */\n    if (context.videosToReceive === null) {\n      return undefined;\n    }\n\n    // Check existence of all required dependencies and requisite functions\n    if (\n      !context.transceiverController ||\n      !context.transceiverController.getMidForStreamId ||\n      !context.transceiverController.setStreamIdForMid ||\n      !context.videosToReceive.forEach ||\n      !context.signalingClient.remoteVideoUpdate ||\n      !context.videoStreamIndex.overrideStreamIdMappings\n    ) {\n      return undefined;\n    }\n\n    let added: number[] = [];\n    const simulcastStreamUpdates: Map<number, number> = new Map();\n    let removed: number[] = [];\n\n    if (context.lastVideosToReceive === null) {\n      added = context.videosToReceive.array();\n    } else {\n      const index = context.videoStreamIndex;\n      context.videosToReceive.forEach((currentId: number) => {\n        if (context.lastVideosToReceive.contain(currentId)) {\n          return;\n        }\n\n        // Check if group ID exists in previous set (i.e. simulcast stream switch)\n        let foundUpdatedPreviousStreamId = false;\n        context.lastVideosToReceive.forEach((previousId: number) => {\n          if (foundUpdatedPreviousStreamId) {\n            return; // Short circuit since we have already found it\n          }\n          if (index.StreamIdsInSameGroup(previousId, currentId)) {\n            simulcastStreamUpdates.set(previousId, currentId);\n            foundUpdatedPreviousStreamId = true;\n          }\n        });\n        if (!foundUpdatedPreviousStreamId) {\n          // Otherwise this must be a new stream\n          added.push(currentId);\n        }\n      });\n      removed = context.lastVideosToReceive.array().filter(idFromPrevious => {\n        const stillReceiving = context.videosToReceive.contain(idFromPrevious);\n        const isUpdated = simulcastStreamUpdates.has(idFromPrevious);\n        return !stillReceiving && !isUpdated;\n      });\n    }\n    this.logger.info(\n      `Request to update remote videos with added: [${added}], updated: [${Array.from(\n        simulcastStreamUpdates.entries()\n      )\n        .map(([key, value]) => `${key}->${value}`)\n        .join(',')}], removed: [${removed}]`\n    );\n\n    return {\n      added,\n      removed,\n      simulcastStreamUpdates,\n    };\n  }\n\n  private isNotAddingOrRemovingStreams(): boolean {\n    const streamChanges = this.detectChangesInVideosToReceive();\n    /* istanbul ignore if: Extremely unlikely that `videosToReceive` is null or missing requisite functions and made it this far */\n    if (streamChanges === undefined) {\n      return false;\n    }\n    const added: number[] = streamChanges.added;\n    const removed: number[] = streamChanges.removed;\n    // but cannot skip renegotiation if there are more changes than simulcast stream switch (i.e. add/remove/source switches)\n    if (added.length !== 0 || removed.length !== 0) {\n      return false;\n    }\n\n    // Similar to `updateRemoteVideosFromLastVideosToReceive`, we use `remoteVideoUpdateSent` to cache the previous\n    // index so that we don't incorrectly mark a simulcast stream change (e.g. a sender switching from publishing [1, 3] to [2] to [1, 3])\n    // as the add or removal of a source\n    this.meetingSessionContext.videoStreamIndex.remoteVideoUpdateSent();\n    return true;\n  }\n\n  // This funtion should be called only when any server side network adaption feature is enabled.\n  // It sends `RemoteVideoUpdate` frame to server to update remote video preferences, which is needed for server side bandwidth probing.\n  // The `RemoteVideoUpdate` signaling frame maybe also trigger server side video quality adaption if such feature has been signalled.\n  //\n  // It requires the caller to manage `this.meetingSessionContext.lastVideosToReceive`\n  // and `this.meetingSessionContext.videosToReceive` so that `this.meetingSessionContext.lastVideosToReceive`\n  // contains the stream IDs from either last time a subscribe was set, or last time this function was set.\n  //\n  // It will return false if not receiving any remote videos or found new video sources with MID not set yet.\n  // It will return true if sent current preferences to server. It maybe also triggered server side quality adaption..\n  private sendRemoteVideoUpdate(): boolean {\n    const context = this.meetingSessionContext;\n    /* istanbul ignore next: Extremely unlikely that `videosToReceive` is null */\n    if (context.videosToReceive === null) {\n      return false;\n    }\n\n    const groupIdsToReceive = context.videosToReceive.array().map((streamId: number) => {\n      return context.videoStreamIndex.groupIdForStreamId(streamId);\n    });\n    this.receiveRemotePauseResumeTask.updateSubscribedGroupdIds(new Set(groupIdsToReceive));\n\n    const currentConfigs = convertVideoPreferencesToSignalingClientVideoSubscriptionConfiguration(\n      context,\n      groupIdsToReceive,\n      context.videoDownlinkBandwidthPolicy.getVideoPreferences()\n    );\n\n    const newVideoSubscriptionConfigurationsMap: Map<\n      number,\n      SignalingClientVideoSubscriptionConfiguration\n    > = new Map();\n    const addedOrUpdated: SignalingClientVideoSubscriptionConfiguration[] = [];\n    for (const config of currentConfigs) {\n      let shouldIncludeInUpdate = false;\n      if (!context.lastVideoSubscriptionConfiguration.has(config.groupId)) {\n        shouldIncludeInUpdate = true;\n      } else {\n        const lastConfig = context.lastVideoSubscriptionConfiguration.get(config.groupId);\n        if (!config.equals(lastConfig)) {\n          this.logger.debug(\n            `${JSON.stringify(config)} does not equal ${JSON.stringify(lastConfig)}, sending update`\n          );\n          shouldIncludeInUpdate = true;\n        }\n      }\n\n      newVideoSubscriptionConfigurationsMap.set(config.groupId, config);\n      if (shouldIncludeInUpdate) {\n        addedOrUpdated.push(config);\n      }\n    }\n    context.lastVideoSubscriptionConfiguration = newVideoSubscriptionConfigurationsMap;\n\n    const removedMids: string[] = [];\n    if (context.lastVideosToReceive !== null) {\n      const groupIdsToReceiveSet = new Set(groupIdsToReceive);\n      for (const streamId of context.lastVideosToReceive.array()) {\n        const groupId = context.videoStreamIndex.groupIdForStreamId(streamId);\n        if (!groupIdsToReceiveSet.has(groupId)) {\n          const mid = context.transceiverController.getMidForGroupId(groupId);\n          if (mid === undefined) {\n            context.logger.warn(`Could not find MID for group ID to remove: ${groupId}`);\n            continue;\n          }\n          removedMids.push(mid);\n        }\n      }\n    }\n\n    // pass updated preference configurations to server for server-side bandwdith padding/probing\n    // additionally, trigger server-side video quality adaption if enabed\n    if (addedOrUpdated.length !== 0 || removedMids.length !== 0) {\n      context.signalingClient.remoteVideoUpdate(addedOrUpdated, removedMids);\n    }\n\n    return true;\n  }\n\n  updateLocalVideoFromPolicy(): boolean {\n    // Try updating parameters without renegotiation\n    if (this.meetingSessionContext.enableSimulcast) {\n      // The following may result in `this.mayNeedRenegotiationForSimulcastLayerChange` being switched on\n      const encodingParam = this.meetingSessionContext.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n      if (\n        this.mayNeedRenegotiationForSimulcastLayerChange &&\n        this.meetingSessionContext.transceiverController.hasVideoInput() &&\n        !this.negotiatedBitrateLayersAllocationRtpHeaderExtension()\n      ) {\n        this.logger.info('Needs regenotiation for local video simulcast layer change');\n        this.mayNeedRenegotiationForSimulcastLayerChange = false;\n        return false;\n      }\n      this.meetingSessionContext.transceiverController.setEncodingParameters(encodingParam);\n    } else {\n      this.meetingSessionContext.videoCaptureAndEncodeParameter = this.meetingSessionContext.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();\n      // Bitrate will be set in `actionFinishUpdating`. This should never need a resubscribe.\n    }\n\n    this.logger.info('Updated local video from policy without renegotiation');\n    return true;\n  }\n\n  private negotiatedBitrateLayersAllocationRtpHeaderExtension(): boolean {\n    if (!this.meetingSessionContext.transceiverController.localVideoTransceiver()) {\n      return false;\n    }\n    const parameters = this.meetingSessionContext.transceiverController\n      .localVideoTransceiver()\n      .sender.getParameters();\n    if (!parameters || !parameters.headerExtensions) {\n      return false;\n    }\n    return parameters.headerExtensions.some(\n      extension =>\n        extension.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00'\n    );\n  }\n\n  restartLocalVideo(callback: () => void): boolean {\n    const restartVideo = async (): Promise<void> => {\n      if (this._videoTileController.hasStartedLocalVideoTile()) {\n        this.logger.info('stopping local video tile prior to local video restart');\n        this._videoTileController.stopLocalVideoTile();\n        this.logger.info('preparing local video restart update');\n        await this.actionUpdateWithRenegotiation(false);\n        this.logger.info('starting local video tile for local video restart');\n        this._videoTileController.startLocalVideoTile();\n      }\n      this.logger.info('finalizing local video restart update');\n      await this.actionUpdateWithRenegotiation(true);\n      callback();\n    };\n    const result = this.sessionStateController.perform(SessionStateControllerAction.Update, () => {\n      restartVideo();\n    });\n    return (\n      result === SessionStateControllerTransitionResult.Transitioned ||\n      result === SessionStateControllerTransitionResult.DeferredTransition\n    );\n  }\n\n  async replaceLocalVideo(videoStream: MediaStream): Promise<void> {\n    if (!videoStream || videoStream.getVideoTracks().length < 1) {\n      throw new Error('could not acquire video track');\n    }\n    if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n      throw new Error('no active meeting and peer connection');\n    }\n\n    // if there is a local tile, a video tile update event should be fired.\n    const localTile = this.meetingSessionContext.videoTileController.getLocalVideoTile();\n    if (localTile) {\n      const state = localTile.state();\n      const settings = videoStream.getVideoTracks()[0].getSettings();\n      // so tile update wil be fired.\n      localTile.bindVideoStream(\n        state.boundAttendeeId,\n        true,\n        videoStream,\n        settings.width,\n        settings.height,\n        state.streamId,\n        state.boundExternalUserId\n      );\n    }\n\n    await this.meetingSessionContext.transceiverController.setVideoInput(\n      videoStream.getVideoTracks()[0]\n    );\n    // Update the active video input on subscription context to match what we just changed\n    // so that subsequent meeting actions can reuse and destroy it.\n    this.meetingSessionContext.activeVideoInput = videoStream;\n\n    this.logger.info('Local video input is updated');\n  }\n\n  async replaceLocalAudio(audioStream: MediaStream): Promise<void> {\n    if (!audioStream || audioStream.getAudioTracks().length < 1) {\n      throw new Error('could not acquire audio track');\n    }\n    if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n      throw new Error('no active meeting and peer connection');\n    }\n    this.connectionHealthData.reset();\n    this.connectionHealthData.setConnectionStartTime();\n\n    const replaceTrackSuccess = await this.meetingSessionContext.transceiverController.replaceAudioTrack(\n      audioStream.getAudioTracks()[0]\n    );\n    if (!replaceTrackSuccess) {\n      throw new Error('Failed to replace audio track');\n    }\n    this.meetingSessionContext.activeAudioInput = audioStream;\n    this.logger.info('Local audio input is updated');\n  }\n\n  private async actionUpdateWithRenegotiation(notify: boolean): Promise<void> {\n    // See declaration (unpaused in actionFinishUpdating)\n    // The operations in `update` do not need this protection because they are synchronous.\n    this.monitorTask.pauseResubscribeCheck();\n    this.receiveIndexTask.pauseIngestion();\n\n    // TODO: do not block other updates while waiting for video input\n    try {\n      await new SerialGroupTask(this.logger, this.wrapTaskName('AudioVideoUpdate'), [\n        new ReceiveVideoInputTask(this.meetingSessionContext),\n        new TimeoutTask(\n          this.logger,\n          new SerialGroupTask(this.logger, 'UpdateSession', [\n            new AttachMediaInputTask(this.meetingSessionContext),\n            new CreateSDPTask(this.meetingSessionContext),\n            new SetLocalDescriptionTask(this.meetingSessionContext),\n            new FinishGatheringICECandidatesTask(this.meetingSessionContext),\n            new SubscribeAndReceiveSubscribeAckTask(this.meetingSessionContext),\n            new SetRemoteDescriptionTask(this.meetingSessionContext),\n          ]),\n          this.configuration.connectionTimeoutMs\n        ),\n      ]).run();\n      if (notify) {\n        this.sessionStateController.perform(SessionStateControllerAction.FinishUpdating, () => {\n          this.actionFinishUpdating();\n        });\n      }\n    } catch (error) {\n      this.sessionStateController.perform(SessionStateControllerAction.FinishUpdating, () => {\n        const status = new MeetingSessionStatus(\n          this.getMeetingStatusCode(error) || MeetingSessionStatusCode.TaskFailed\n        );\n        if (status.statusCode() !== MeetingSessionStatusCode.IncompatibleSDP) {\n          this.logger.info('failed to update audio-video session');\n        }\n        this.handleMeetingSessionStatus(status, error);\n      });\n    }\n  }\n\n  private notifyStop(status: MeetingSessionStatus, error: Error | null): void {\n    this.forEachObserver(observer => {\n      Maybe.of(observer.audioVideoDidStop).map(f => f.bind(observer)(status));\n    });\n\n    /* istanbul ignore else */\n    if (this.eventController) {\n      const {\n        signalingOpenDurationMs,\n        poorConnectionCount,\n        startTimeMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        meetingStartDurationMs,\n      } = this.meetingSessionContext;\n      const attributes: AudioVideoEventAttributes = {\n        maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n        meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n        meetingStatus: MeetingSessionStatusCode[status.statusCode()],\n        signalingOpenDurationMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        poorConnectionCount,\n        meetingStartDurationMs,\n        retryCount: this.totalRetryCount,\n      };\n\n      /* istanbul ignore next: toString is optional */\n      const meetingErrorMessage = (error && error.message) || status.toString?.() || '';\n      if (attributes.meetingDurationMs === 0) {\n        attributes.meetingErrorMessage = meetingErrorMessage;\n        delete attributes.meetingDurationMs;\n        delete attributes.attendeePresenceDurationMs;\n        delete attributes.meetingStartDurationMs;\n        this.eventController.publishEvent('meetingStartFailed', attributes);\n      } else if (status.isFailure() || status.isAudioConnectionFailure()) {\n        attributes.meetingErrorMessage = meetingErrorMessage;\n        this.eventController.publishEvent('meetingFailed', attributes);\n      } else {\n        this.eventController.publishEvent('meetingEnded', attributes);\n      }\n    }\n  }\n\n  private actionFinishUpdating(): void {\n    // we do not update parameter for simulcast since they are updated in AttachMediaInputTask\n    if (!this.meetingSessionContext.enableSimulcast) {\n      if (this.useUpdateTransceiverControllerForUplink) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController();\n      } else {\n        const maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n        this.enforceBandwidthLimitationForSender(maxBitrateKbps);\n      }\n    }\n\n    this.monitorTask.resumeResubscribeCheck();\n    this.receiveIndexTask.resumeIngestion();\n\n    this.logger.info('updated audio-video session');\n  }\n\n  reconnect(status: MeetingSessionStatus, error: Error | null): boolean {\n    if (this.promotedToPrimaryMeeting) {\n      // If the client was promoted, we 'demote' them so that we don't get in any\n      // unusual or unexpected state on reconnect\n      this.promotedToPrimaryMeeting = false;\n      this.forEachObserver(observer => {\n        Maybe.of(observer.audioVideoWasDemotedFromPrimaryMeeting).map(f =>\n          f.bind(observer)(\n            new MeetingSessionStatus(MeetingSessionStatusCode.AudioVideoDisconnectedWhilePromoted)\n          )\n        );\n      });\n    }\n\n    const willRetry = this._reconnectController.retryWithBackoff(\n      async () => {\n        if (this.sessionStateController.state() === SessionStateControllerState.NotConnected) {\n          this.sessionStateController.perform(SessionStateControllerAction.Connect, () => {\n            this.actionConnect(true);\n          });\n        } else {\n          this.sessionStateController.perform(SessionStateControllerAction.Reconnect, () => {\n            this.actionReconnect(status);\n          });\n        }\n        this.totalRetryCount += 1;\n      },\n      () => {\n        this.logger.info('canceled retry');\n      }\n    );\n    if (!willRetry) {\n      this.sessionStateController.perform(SessionStateControllerAction.Fail, () => {\n        this.actionDisconnect(status, false, error);\n      });\n    }\n\n    return willRetry;\n  }\n\n  private async actionReconnect(status: MeetingSessionStatus): Promise<void> {\n    if (!this._reconnectController.hasStartedConnectionAttempt()) {\n      this._reconnectController.startedConnectionAttempt(false);\n      this.forEachObserver(observer => {\n        Maybe.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(true));\n      });\n    }\n\n    this.meetingSessionContext.volumeIndicatorAdapter.onReconnect();\n    this.connectionHealthData.reset();\n    this.receiveRemotePauseResumeTask = new ReceiveRemoteVideoPauseResume(\n      this.meetingSessionContext\n    );\n    try {\n      await new SerialGroupTask(this.logger, this.wrapTaskName('AudioVideoReconnect'), [\n        new TimeoutTask(\n          this.logger,\n          new SerialGroupTask(this.logger, 'Media', [\n            new CleanRestartedSessionTask(this.meetingSessionContext),\n            new SerialGroupTask(this.logger, 'Signaling', [\n              new OpenSignalingConnectionTask(this.meetingSessionContext),\n              new JoinAndReceiveIndexTask(this.meetingSessionContext),\n            ]),\n            new CreatePeerConnectionTask(this.meetingSessionContext),\n          ]),\n          this.configuration.connectionTimeoutMs\n        ),\n        // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?\n        new ReceiveVideoInputTask(this.meetingSessionContext),\n        new TimeoutTask(\n          this.logger,\n          new SerialGroupTask(this.logger, 'UpdateSession', [\n            new AttachMediaInputTask(this.meetingSessionContext),\n            new CreateSDPTask(this.meetingSessionContext),\n            new SetLocalDescriptionTask(this.meetingSessionContext),\n            new FinishGatheringICECandidatesTask(this.meetingSessionContext),\n            new SubscribeAndReceiveSubscribeAckTask(this.meetingSessionContext),\n            new SetRemoteDescriptionTask(this.meetingSessionContext),\n            this.receiveRemotePauseResumeTask,\n          ]),\n          this.configuration.connectionTimeoutMs\n        ),\n      ]).run();\n\n      this.sessionStateController.perform(SessionStateControllerAction.FinishConnecting, () => {\n        /* istanbul ignore else */\n        if (this.eventController) {\n          const {\n            signalingOpenDurationMs,\n            poorConnectionCount,\n            startTimeMs,\n            iceGatheringDurationMs,\n            attendeePresenceDurationMs,\n            meetingStartDurationMs,\n          } = this.meetingSessionContext;\n          const attributes: AudioVideoEventAttributes = {\n            maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n            meetingDurationMs: Math.round(Date.now() - startTimeMs),\n            meetingStatus: MeetingSessionStatusCode[status.statusCode()],\n            signalingOpenDurationMs,\n            iceGatheringDurationMs,\n            attendeePresenceDurationMs,\n            poorConnectionCount,\n            meetingStartDurationMs,\n            retryCount: this.totalRetryCount,\n          };\n          this.eventController.publishEvent('meetingReconnected', attributes);\n        }\n        this.actionFinishConnecting();\n      });\n    } catch (error) {\n      // To perform the \"Reconnect\" action again, the session should be in the \"Connected\" state.\n      this.sessionStateController.perform(SessionStateControllerAction.FinishConnecting, () => {\n        this.logger.info('failed to reconnect audio-video session');\n        const status = new MeetingSessionStatus(\n          this.getMeetingStatusCode(error) || MeetingSessionStatusCode.TaskFailed\n        );\n        this.handleMeetingSessionStatus(status, error);\n      });\n    }\n    this.connectionHealthData.setConnectionStartTime();\n  }\n\n  private wrapTaskName(taskName: string): string {\n    return `${taskName}/${this.configuration.meetingId}/${this.configuration.credentials.attendeeId}`;\n  }\n\n  private cleanUpMediaStreamsAfterStop(): void {\n    this._mediaStreamBroker.removeMediaStreamBrokerObserver(this);\n    this.meetingSessionContext.activeAudioInput = undefined;\n    this.meetingSessionContext.activeVideoInput = undefined;\n  }\n\n  // Extract the meeting status from `Error.message`, relying on specific phrasing\n  // 'the meeting status code ${CODE}`.\n  //\n  // e.g. reject(new Error(\n  //        `canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode.MeetingEnded}`));\n  private getMeetingStatusCode(error: Error): MeetingSessionStatusCode | null {\n    const matched = /the meeting status code: (\\d+)/.exec(error && error.message);\n    if (matched && matched.length > 1) {\n      return Number.parseInt(matched[1], 10);\n    }\n    return null;\n  }\n\n  private async enforceBandwidthLimitationForSender(maxBitrateKbps: number): Promise<void> {\n    await this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(\n      maxBitrateKbps\n    );\n  }\n\n  handleMeetingSessionStatus(status: MeetingSessionStatus, error: Error | null): boolean {\n    this.logger.info(`handling status: ${MeetingSessionStatusCode[status.statusCode()]}`);\n    if (!status.isTerminal()) {\n      if (this.meetingSessionContext.statsCollector) {\n        this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);\n      }\n    }\n    if (status.statusCode() === MeetingSessionStatusCode.IncompatibleSDP) {\n      this.restartLocalVideo(() => {\n        this.logger.info('handled incompatible SDP by attempting to restart video');\n      });\n      return true;\n    }\n    if (status.statusCode() === MeetingSessionStatusCode.VideoCallSwitchToViewOnly) {\n      this._videoTileController.removeLocalVideoTile();\n      this.forEachObserver((observer: AudioVideoObserver) => {\n        Maybe.of(observer.videoSendDidBecomeUnavailable).map(f => f.bind(observer)());\n      });\n      return false;\n    }\n    if (status.statusCode() === MeetingSessionStatusCode.AudioVideoWasRemovedFromPrimaryMeeting) {\n      this.forEachObserver((observer: AudioVideoObserver) => {\n        Maybe.of(observer.audioVideoWasDemotedFromPrimaryMeeting).map(f =>\n          f.bind(observer)(status)\n        );\n      });\n      return false;\n    }\n    if (status.isTerminal()) {\n      this.logger.error('session will not be reconnected');\n      if (this.meetingSessionContext.reconnectController) {\n        this.meetingSessionContext.reconnectController.disableReconnect();\n      }\n    }\n    if (status.isFailure() || status.isTerminal()) {\n      if (this.meetingSessionContext.reconnectController) {\n        const willRetry = this.reconnect(status, error);\n        if (willRetry) {\n          this.logger.warn(\n            `will retry due to status code ${MeetingSessionStatusCode[status.statusCode()]}${\n              error ? ` and error: ${error.message}` : ``\n            }`\n          );\n        } else {\n          this.logger.error(\n            `failed with status code ${MeetingSessionStatusCode[status.statusCode()]}${\n              error ? ` and error: ${error.message}` : ``\n            }`\n          );\n        }\n        return willRetry;\n      }\n    }\n    return false;\n  }\n\n  setVideoMaxBandwidthKbps(maxBandwidthKbps: number): void {\n    if (maxBandwidthKbps <= 0) {\n      throw new Error('Max bandwidth kbps has to be greater than 0');\n    }\n\n    if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n      this.logger.info(`video send has ideal max bandwidth ${maxBandwidthKbps} kbps`);\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(\n        maxBandwidthKbps\n      );\n    }\n\n    this.maxUplinkBandwidthKbps = maxBandwidthKbps;\n  }\n\n  async handleHasBandwidthPriority(hasBandwidthPriority: boolean): Promise<void> {\n    if (\n      this.meetingSessionContext &&\n      this.meetingSessionContext.videoUplinkBandwidthPolicy &&\n      !this.meetingSessionContext.enableSimulcast\n    ) {\n      if (this.useUpdateTransceiverControllerForUplink) {\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(\n          hasBandwidthPriority\n        );\n        await this.meetingSessionContext.videoUplinkBandwidthPolicy.updateTransceiverController();\n        return;\n      }\n      const oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(\n        hasBandwidthPriority\n      );\n      const newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n\n      if (oldMaxBandwidth !== newMaxBandwidth) {\n        this.logger.info(\n          `video send bandwidth priority ${hasBandwidthPriority} max has changed from ${oldMaxBandwidth} kbps to ${newMaxBandwidth} kbps`\n        );\n        await this.enforceBandwidthLimitationForSender(newMaxBandwidth);\n      }\n    }\n  }\n\n  pauseReceivingStream(streamId: number): void {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.pause([streamId]);\n    }\n  }\n\n  resumeReceivingStream(streamId: number): void {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.resume([streamId]);\n    }\n  }\n\n  setVideoCodecSendPreferences(preferences: VideoCodecCapability[]): void {\n    this.videoSendCodecPreferences = preferences; // In case we haven't called `initSignalingClient` yet\n    this.meetingSessionContext.videoSendCodecPreferences = preferences;\n    if (this.sessionStateController.state() !== SessionStateControllerState.NotConnected) {\n      this.update({ needsRenegotiation: true });\n    }\n  }\n\n  getRemoteVideoSources(): VideoSource[] {\n    const { videoStreamIndex } = this.meetingSessionContext;\n    if (!videoStreamIndex) {\n      this.logger.info('meeting has not started');\n      return [];\n    }\n    const selfAttendeeId = this.configuration.credentials.attendeeId;\n    return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);\n  }\n\n  encodingSimulcastLayersDidChange(simulcastLayers: SimulcastLayers): void {\n    this.mayNeedRenegotiationForSimulcastLayerChange = true;\n    this.forEachObserver(observer => {\n      Maybe.of(observer.encodingSimulcastLayersDidChange).map(f =>\n        f.bind(observer)(simulcastLayers)\n      );\n    });\n  }\n\n  promoteToPrimaryMeeting(credentials: MeetingSessionCredentials): Promise<MeetingSessionStatus> {\n    return this.actionPromoteToPrimaryMeeting(credentials);\n  }\n\n  private async actionPromoteToPrimaryMeeting(\n    credentials: MeetingSessionCredentials\n  ): Promise<MeetingSessionStatus> {\n    let resultingStatus = new MeetingSessionStatus(MeetingSessionStatusCode.SignalingRequestFailed);\n    await new SerialGroupTask(this.logger, this.wrapTaskName('PromoteToPrimaryMeeting'), [\n      new TimeoutTask(\n        this.logger,\n        new PromoteToPrimaryMeetingTask(\n          this.meetingSessionContext,\n          credentials,\n          (status: MeetingSessionStatus) => {\n            resultingStatus = status;\n          }\n        ),\n        this.configuration.connectionTimeoutMs\n      ),\n    ]).run();\n    this.promotedToPrimaryMeeting = resultingStatus.statusCode() === MeetingSessionStatusCode.OK;\n    return resultingStatus;\n  }\n\n  demoteFromPrimaryMeeting(): void {\n    this.meetingSessionContext.signalingClient.demoteFromPrimaryMeeting();\n    this.forEachObserver(observer => {\n      Maybe.of(observer.audioVideoWasDemotedFromPrimaryMeeting).map(f =>\n        f.bind(observer)(new MeetingSessionStatus(MeetingSessionStatusCode.OK))\n      );\n    });\n  }\n\n  async videoInputDidChange(videoStream: MediaStream | undefined): Promise<void> {\n    this.logger.info('Receive a video input change event');\n    // No active meeting, there is nothing to do\n    if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n      this.logger.info(\n        'Skip updating video input because there is no active meeting and peer connection'\n      );\n      return;\n    }\n    if (this._videoTileController.hasStartedLocalVideoTile()) {\n      if (videoStream) {\n        await this.replaceLocalVideo(videoStream);\n      } else {\n        this._videoTileController.stopLocalVideoTile();\n      }\n    }\n  }\n\n  async audioInputDidChange(audioStream: MediaStream | undefined): Promise<void> {\n    this.logger.info('Receive an audio input change event');\n    // No active meeting, there is nothing to do\n    if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n      this.logger.info(\n        'Skip updating audio input because there is no active meeting and peer connection'\n      );\n      return;\n    }\n    if (!audioStream) {\n      // If audio input stream stopped, try to get empty audio device from media stream broker\n      try {\n        audioStream = await this.mediaStreamBroker.acquireAudioInputStream();\n      } catch (error) {\n        this.logger.error('Could not acquire audio track from mediaStreamBroker');\n        return;\n      }\n    }\n    await this.replaceLocalAudio(audioStream);\n  }\n}\n"]}