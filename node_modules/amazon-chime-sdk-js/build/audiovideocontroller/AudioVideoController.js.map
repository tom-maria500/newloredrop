{"version":3,"file":"AudioVideoController.js","sourceRoot":"","sources":["../../src/audiovideocontroller/AudioVideoController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ActiveSpeakerDetector from '../activespeakerdetector/ActiveSpeakerDetector';\nimport AudioMixController from '../audiomixcontroller/AudioMixController';\nimport AudioVideoControllerFacade from '../audiovideocontroller/AudioVideoControllerFacade';\nimport AudioVideoObserver from '../audiovideoobserver/AudioVideoObserver';\nimport EventController from '../eventcontroller/EventController';\nimport Logger from '../logger/Logger';\nimport MediaStreamBroker from '../mediastreambroker/MediaStreamBroker';\nimport MeetingSessionConfiguration from '../meetingsession/MeetingSessionConfiguration';\nimport MeetingSessionStatus from '../meetingsession/MeetingSessionStatus';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport VideoTileController from '../videotilecontroller/VideoTileController';\n\n/**\n * [[AudioVideoController]] manages the signaling and peer connections.\n */\nexport default interface AudioVideoController extends AudioVideoControllerFacade {\n  /**\n   * Iterates through each observer, so that their notification functions may\n   * be called.\n   */\n  forEachObserver(observerFunc: (observer: AudioVideoObserver) => void): void;\n\n  /**\n   * Updates the peer connection when video tiles have changed.  If `needsRenegotiation`\n   * is set explicitly to false, we may skip SDP negotiation if it is not necessary.\n   */\n  update(options?: { needsRenegotiation?: boolean }): boolean;\n\n  /**\n   * Restarts the local video device. The callback is called when the device\n   * has been restarted.\n   */\n  restartLocalVideo(callback: () => void): void;\n\n  /**\n   * Replaces the local video device without a WebRTC negotiation on the sender side and\n   * avoids that all video subscribers to re-negotiate at the same time.\n   * This is an optimized way of replacing video stream and requires `WebRTC Unified Plan`.\n   * @param videoStream - The video stream to be replaced with\n   */\n  replaceLocalVideo(videoStream: MediaStream): Promise<void>;\n\n  /**\n   * Restarts the local audio. This function assumes the peer connection is established and an active\n   * audio stream must be chosen in [[DeviceController]]\n   * @param audioStream - The audio stream to be replaced with\n   */\n  replaceLocalAudio(audioStream: MediaStream): Promise<void>;\n\n  /**\n   * Restarts the peer connection and/or the session.\n   */\n  reconnect(status: MeetingSessionStatus, error: Error | null): boolean;\n\n  /**\n   * Handles the meeting session status and returns true if it will restart the session.\n   */\n  handleMeetingSessionStatus(status: MeetingSessionStatus, error: Error | null): boolean;\n\n  /**\n   * Pauses receiving stream on peer connection by streamId\n   */\n  pauseReceivingStream(streamId: number): void;\n\n  /**\n   * Resumes receiving stream on peer connection by streamId\n   */\n  resumeReceivingStream(streamId: number): void;\n\n  /**\n   * Returns the session configuration for this audio-video controller.\n   */\n  readonly configuration: MeetingSessionConfiguration;\n\n  /**\n   * Returns the [[RealtimeController]] for this audio-video controller.\n   */\n  readonly realtimeController: RealtimeController;\n\n  /**\n   * Returns the [[ActiveSpeakerDetector]] for this audio-video controller.\n   */\n  readonly activeSpeakerDetector: ActiveSpeakerDetector;\n\n  /**\n   * Returns the [[VideoTileController]] for this audio-video controller.\n   */\n  readonly videoTileController: VideoTileController;\n\n  /**\n   * Returns the [[Logger]] for this audio-video controller.\n   */\n  readonly logger: Logger;\n\n  /**\n   * Returns the RTCPeerConnection for this audio-video controller if there is\n   * one.\n   */\n  readonly rtcPeerConnection: RTCPeerConnection | null;\n\n  /**\n   * Returns the [[MediaStreamBroker]] for this audio-video controller.\n   */\n  readonly mediaStreamBroker: MediaStreamBroker;\n\n  /**\n   * Returns the [[AudioMixController]] for this audio-video controller.\n   */\n  readonly audioMixController: AudioMixController;\n\n  /**\n   * Returns the [[EventController]] for this audio-video controller.\n   */\n  readonly eventController?: EventController;\n}\n"]}