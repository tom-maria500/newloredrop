{"version":3,"file":"DefaultVideoFrameProcessorPipeline.js","sourceRoot":"","sources":["../../src/videoframeprocessor/DefaultVideoFrameProcessorPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport CanvasVideoFrameBuffer from './CanvasVideoFrameBuffer';\nimport DefaultVideoFrameProcessorTimer from './DefaultVideoFrameProcessorTimer';\nimport VideoFrameBuffer from './VideoFrameBuffer';\nimport VideoFrameProcessor from './VideoFrameProcessor';\nimport VideoFrameProcessorPipeline from './VideoFrameProcessorPipeline';\nimport VideoFrameProcessorPipelineObserver from './VideoFrameProcessorPipelineObserver';\nimport VideoFrameProcessorTimer from './VideoFrameProcessorTimer';\n\nconst DEFAULT_FRAMERATE = 15;\n\n/** @internal */\ninterface HTMLCanvasElementWithCaptureStream extends HTMLCanvasElement {\n  // Not in IE, but that's OK.\n  captureStream(frameRate?: number): MediaStream;\n}\n\n/**\n * [[DefaultVideoFrameProcessorPipeline]] implements {@link VideoFrameProcessorPipeline}.\n * It constructs a buffer {@link CanvasVideoFrameBuffer} as source by default and invokes processor based on `framerate`.\n * The default output type is `MediaStream`.\n */\nexport default class DefaultVideoFrameProcessorPipeline implements VideoFrameProcessorPipeline {\n  private fr: number = DEFAULT_FRAMERATE;\n  // initialize with dummy inactive MediaStream to keep strict type\n  outputMediaStream: MediaStream = new MediaStream();\n\n  private videoInput: HTMLVideoElement = document.createElement('video') as HTMLVideoElement;\n\n  private canvasOutput: HTMLCanvasElementWithCaptureStream = document.createElement(\n    'canvas'\n  ) as HTMLCanvasElementWithCaptureStream;\n  private outputCtx = this.canvasOutput.getContext('2d');\n\n  private canvasInput: HTMLCanvasElement = document.createElement('canvas');\n  private inputCtx = this.canvasInput.getContext('2d');\n  private inputVideoStream: MediaStream | null = null;\n\n  private sourceBuffers: VideoFrameBuffer[] = [];\n  private destBuffers: VideoFrameBuffer[] = [];\n  private observers: Set<VideoFrameProcessorPipelineObserver> = new Set<\n    VideoFrameProcessorPipelineObserver\n  >();\n\n  private hasStarted: boolean = false;\n  private timer: VideoFrameProcessorTimer;\n\n  constructor(\n    private logger: Logger,\n    private stages: VideoFrameProcessor[],\n    timer: VideoFrameProcessorTimer = new DefaultVideoFrameProcessorTimer()\n  ) {\n    this.timer = timer;\n  }\n\n  destroy(): void {\n    this.stop();\n    if (this.stages) {\n      for (const stage of this.stages) {\n        stage.destroy();\n      }\n    }\n    this.timer.destroy();\n  }\n\n  get framerate(): number {\n    return this.fr;\n  }\n\n  // A negative framerate will cause `captureStream` to throw `NotSupportedError`.\n  // The setter prevents this by switching to the default framerate if less than 0.\n  set framerate(value: number) {\n    this.fr = value < 0 ? DEFAULT_FRAMERATE : value;\n  }\n\n  stop(): void {\n    // empty stream, stop pipeline\n    // null input media stream stops the pipeline.\n    this.videoInput.removeEventListener('loadedmetadata', this.process);\n    this.videoInput.srcObject = null;\n\n    // Clean the input stream and buffers.\n    this.destroyInputMediaStreamAndBuffers();\n\n    // Stop all the output tracks, but don't discard the media stream,\n    // because it's how other parts of the codebase recognize when\n    // a selected stream is part of this transform device.\n    if (this.outputMediaStream) {\n      for (const track of this.outputMediaStream.getVideoTracks()) {\n        track.stop();\n      }\n    }\n\n    if (this.hasStarted) {\n      this.hasStarted = false;\n      this.forEachObserver(observer => {\n        if (observer.processingDidStop) {\n          observer.processingDidStop();\n        }\n      });\n    }\n  }\n\n  addObserver(observer: VideoFrameProcessorPipelineObserver): void {\n    this.observers.add(observer);\n  }\n\n  removeObserver(observer: VideoFrameProcessorPipelineObserver): void {\n    this.observers.delete(observer);\n  }\n\n  async getInputMediaStream(): Promise<MediaStream | null> {\n    return this.inputVideoStream;\n  }\n\n  getActiveOutputMediaStream(): MediaStream {\n    if (this.isOutputMediaStreamActive()) {\n      return this.outputMediaStream;\n    }\n\n    this.outputMediaStream = this.canvasOutput.captureStream(this.framerate);\n    this.cloneInputAudioTracksToOutput();\n    return this.outputMediaStream;\n  }\n\n  /**\n   * `inputMediaStream` is by default used to construct one {@link CanvasVideoFrameBuffer}\n   * The buffer will be fed into the first {@link VideoFrameProcessor}.\n   */\n  async setInputMediaStream(inputMediaStream: MediaStream | null): Promise<void> {\n    if (!inputMediaStream) {\n      this.stop();\n      return;\n    }\n\n    if (inputMediaStream.getVideoTracks().length === 0) {\n      this.logger.error('No video tracks in input media stream, ignoring');\n      return;\n    }\n\n    this.inputVideoStream = inputMediaStream;\n    const settings = this.inputVideoStream.getVideoTracks()[0].getSettings();\n    this.logger.info(`processing pipeline input stream settings ${JSON.stringify(settings)}`);\n    this.canvasOutput.width = settings.width;\n    this.canvasOutput.height = settings.height;\n    this.videoInput.addEventListener('loadedmetadata', this.process);\n    this.videoInput.srcObject = this.inputVideoStream;\n    // avoid iOS safari full screen video\n    this.videoInput.setAttribute('playsinline', 'true');\n    // create sources\n    const canvasBuffer = new CanvasVideoFrameBuffer(this.canvasInput);\n    this.sourceBuffers.push(canvasBuffer);\n\n    this.videoInput.load();\n    try {\n      await this.videoInput.play();\n    } catch {\n      this.logger.warn('Video element play() overrided by another load().');\n    }\n\n    this.cloneInputAudioTracksToOutput();\n  }\n\n  private cloneInputAudioTracksToOutput(): void {\n    if (!this.isOutputMediaStreamActive() || this.inputVideoStream === null) {\n      this.logger.info('Not cloning input audio tracks to output, do not have media streams ready');\n      return; // Just wait for `getActiveOutputMediaStream`\n    }\n\n    // Remove current audio tracks from output\n    for (const audioTrack of this.outputMediaStream.getAudioTracks()) {\n      this.logger.info(`Removing audio track ${audioTrack.id} from output stream`);\n      this.outputMediaStream.removeTrack(audioTrack);\n    }\n\n    for (const audioTrack of this.inputVideoStream.getAudioTracks()) {\n      this.logger.info(`Adding audio track ${audioTrack.id} to output stream`);\n      this.outputMediaStream.addTrack(audioTrack);\n    }\n  }\n\n  private isOutputMediaStreamActive(): boolean {\n    return this.outputMediaStream && this.outputMediaStream.active;\n  }\n\n  set processors(stages: VideoFrameProcessor[]) {\n    this.stages = stages;\n  }\n\n  get processors(): VideoFrameProcessor[] {\n    return this.stages;\n  }\n\n  process = async (_event: Event): Promise<void> => {\n    if (!this.inputVideoStream) {\n      return;\n    }\n\n    const processVideoStart = performance.now();\n\n    // videoWidth is intrinsic video width\n    if (this.videoInput.videoWidth) {\n      if (this.canvasInput.width !== this.videoInput.videoWidth) {\n        this.canvasInput.width = this.videoInput.videoWidth;\n        this.canvasInput.height = this.videoInput.videoHeight;\n        this.sourceBuffers[0].height = this.canvasInput.height;\n        this.sourceBuffers[0].width = this.canvasInput.width;\n        this.sourceBuffers[0].framerate = this.framerate;\n      }\n\n      this.inputCtx.drawImage(this.videoInput, 0, 0);\n    }\n\n    // processes input buffers\n    let buffers: VideoFrameBuffer[] = [];\n    buffers.push(this.sourceBuffers[0]);\n    try {\n      for (const proc of this.processors) {\n        buffers = await proc.process(buffers);\n      }\n    } catch (_error) {\n      this.forEachObserver(obs => {\n        if (obs.processingDidFailToStart) {\n          obs.processingDidFailToStart();\n        }\n      });\n      return;\n    }\n\n    this.destBuffers = buffers;\n    let imageSource: CanvasImageSource;\n    try {\n      imageSource = await this.destBuffers[0].asCanvasImageSource();\n    } catch (error) {\n      /* istanbul ignore else: Check exists incase stop is interleaved with async function calls; hard to mock */\n      if (this.inputVideoStream) {\n        this.logger.info('buffers are destroyed and pipeline could not start');\n        this.forEachObserver(obs => {\n          if (obs.processingDidFailToStart) {\n            obs.processingDidFailToStart();\n          }\n        });\n      }\n      return;\n    }\n\n    // finally draws the image\n    const frameWidth = imageSource.width as number;\n    const frameHeight = imageSource.height as number;\n    if (frameWidth !== 0 && frameHeight !== 0) {\n      if (this.canvasOutput.width !== frameWidth && this.canvasOutput.height !== frameHeight) {\n        this.canvasOutput.width = frameWidth;\n        this.canvasOutput.height = frameHeight;\n      }\n\n      this.outputCtx.drawImage(\n        imageSource,\n        0,\n        0,\n        frameWidth,\n        frameHeight,\n        0,\n        0,\n        frameWidth,\n        frameHeight\n      );\n\n      if (!this.hasStarted) {\n        this.hasStarted = true;\n        this.forEachObserver(observer => {\n          if (observer.processingDidStart) {\n            observer.processingDidStart();\n          }\n        });\n      }\n    }\n\n    // measures time\n    const processVideoLatency = performance.now() - processVideoStart;\n    const leave = (1000 * 2) / this.framerate - processVideoLatency; // half fps\n    const nextFrameDelay = Math.max(0, 1000 / this.framerate - processVideoLatency);\n\n    if (leave <= 0) {\n      this.forEachObserver(obs => {\n        if (obs.processingLatencyTooHigh) {\n          obs.processingLatencyTooHigh(processVideoLatency);\n        }\n      });\n    }\n\n    await this.timer.start(nextFrameDelay, this.process.bind(this));\n  };\n\n  private forEachObserver(\n    observerFunc: (observer: VideoFrameProcessorPipelineObserver) => void\n  ): void {\n    for (const observer of this.observers) {\n      setTimeout(() => {\n        observerFunc(observer);\n      }, 0);\n    }\n  }\n\n  private destroyInputMediaStreamAndBuffers(): void {\n    if (this.inputVideoStream) {\n      for (const track of this.inputVideoStream.getTracks()) {\n        track.stop();\n      }\n    }\n    this.inputVideoStream = null;\n\n    for (const buffer of this.sourceBuffers) {\n      buffer.destroy();\n    }\n    this.sourceBuffers = [];\n  }\n}\n"]}