{"version":3,"file":"VideoFrameProcessorPipeline.js","sourceRoot":"","sources":["../../src/videoframeprocessor/VideoFrameProcessorPipeline.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport VideoFrameProcessor from './VideoFrameProcessor';\nimport VideoFrameProcessorPipelineObserver from './VideoFrameProcessorPipelineObserver';\n\n/**\n * [[VideoFrameProcessorPipeline]] facilitates video processing by transforming a input `MediaStream`\n * with an array of {@link VideoFrameProcessor} to another `MediaStream`.\n * It invokes the execution of {@link VideoFrameProcessor} in interval specified by `framerate`.\n */\nexport default interface VideoFrameProcessorPipeline {\n  /**\n   * Sets the input for the pipeline. An active `MediaStream` will start the processing steps.\n   * To stop the pipeline, `null` can be passed.\n   * To switch `MediaSteam`, the pipeline must be stopped first.\n   */\n  setInputMediaStream(mediaStream: MediaStream): Promise<void>;\n\n  /**\n   * Returns the current input `MediaStream`.\n   */\n  getInputMediaStream(): Promise<MediaStream | null>;\n\n  /**\n   * Returns an active output stream.\n   */\n  getActiveOutputMediaStream(): MediaStream;\n\n  /**\n   * Stops the pipeline.\n   */\n  stop(): void;\n\n  /**\n   * Destroys the pipeline, processors, intermediate buffers and input stream.\n   */\n  destroy(): void;\n\n  /**\n   * Adds {@link VideoFrameProcessorPipelineObserver} observer to receive lifecycle and performance callback.\n   */\n  addObserver(observer: VideoFrameProcessorPipelineObserver): void;\n\n  /**\n   * Removes {@link VideoFrameProcessorPipelineObserver} observer.\n   */\n  removeObserver(observer: VideoFrameProcessorPipelineObserver): void;\n\n  /**\n   * Lists of processors to execute to produce output media stream.\n   */\n  processors: VideoFrameProcessor[];\n\n  /**\n   * The desired output frame rate.\n   */\n  framerate: number;\n\n  /**\n   * The output `MediaStream` as a result of processor executions.\n   * It is possible, but unlikely, that this accessor will throw.\n   */\n  readonly outputMediaStream: MediaStream;\n}\n"]}