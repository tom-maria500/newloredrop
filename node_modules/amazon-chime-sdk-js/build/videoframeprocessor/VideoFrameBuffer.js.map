{"version":3,"file":"VideoFrameBuffer.js","sourceRoot":"","sources":["../../src/videoframeprocessor/VideoFrameBuffer.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * [[VideoFrameBuffer]] is an interface that can be used as input or output with {@link VideoFrameProcessor}.\n * It must implement the method to return buffer as `CanvasImageSource` but the internal handle to the video frame buffer can be flexible.\n */\nexport default interface VideoFrameBuffer {\n  /**\n   * The frame rate of the source in the [[VideoFrameBuffer]].\n   */\n  framerate: number;\n\n  /**\n   *  The width in pixels of the source in the [[VideoFrameBuffer]].\n   */\n  width: number;\n\n  /**\n   * The height in pixels of the source in the [[VideoFrameBuffer]].\n   */\n  height: number;\n\n  /**\n   * Explicitly destroys the source and intermediate buffers in [[VideoFrameBuffer]].\n   * After `destroy` is called, this [[VideoFrameBuffer]] must be discarded.\n   * `destroy` is typically required to be called, when `MediaStream`, `HTMLVideoElement` and `ImageData` are passed in as initialization data.\n   */\n  destroy(): void;\n\n  /**\n   * Returns the buffer as `CanvasImageSource` which can be drawn on HTMLCanvasElement directly.\n   * If `destroy` is already called, `asCanvasImageSource` should reject.\n   */\n  asCanvasImageSource(): Promise<CanvasImageSource>;\n\n  /**\n   * Returns `HTMLCanvasElement` or `OffscreenCanvas` if the internal source can be transformed into one. Optional method.\n   * Returns `null` if the buffer is destroyed.\n   */\n  asCanvasElement?(): HTMLCanvasElement | OffscreenCanvas | null;\n\n  /**\n   * Returns [[Transferable]] if the internal source can be transformed into one. Optional method.\n   * If `destroy` is already called, `asTransferable` should reject.\n   */\n  asTransferable?(): Promise<Transferable>;\n}\n"]}