{"version":3,"file":"DefaultEventController.js","sourceRoot":"","sources":["../../src/eventcontroller/DefaultEventController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { UAParser } from 'ua-parser-js';\n\nimport Destroyable, { isDestroyable } from '../destroyable/Destroyable';\nimport EventIngestionConfiguration from '../eventingestionconfiguration/EventIngestionConfiguration';\nimport EventObserver from '../eventobserver/EventObserver';\nimport DefaultMeetingEventReporter from '../eventreporter/DefaultMeetingEventReporter';\nimport EventReporter from '../eventreporter/EventReporter';\nimport EventsClientConfiguration from '../eventsclientconfiguration/EventsClientConfiguration';\nimport MeetingEventsClientConfiguration from '../eventsclientconfiguration/MeetingEventsClientConfiguration';\nimport Logger from '../logger/Logger';\nimport MeetingSessionConfiguration from '../meetingsession/MeetingSessionConfiguration';\nimport AsyncScheduler from '../scheduler/AsyncScheduler';\nimport Versioning from '../versioning/Versioning';\nimport AudioVideoEventAttributes from './AudioVideoEventAttributes';\nimport DeviceEventAttributes from './DeviceEventAttributes';\nimport EventAttributes from './EventAttributes';\nimport EventController from './EventController';\nimport EventName from './EventName';\nimport flattenEventAttributes from './flattenEventAttributes';\nimport MeetingHistoryState from './MeetingHistoryState';\nimport VideoFXEventAttributes from './VideoFXEventAttributes';\n\nexport default class DefaultEventController implements EventController, Destroyable {\n  private static readonly UNAVAILABLE = 'Unavailable';\n\n  // Use \"ua-parser-js\" over \"detect-browser\" to get more detailed information.\n  // We can consider replacing \"detect-browser\" in DefaultBrowserBehavior.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private parserResult: any;\n  private browserMajorVersion: string;\n  private meetingHistoryStates: { name: MeetingHistoryState; timestampMs: number }[] = [];\n  private observerSet: Set<EventObserver> = new Set<EventObserver>();\n  private logger: Logger;\n  private configuration: MeetingSessionConfiguration;\n  private _eventReporter: EventReporter;\n  destroyed = false;\n\n  // Compute these once so we're not doing work on each event.\n  private browserName: string;\n  private browserVersion: string;\n  private deviceName: string;\n\n  constructor(\n    configuration: MeetingSessionConfiguration,\n    logger: Logger,\n    eventReporter?: EventReporter\n  ) {\n    this.logger = logger;\n    this.configuration = configuration;\n    this.setupEventReporter(configuration, logger, eventReporter);\n    try {\n      this.parserResult =\n        navigator && navigator.userAgent ? new UAParser(navigator.userAgent).getResult() : null;\n    } catch (error) {\n      // This seems to never happen with ua-parser-js in reality, even with malformed strings.\n      /* istanbul ignore next */\n      this.logger.error(error.message);\n    }\n\n    this.browserMajorVersion =\n      this.parserResult?.browser?.version?.split('.')[0] || DefaultEventController.UNAVAILABLE;\n    this.browserName = this.parserResult?.browser.name || DefaultEventController.UNAVAILABLE;\n    this.browserVersion = this.parserResult?.browser.version || DefaultEventController.UNAVAILABLE;\n    this.deviceName =\n      [this.parserResult?.device.vendor || '', this.parserResult?.device.model || '']\n        .join(' ')\n        .trim() || DefaultEventController.UNAVAILABLE;\n  }\n\n  addObserver(observer: EventObserver): void {\n    this.observerSet.add(observer);\n  }\n\n  removeObserver(observer: EventObserver): void {\n    this.observerSet.delete(observer);\n  }\n\n  private forEachObserver(observerFunc: (observer: EventObserver) => void): void {\n    for (const observer of this.observerSet) {\n      AsyncScheduler.nextTick(() => {\n        /* istanbul ignore else */\n        if (this.observerSet.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  async publishEvent(\n    name: EventName,\n    attributes?: AudioVideoEventAttributes | DeviceEventAttributes | VideoFXEventAttributes\n  ): Promise<void> {\n    const timestampMs = Date.now();\n    this.meetingHistoryStates.push({\n      name,\n      timestampMs,\n    });\n    // Make a single frozen copy of the event, reusing the object returned by\n    // `getAttributes` to avoid copying too much.\n    const eventAttributes = Object.freeze(\n      Object.assign(this.getAttributes(timestampMs), attributes)\n    );\n    // Publishes event to observers\n    this.forEachObserver((observer: EventObserver) => {\n      observer.eventDidReceive(name, eventAttributes);\n    });\n    // Reports event to the ingestion service\n    this.reportEvent(name, timestampMs, attributes);\n  }\n\n  private async reportEvent(\n    name: MeetingHistoryState,\n    timestampMs: number,\n    attributes?: AudioVideoEventAttributes | DeviceEventAttributes | VideoFXEventAttributes\n  ): Promise<void> {\n    let flattenedAttributes;\n    try {\n      if (attributes) {\n        flattenedAttributes = flattenEventAttributes(attributes);\n      }\n      await this.eventReporter?.reportEvent(timestampMs, name, flattenedAttributes);\n    } catch (error) {\n      /* istanbul ignore next */\n      this.logger.error(`Error reporting event ${error}`);\n    }\n  }\n\n  private setupEventReporter(\n    configuration: MeetingSessionConfiguration,\n    logger: Logger,\n    eventReporter?: EventReporter\n  ): void {\n    if (eventReporter) {\n      this._eventReporter = eventReporter;\n    } else if (configuration.urls) {\n      // Attempts to set up a event reporter using the meeting configuration if one is not provided\n      const eventIngestionURL = configuration.urls.eventIngestionURL;\n      if (eventIngestionURL) {\n        this.logger.info(`Event ingestion URL is present in the configuration`);\n        const {\n          meetingId,\n          credentials: { attendeeId, joinToken },\n        } = configuration;\n        const meetingEventsClientConfiguration: EventsClientConfiguration = new MeetingEventsClientConfiguration(\n          meetingId,\n          attendeeId,\n          joinToken\n        );\n        const eventIngestionConfiguration = new EventIngestionConfiguration(\n          meetingEventsClientConfiguration,\n          eventIngestionURL\n        );\n        this._eventReporter = new DefaultMeetingEventReporter(eventIngestionConfiguration, logger);\n      }\n    }\n  }\n\n  private getAttributes(timestampMs: number): EventAttributes {\n    return {\n      attendeeId: this.configuration.credentials.attendeeId,\n      browserMajorVersion: this.browserMajorVersion,\n      browserName: this.browserName,\n      browserVersion: this.browserVersion,\n      deviceName: this.deviceName,\n      externalMeetingId:\n        typeof this.configuration.externalMeetingId === 'string'\n          ? this.configuration.externalMeetingId\n          : '',\n      externalUserId: this.configuration.credentials.externalUserId,\n      meetingHistory: this.meetingHistoryStates,\n      meetingId: this.configuration.meetingId,\n      osName: this.parserResult?.os.name || DefaultEventController.UNAVAILABLE,\n      osVersion: this.parserResult?.os.version || DefaultEventController.UNAVAILABLE,\n      sdkVersion: Versioning.sdkVersion,\n      sdkName: Versioning.sdkName,\n      timestampMs,\n    };\n  }\n\n  get eventReporter(): EventReporter {\n    return this._eventReporter;\n  }\n\n  /**\n   * Clean up this instance and resources that it created.\n   *\n   * After calling `destroy`, internal fields like `eventReporter` will be unavailable.\n   */\n  async destroy(): Promise<void> {\n    if (isDestroyable(this.eventReporter)) {\n      await this.eventReporter.destroy();\n    }\n    this.logger = undefined;\n    this.configuration = undefined;\n    this._eventReporter = undefined;\n    this.destroyed = true;\n  }\n}\n"]}