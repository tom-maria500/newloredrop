{"version":3,"file":"EventController.js","sourceRoot":"","sources":["../../src/eventcontroller/EventController.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport EventObserver from '../eventobserver/EventObserver';\nimport EventReporter from '../eventreporter/EventReporter';\nimport AudioVideoEventAttributes from './AudioVideoEventAttributes';\nimport DeviceEventAttributes from './DeviceEventAttributes';\nimport EventName from './EventName';\nimport VideoFXEventAttributes from './VideoFXEventAttributes';\n\n/**\n * [[EventController]] keeps track of a list of event observers and notifies them of SDK events.\n * An event can describe success or failure of SDK components that make use of this controller.\n * Example: The success and failure for a meeting session.\n * If `EventIngestionUrl` is available in `MeetingSessionConfiguration`, then the generated meeting events will\n * be reported to Amazon Chime's backend using the `EventReporter`.\n *\n * In most cases you will want to use the default `EventController`, but you may want to implement your\n * own if you wish to keep track of more meta data or wish to implement your own custom events.\n */\nexport default interface EventController {\n  /**\n   * Adds an observer to receive events.\n   */\n  addObserver(observer: EventObserver): void;\n\n  /**\n   * Remove an observer to receive events.\n   */\n  removeObserver(observer: EventObserver): void;\n\n  /**\n   * Notifies observers of an event.\n   */\n  publishEvent(\n    name: EventName,\n    attributes?: AudioVideoEventAttributes | DeviceEventAttributes | VideoFXEventAttributes\n  ): Promise<void>;\n\n  /**\n   * EventReporter that the EventController uses to send events to the Amazon Chime backend.\n   */\n  readonly eventReporter?: EventReporter;\n}\n"]}