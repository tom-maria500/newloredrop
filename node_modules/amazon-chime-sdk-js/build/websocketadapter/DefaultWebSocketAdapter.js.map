{"version":3,"file":"DefaultWebSocketAdapter.js","sourceRoot":"","sources":["../../src/websocketadapter/DefaultWebSocketAdapter.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAGtC,0EAAkD;AAElD,gFAAwD;AAExD,MAAqB,uBAAuB;IAG1C,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEtC,MAAM,CAAC,GAAW,EAAE,SAAmB,EAAE,WAAqB;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,oBAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;QAC/F,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,aAAa,CAAC;IAC7C,CAAC;IAED,IAAI,CAAC,OAA4B;QAC/B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACrE,OAAO,KAAK,CAAC;SACd;QAED,IAAI;YACF,IAAI,OAAO,YAAY,UAAU,EAAE;gBACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACtC;iBAAM;gBACL,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/B;YACD,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,GAAG,EAAE,CACH,eAAe,GAAG,CAAC,OAAO,qBAAqB,6BAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAC1F,CAAC;YACF,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,KAAK,CAAC,IAAa,EAAE,MAAe;;QAClC,MAAA,IAAI,CAAC,UAAU,0CAAE,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,gBAAgB,CAAC,OAAe,EAAE,aAA4B;QAC5D,wBAAwB;QACxB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;YAC5E,OAAO;SACR;QACD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAC3D,CAAC;IAED,mBAAmB,CAAC,OAAe,EAAE,aAA4B;;QAC/D,MAAA,IAAI,CAAC,UAAU,0CAAE,mBAAmB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,6BAAmB,CAAC,IAAI,CAAC;SACjC;QACD,QAAQ,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;YAClC,KAAK,SAAS,CAAC,UAAU;gBACvB,OAAO,6BAAmB,CAAC,UAAU,CAAC;YACxC,KAAK,SAAS,CAAC,IAAI;gBACjB,OAAO,6BAAmB,CAAC,IAAI,CAAC;YAClC,KAAK,SAAS,CAAC,OAAO;gBACpB,OAAO,6BAAmB,CAAC,OAAO,CAAC;YACrC,KAAK,SAAS,CAAC,MAAM;gBACnB,OAAO,6BAAmB,CAAC,MAAM,CAAC;SACrC;IACH,CAAC;CACF;AApED,0CAoEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Logger from '../logger/Logger';\nimport Versioning from '../versioning/Versioning';\nimport WebSocketAdapter from './WebSocketAdapter';\nimport WebSocketReadyState from './WebSocketReadyState';\n\nexport default class DefaultWebSocketAdapter implements WebSocketAdapter {\n  private connection: WebSocket | undefined;\n\n  constructor(private logger: Logger) {}\n\n  create(url: string, protocols: string[], isSignedUrl?: boolean): void {\n    this.connection = new WebSocket(isSignedUrl ? url : Versioning.urlWithVersion(url), protocols);\n    this.connection.binaryType = 'arraybuffer';\n  }\n\n  send(message: Uint8Array | string): boolean {\n    if (!this.connection) {\n      this.logger.error('WebSocket not yet created or already destroyed.');\n      return false;\n    }\n\n    try {\n      if (message instanceof Uint8Array) {\n        this.connection.send(message.buffer);\n      } else {\n        this.connection.send(message);\n      }\n      return true;\n    } catch (err) {\n      this.logger.debug(\n        () =>\n          `send error: ${err.message}, websocket state=${WebSocketReadyState[this.readyState()]}`\n      );\n      return false;\n    }\n  }\n\n  close(code?: number, reason?: string): void {\n    this.connection?.close(code, reason);\n  }\n\n  destroy(): void {\n    this.connection = undefined;\n  }\n\n  addEventListener(handler: string, eventListener: EventListener): void {\n    /* istanbul ignore if */\n    if (!this.connection) {\n      this.logger.warn('Cannot add event listener with no WebSocket connection.');\n      return;\n    }\n    this.connection.addEventListener(handler, eventListener);\n  }\n\n  removeEventListener(handler: string, eventListener: EventListener): void {\n    this.connection?.removeEventListener(handler, eventListener);\n  }\n\n  readyState(): WebSocketReadyState {\n    if (!this.connection) {\n      return WebSocketReadyState.None;\n    }\n    switch (this.connection.readyState) {\n      case WebSocket.CONNECTING:\n        return WebSocketReadyState.Connecting;\n      case WebSocket.OPEN:\n        return WebSocketReadyState.Open;\n      case WebSocket.CLOSING:\n        return WebSocketReadyState.Closing;\n      case WebSocket.CLOSED:\n        return WebSocketReadyState.Closed;\n    }\n  }\n}\n"]}