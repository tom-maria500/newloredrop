{"version":3,"file":"WebSocketAdapter.js","sourceRoot":"","sources":["../../src/websocketadapter/WebSocketAdapter.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport WebSocketReadyState from './WebSocketReadyState';\n\n/** Adapter for WebSocket implementations */\n\nexport default interface WebSocketAdapter {\n  /**\n   * Opens a WebSocket connection to the URL with the given protocols.\n   *\n   * @param url URL to connect to\n   * @param protocols Protocols to send when establishing the connection\n   * @param isSignedUrl whether the URL is signed\n   */\n  create(url: string, protocols: string[], isSignedUrl?: boolean): void;\n\n  /**\n   * Sends a raw byte message.\n   *\n   * @param send byte or string message to send\n   * @returns Whether the data was queued for sending\n   */\n  send(message: Uint8Array | string): boolean;\n\n  /**\n   * Close the WebSocket connection.\n   */\n  close(code?: number, reason?: string): void;\n\n  /**\n   * Destroys internal reference to the WebSocket.\n   */\n  destroy(): void;\n\n  /**\n   * Add an event listener for one of the handler types.\n   *\n   * @param handler The handler being assigned.\n   * @param eventListener The event listener to add.\n   */\n  addEventListener(handler: string, eventListener: EventListener): void;\n\n  /**\n   * Remove an event listener for one of the handler types.\n   *\n   * @param handler The handler being assigned.\n   * @param eventListener The event listener to add.\n   */\n  removeEventListener?(handler: string, eventListener: EventListener): void;\n\n  /**\n   * Returns the ready state.\n   *\n   * @returns The state of the WebSocketConnection\n   */\n  readyState(): WebSocketReadyState;\n}\n"]}