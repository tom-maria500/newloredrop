"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DefaultBrowserBehavior_1 = __importDefault(require("../browserbehavior/DefaultBrowserBehavior"));
/**
 * AudioProfile defines settings for audio quality.
 */
class AudioProfile {
    /**
     * Constructs an AudioProfile. If no audio bitrate is supplied then the AudioProfile
     * does not adjust the browser's internal bitrate setting. If the enableAudioRedundancy
     * flag is not supplied then the AudioProfile enables it by default.
     */
    constructor(audioBitrateBps = null, enableAudioRedundancy = true) {
        this.audioBitrateBps = audioBitrateBps;
        this.enableAudioRedundancy =
            new DefaultBrowserBehavior_1.default().supportsAudioRedundancy() && enableAudioRedundancy;
    }
    /**
     * Creates an AudioProfile optimized for fullband speech (40 kbit/s mono).
     */
    static fullbandSpeechMono(enableAudioRedundancy = true) {
        return new AudioProfile(40000, enableAudioRedundancy);
    }
    /**
     * Creates an AudioProfile optimized for fullband music (64 kbit/s mono).
     */
    static fullbandMusicMono(enableAudioRedundancy = true) {
        return new AudioProfile(64000, enableAudioRedundancy);
    }
    /**
     * Creates an AudioProfile optimized for fullband stereo music (128 kbit/s stereo).
     */
    static fullbandMusicStereo(enableAudioRedundancy = true) {
        return new AudioProfile(128000, enableAudioRedundancy);
    }
    /**
     * Returns true if audio profile is set to stereo mode.
     */
    isStereo() {
        return this.audioBitrateBps === 128000;
    }
    /**
     * Returns true if redundancy is supported and enabled.
     */
    hasRedundancyEnabled() {
        return this.enableAudioRedundancy;
    }
}
exports.default = AudioProfile;
//# sourceMappingURL=AudioProfile.js.map