{"version":3,"file":"AudioProfile.js","sourceRoot":"","sources":["../../src/audioprofile/AudioProfile.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;AAEtC,uGAA+E;AAE/E;;GAEG;AACH,MAAqB,YAAY;IAiB/B;;;;OAIG;IACH,YAAY,kBAAiC,IAAI,EAAE,wBAAiC,IAAI;QACtF,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,qBAAqB;YACxB,IAAI,gCAAsB,EAAE,CAAC,uBAAuB,EAAE,IAAI,qBAAqB,CAAC;IACpF,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,kBAAkB,CAAC,wBAAiC,IAAI;QAC7D,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,iBAAiB,CAAC,wBAAiC,IAAI;QAC5D,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,mBAAmB,CAAC,wBAAiC,IAAI;QAC9D,OAAO,IAAI,YAAY,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,eAAe,KAAK,MAAM,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;CACF;AA9DD,+BA8DC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport DefaultBrowserBehavior from '../browserbehavior/DefaultBrowserBehavior';\n\n/**\n * AudioProfile defines settings for audio quality.\n */\nexport default class AudioProfile {\n  /**\n   * Allows a builder to configure the opus encoder bitrate to\n   * be used for the session to send audio. If null, the browser\n   * internally sets a default bitrate.\n   */\n  audioBitrateBps: number | null;\n\n  /**\n   * Allows a builder to enable audio redundancy at the start of\n   * the session. If enabled (and browser supports redundancy),\n   * the amount of redundancy varies based on the amount of packet loss\n   * detected in the client to server direction. This can consume upto\n   * 3x the configured audio bitrate in high packet loss scenarios (> 20%).\n   */\n  private enableAudioRedundancy: boolean;\n\n  /**\n   * Constructs an AudioProfile. If no audio bitrate is supplied then the AudioProfile\n   * does not adjust the browser's internal bitrate setting. If the enableAudioRedundancy\n   * flag is not supplied then the AudioProfile enables it by default.\n   */\n  constructor(audioBitrateBps: number | null = null, enableAudioRedundancy: boolean = true) {\n    this.audioBitrateBps = audioBitrateBps;\n    this.enableAudioRedundancy =\n      new DefaultBrowserBehavior().supportsAudioRedundancy() && enableAudioRedundancy;\n  }\n\n  /**\n   * Creates an AudioProfile optimized for fullband speech (40 kbit/s mono).\n   */\n  static fullbandSpeechMono(enableAudioRedundancy: boolean = true): AudioProfile {\n    return new AudioProfile(40000, enableAudioRedundancy);\n  }\n\n  /**\n   * Creates an AudioProfile optimized for fullband music (64 kbit/s mono).\n   */\n  static fullbandMusicMono(enableAudioRedundancy: boolean = true): AudioProfile {\n    return new AudioProfile(64000, enableAudioRedundancy);\n  }\n\n  /**\n   * Creates an AudioProfile optimized for fullband stereo music (128 kbit/s stereo).\n   */\n  static fullbandMusicStereo(enableAudioRedundancy: boolean = true): AudioProfile {\n    return new AudioProfile(128000, enableAudioRedundancy);\n  }\n\n  /**\n   * Returns true if audio profile is set to stereo mode.\n   */\n  isStereo(): boolean {\n    return this.audioBitrateBps === 128000;\n  }\n\n  /**\n   * Returns true if redundancy is supported and enabled.\n   */\n  hasRedundancyEnabled(): boolean {\n    return this.enableAudioRedundancy;\n  }\n}\n"]}