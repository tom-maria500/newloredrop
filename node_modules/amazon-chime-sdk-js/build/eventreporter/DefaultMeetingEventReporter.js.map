{"version":3,"file":"DefaultMeetingEventReporter.js","sourceRoot":"","sources":["../../src/eventreporter/DefaultMeetingEventReporter.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;;;;;;;;;;;;AAEtC,4DAAwE;AAExE,qGAA6E;AAO7E,MAAqB,2BAA2B;IAgB9C,YAAY,2BAAwD,EAAE,MAAc;QAb5E,oBAAe,GAAG,KAAK,CAAC;QAExB,oBAAe,GAA0B;YAC/C,cAAc;YACd,eAAe;YACf,oBAAoB;YACpB,kBAAkB;YAClB,kBAAkB;YAClB,uBAAuB;YACvB,0BAA0B;SAC3B,CAAC;QACF,cAAS,GAAG,KAAK,CAAC;QAGhB,MAAM,EACJ,yBAAyB,EACzB,YAAY,EACZ,wBAAwB,GACzB,GAAG,2BAA2B,CAAC;QAChC,MAAM,EAAE,cAAc,EAAE,GAAG,yBAAyB,CAAC;QACrD,IAAI,CAAC,WAAW,GAAG,IAAI,iCAAuB,CAC5C,wBAAwB,EACxB,yBAAyB,EACzB,YAAY,EACZ,IAAI,CAAC,eAAe,EACpB,MAAM,CACP,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,KAAK;QACH,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,OAAO;SACR;QACD,IAAI;YACF,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC7B;QAAC,OAAO,KAAK,EAAE;YACd,0BAA0B;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,KAAK,EAAE,CAAC,CAAC;SACjF;IACH,CAAC;IAED,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,OAAO;SACR;QACD,IAAI;YACF,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B;QAAC,OAAO,KAAK,EAAE;YACd,0BAA0B;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,KAAK,EAAE,CAAC,CAAC;SACjF;IACH,CAAC;IAEK,WAAW,CACf,EAAU,EACV,IAAyB,EACzB,UAA+C;;YAE/C,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,iFAAiF,EAAE,KAAK,IAAI,KAAK,IAAI,CAAC,SAAS,CAC7G,UAAU,CACX,EAAE,CACJ,CAAC;YACF,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mDAAmD,IAAI,qDAAqD,CAC7G,CAAC;gBACF,OAAO;aACR;YACD,IAAI;gBACF,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,6EAA6E,CAC9E,CAAC;gBACF,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;aAC1D;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kDAAkD,KAAK,EAAE,CAAC,CAAC;aAC9E;QACH,CAAC;KAAA;IAEK,OAAO;;YACX,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,0BAA0B;YAC1B,IAAI,2BAAa,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBACnC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;aAC5B;YACD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC/B,CAAC;KAAA;CACF;AAlGD,8CAkGC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Destroyable, { isDestroyable } from '../destroyable/Destroyable';\nimport EventBuffer from '../eventbuffer/EventBuffer';\nimport InMemoryJSONEventBuffer from '../eventbuffer/InMemoryJSONEventBuffer';\nimport MeetingHistoryState from '../eventcontroller/MeetingHistoryState';\nimport EventIngestionConfiguration from '../eventingestionconfiguration/EventIngestionConfiguration';\nimport Logger from '../logger/Logger';\nimport EventData from './EventData';\nimport EventReporter from './EventReporter';\n\nexport default class DefaultMeetingEventReporter implements EventReporter, Destroyable {\n  private eventBuffer: EventBuffer<EventData>;\n  private logger: Logger;\n  private reportingEvents = false;\n  private eventsToIgnore: string[];\n  private importantEvents: MeetingHistoryState[] = [\n    'meetingEnded',\n    'meetingFailed',\n    'meetingStartFailed',\n    'audioInputFailed',\n    'videoInputFailed',\n    'meetingStartSucceeded',\n    'deviceLabelTriggerFailed',\n  ];\n  destroyed = false;\n\n  constructor(eventIngestionConfiguration: EventIngestionConfiguration, logger: Logger) {\n    const {\n      eventsClientConfiguration,\n      ingestionURL,\n      eventBufferConfiguration,\n    } = eventIngestionConfiguration;\n    const { eventsToIgnore } = eventsClientConfiguration;\n    this.eventBuffer = new InMemoryJSONEventBuffer(\n      eventBufferConfiguration,\n      eventsClientConfiguration,\n      ingestionURL,\n      this.importantEvents,\n      logger\n    );\n    this.logger = logger;\n    this.eventsToIgnore = eventsToIgnore;\n    this.start();\n  }\n\n  start(): void {\n    if (this.reportingEvents) {\n      return;\n    }\n    try {\n      this.eventBuffer.start();\n      this.logger.info('Event reporting started');\n      this.reportingEvents = true;\n    } catch (error) {\n      /* istanbul ignore next */\n      this.logger.error(`Event Reporting - Error starting the event buffer ${error}`);\n    }\n  }\n\n  stop(): void {\n    if (!this.reportingEvents) {\n      return;\n    }\n    try {\n      this.eventBuffer.stop();\n      this.logger.info('Event reporting stopped');\n      this.reportingEvents = false;\n    } catch (error) {\n      /* istanbul ignore next */\n      this.logger.error(`Event Reporting - Error stopping the event buffer ${error}`);\n    }\n  }\n\n  async reportEvent(\n    ts: number,\n    name: MeetingHistoryState,\n    attributes?: { [key: string]: string | number }\n  ): Promise<void> {\n    this.logger.debug(\n      `Event Reporting - DefaultMeetingEventReporter - event received in reportEvent ${ts}, ${name}, ${JSON.stringify(\n        attributes\n      )}`\n    );\n    if (this.eventsToIgnore.includes(name)) {\n      this.logger.debug(\n        `Event Reporting - DefaultMeetingEventReporter - ${name} event will be ignored as it is in events to ignore`\n      );\n      return;\n    }\n    try {\n      this.logger.debug(\n        `Event Reporting - DefaultMeetingEventReporter - adding item to event buffer`\n      );\n      await this.eventBuffer.addItem({ ts, name, attributes });\n    } catch (error) {\n      this.logger.error(`Event Reporting - Error adding event to buffer ${error}`);\n    }\n  }\n\n  async destroy(): Promise<void> {\n    this.destroyed = true;\n    this.stop();\n    /* istanbul ignore else */\n    if (isDestroyable(this.eventBuffer)) {\n      this.eventBuffer.destroy();\n    }\n    this.eventBuffer = undefined;\n  }\n}\n"]}