{"version":3,"file":"ActiveSpeakerDetectorFacade.js","sourceRoot":"","sources":["../../src/activespeakerdetector/ActiveSpeakerDetectorFacade.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ActiveSpeakerPolicy from '../activespeakerpolicy/ActiveSpeakerPolicy';\n\n/**\n * [[ActiveSpeakerDetectorFacade]] listens to the volume indicator updates from the [[RealtimeController]].\n *\n * When you are done using an `ActiveSpeakerDetectorFacade`, you should perform some\n * cleanup steps in order to avoid memory leaks:\n *\n * 1. Unsubscribe from listeners; e.g., from active speaker callbacks via\n *    {@link ActiveSpeakerDetectorFacade.unsubscribeFromActiveSpeakerDetector}.\n * 2. Drop your reference to the facade to allow it to be garbage collected.\n */\nexport default interface ActiveSpeakerDetectorFacade {\n  /*\n   * Starts the active speaker detector on the callback for the given policy.\n   */\n  subscribeToActiveSpeakerDetector(\n    policy: ActiveSpeakerPolicy,\n    callback: (activeSpeakers: string[]) => void,\n    scoresCallback?: (scores: { [attendeeId: string]: number }) => void,\n    scoresCallbackIntervalMs?: number\n  ): void;\n\n  /*\n   * Stops the active speaker detector callback from being called. It also stops the\n   * optional scores callback.\n   */\n  unsubscribeFromActiveSpeakerDetector(callback: (activeSpeakers: string[]) => void): void;\n}\n"]}