{"version":3,"file":"DefaultActiveSpeakerDetector.js","sourceRoot":"","sources":["../../src/activespeakerdetector/DefaultActiveSpeakerDetector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport ActiveSpeakerPolicy from '../activespeakerpolicy/ActiveSpeakerPolicy';\nimport type { Destroyable } from '../destroyable/Destroyable';\nimport RealtimeController from '../realtimecontroller/RealtimeController';\nimport IntervalScheduler from '../scheduler/IntervalScheduler';\nimport ActiveSpeakerDetector from './ActiveSpeakerDetector';\n\n/**\n * Implements the DefaultActiveSpeakerDetector with the [[ActiveSpeakerPolicy]]\n */\ntype DetectorCallback = (attendeeIds: string[]) => void;\ntype DetectorHandler = (attendeeId: string, present: boolean) => void;\n\nexport default class DefaultActiveSpeakerDetector implements ActiveSpeakerDetector, Destroyable {\n  private speakerScores: { [attendeeId: string]: number } = {};\n  private speakerMuteState: { [attendeeId: string]: boolean } = {};\n\n  private activeSpeakers: string[] | undefined;\n\n  private detectorCallbackToHandler: Map<DetectorCallback, DetectorHandler> = new Map<\n    DetectorCallback,\n    DetectorHandler\n  >();\n  private detectorCallbackToScoresTimer: Map<DetectorCallback, IntervalScheduler> = new Map<\n    DetectorCallback,\n    IntervalScheduler\n  >();\n  private detectorCallbackToActivityTimer: Map<DetectorCallback, IntervalScheduler> = new Map<\n    DetectorCallback,\n    IntervalScheduler\n  >();\n  private hasBandwidthPriority = false;\n\n  private mostRecentUpdateTimestamp: { [attendeeId: string]: number } = {};\n\n  constructor(\n    private realtimeController: RealtimeController,\n    private selfAttendeeId: string,\n    private hasBandwidthPriorityCallback: (hasBandwidthPriority: boolean) => void,\n    private waitIntervalMs: number = 1000,\n    private updateIntervalMs: number = 200\n  ) {}\n\n  private needUpdate(attendeeId: string): boolean {\n    if (!this.activeSpeakers) {\n      return true;\n    }\n    return (\n      (this.speakerScores[attendeeId] === 0 && this.activeSpeakers.includes(attendeeId)) ||\n      (this.speakerScores[attendeeId] > 0 && !this.activeSpeakers.includes(attendeeId))\n    );\n  }\n\n  private updateActiveSpeakers(\n    policy: ActiveSpeakerPolicy,\n    callback: DetectorCallback,\n    attendeeId: string\n  ): void {\n    if (!this.needUpdate(attendeeId)) {\n      return;\n    }\n    const sortedSpeakers: { attendeeId: string; activeScore: number }[] = [];\n\n    const attendeeIds = Object.keys(this.speakerScores);\n    for (let i = 0; i < attendeeIds.length; i++) {\n      const attendeeId = attendeeIds[i];\n      sortedSpeakers.push({ attendeeId: attendeeId, activeScore: this.speakerScores[attendeeId] });\n    }\n\n    const sortedAttendeeIds = sortedSpeakers\n      .sort((s1, s2) => s2.activeScore - s1.activeScore)\n      .filter(function (s) {\n        return s.activeScore > 0;\n      })\n      .map(function (s) {\n        return s.attendeeId;\n      });\n    this.activeSpeakers = sortedAttendeeIds;\n    callback(sortedAttendeeIds);\n    const selfIsActive =\n      sortedAttendeeIds.length > 0 && sortedAttendeeIds[0] === this.selfAttendeeId;\n    const hasBandwidthPriority =\n      selfIsActive && policy.prioritizeVideoSendBandwidthForActiveSpeaker();\n    const hasBandwidthPriorityDidChange = this.hasBandwidthPriority !== hasBandwidthPriority;\n    if (hasBandwidthPriorityDidChange) {\n      this.hasBandwidthPriority = hasBandwidthPriority;\n      this.hasBandwidthPriorityCallback(hasBandwidthPriority);\n    }\n  }\n\n  private updateScore(\n    policy: ActiveSpeakerPolicy,\n    callback: DetectorCallback,\n    attendeeId: string,\n    volume: number | null,\n    muted: boolean | null\n  ): void {\n    const activeScore = policy.calculateScore(attendeeId, volume, muted);\n    if (this.speakerScores[attendeeId] !== activeScore) {\n      this.speakerScores[attendeeId] = activeScore;\n      this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n      this.updateActiveSpeakers(policy, callback, attendeeId);\n    }\n  }\n\n  subscribe(\n    policy: ActiveSpeakerPolicy,\n    callback: DetectorCallback,\n    scoresCallback?: (scores: { [attendeeId: string]: number }) => void,\n    scoresCallbackIntervalMs?: number\n  ): void {\n    const handler = (attendeeId: string, present: boolean): void => {\n      if (!present) {\n        this.speakerScores[attendeeId] = 0;\n        this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n        this.updateActiveSpeakers(policy, callback, attendeeId);\n        return;\n      }\n      this.realtimeController.realtimeSubscribeToVolumeIndicator(\n        attendeeId,\n        (\n          attendeeId: string,\n          volume: number | null,\n          muted: boolean | null,\n          _signalStrength: number | null\n        ) => {\n          this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n          if (muted !== null) {\n            this.speakerMuteState[attendeeId] = muted;\n          }\n          this.updateScore(policy, callback, attendeeId, volume, muted);\n        }\n      );\n    };\n    this.detectorCallbackToHandler.set(callback, handler);\n\n    const activityTimer = new IntervalScheduler(this.updateIntervalMs);\n    activityTimer.start(() => {\n      for (const attendeeId in this.speakerScores) {\n        if (Date.now() - this.mostRecentUpdateTimestamp[attendeeId] > this.waitIntervalMs) {\n          this.updateScore(policy, callback, attendeeId, 0, this.speakerMuteState[attendeeId]);\n        }\n      }\n    });\n    this.detectorCallbackToActivityTimer.set(callback, activityTimer);\n\n    if (scoresCallback && scoresCallbackIntervalMs) {\n      const scoresTimer = new IntervalScheduler(scoresCallbackIntervalMs);\n      scoresTimer.start(() => {\n        scoresCallback(this.speakerScores);\n      });\n      this.detectorCallbackToScoresTimer.set(callback, scoresTimer);\n    }\n    this.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);\n  }\n\n  unsubscribe(callback: DetectorCallback): void {\n    const handler = this.detectorCallbackToHandler.get(callback);\n    this.detectorCallbackToHandler.delete(callback);\n    if (handler) {\n      this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n    }\n\n    const activityTimer = this.detectorCallbackToActivityTimer.get(callback);\n    if (activityTimer) {\n      activityTimer.stop();\n      this.detectorCallbackToActivityTimer.delete(callback);\n    }\n\n    const scoresTimer = this.detectorCallbackToScoresTimer.get(callback);\n    if (scoresTimer) {\n      scoresTimer.stop();\n      this.detectorCallbackToHandler.delete(callback);\n    }\n  }\n\n  async destroy(): Promise<void> {\n    for (const handler of this.detectorCallbackToHandler.values()) {\n      this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n    }\n    for (const activityTimer of this.detectorCallbackToActivityTimer.values()) {\n      activityTimer.stop();\n    }\n    for (const scoresTimer of this.detectorCallbackToScoresTimer.values()) {\n      scoresTimer.stop();\n    }\n\n    this.detectorCallbackToHandler.clear();\n    this.detectorCallbackToActivityTimer.clear();\n    this.detectorCallbackToScoresTimer.clear();\n  }\n}\n"]}