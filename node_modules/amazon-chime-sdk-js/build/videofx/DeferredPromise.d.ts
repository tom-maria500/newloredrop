/**
 * [[DeferredPromise]] Is a wrapper around a javascript promise that
 * will allow us to resolve and reject the promise from outside of the
 * promise's executor block.
 */
export declare class DeferredPromise<T> {
    private promise;
    private reject;
    private resolve;
    constructor();
    /**
     * Get the promise associated with the DeferredPromise.
     * @returns Promise<T>
     */
    getPromise(): Promise<T>;
    /**
     * Resolve this.promise.
     */
    resolvePromise(resolveParameter?: T): void;
    /**
     * Resolve this.promise with a resolveParameter. Then,
     * replace the resolved promise with a new promise.
     */
    resolveAndReplacePromise(resolveParameter?: T): void;
    /**
     * Reject this.promise.
     */
    rejectPromise(rejectError: Error): void;
    /**
     * Reject this.promise with a reject parameter. Then,
     * replace the rejected promise with a new promise.
     */
    rejectAndReplacePromise(rejectError: Error): void;
}
