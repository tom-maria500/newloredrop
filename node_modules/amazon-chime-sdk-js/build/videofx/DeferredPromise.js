"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeferredPromise = void 0;
/**
 * [[DeferredPromise]] Is a wrapper around a javascript promise that
 * will allow us to resolve and reject the promise from outside of the
 * promise's executor block.
 */
class DeferredPromise {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Get the promise associated with the DeferredPromise.
     * @returns Promise<T>
     */
    getPromise() {
        return this.promise;
    }
    /**
     * Resolve this.promise.
     */
    resolvePromise(resolveParameter) {
        this.resolve(resolveParameter);
    }
    /**
     * Resolve this.promise with a resolveParameter. Then,
     * replace the resolved promise with a new promise.
     */
    resolveAndReplacePromise(resolveParameter) {
        this.resolve(resolveParameter);
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Reject this.promise.
     */
    rejectPromise(rejectError) {
        this.reject(rejectError);
    }
    /**
     * Reject this.promise with a reject parameter. Then,
     * replace the rejected promise with a new promise.
     */
    rejectAndReplacePromise(rejectError) {
        this.reject(rejectError);
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
exports.DeferredPromise = DeferredPromise;
//# sourceMappingURL=DeferredPromise.js.map