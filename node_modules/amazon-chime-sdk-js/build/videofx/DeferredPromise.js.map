{"version":3,"file":"DeferredPromise.js","sourceRoot":"","sources":["../../src/videofx/DeferredPromise.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC;;;;GAIG;AACH,MAAa,eAAe;IAK1B;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,gBAAoB;QACjC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,wBAAwB,CAAC,gBAAoB;QAC3C,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,WAAkB;QAC9B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,uBAAuB,CAAC,WAAkB;QACxC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAzDD,0CAyDC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * [[DeferredPromise]] Is a wrapper around a javascript promise that\n * will allow us to resolve and reject the promise from outside of the\n * promise's executor block.\n */\nexport class DeferredPromise<T> {\n  private promise: Promise<T>;\n  private reject: Function;\n  private resolve: Function;\n\n  constructor() {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  /**\n   * Get the promise associated with the DeferredPromise.\n   * @returns Promise<T>\n   */\n  getPromise(): Promise<T> {\n    return this.promise;\n  }\n\n  /**\n   * Resolve this.promise.\n   */\n  resolvePromise(resolveParameter?: T): void {\n    this.resolve(resolveParameter);\n  }\n\n  /**\n   * Resolve this.promise with a resolveParameter. Then,\n   * replace the resolved promise with a new promise.\n   */\n  resolveAndReplacePromise(resolveParameter?: T): void {\n    this.resolve(resolveParameter);\n    this.promise = new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  /**\n   * Reject this.promise.\n   */\n  rejectPromise(rejectError: Error): void {\n    this.reject(rejectError);\n  }\n\n  /**\n   * Reject this.promise with a reject parameter. Then,\n   * replace the rejected promise with a new promise.\n   */\n  rejectAndReplacePromise(rejectError: Error): void {\n    this.reject(rejectError);\n    this.promise = new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n"]}