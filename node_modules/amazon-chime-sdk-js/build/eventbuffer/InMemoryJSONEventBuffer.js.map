{"version":3,"file":"InMemoryJSONEventBuffer.js","sourceRoot":"","sources":["../../src/eventbuffer/InMemoryJSONEventBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Backoff from '../backoff/Backoff';\nimport FullJitterBackoff from '../backoff/FullJitterBackoff';\nimport Destroyable from '../destroyable/Destroyable';\nimport EventBufferConfiguration from '../eventbufferconfiguration/EventBufferConfiguration';\nimport MeetingHistoryState from '../eventcontroller/MeetingHistoryState';\nimport EventData from '../eventreporter/EventData';\nimport EventsIngestionMetadata from '../eventreporter/EventsIngestionMetadata';\nimport EventsClientConfiguration from '../eventsclientconfiguration/EventsClientConfiguration';\nimport Logger from '../logger/Logger';\nimport IntervalScheduler from '../scheduler/IntervalScheduler';\nimport DefaultUserAgentParser from '../useragentparser/DefaultUserAgentParser';\nimport { wait } from '../utils/Utils';\nimport EventBuffer from './EventBuffer';\nimport JSONIngestionEvent from './JSONIngestionEvent';\nimport JSONIngestionPayloadItem from './JSONIngestionPayloadItem';\nimport JSONIngestionRecord from './JSONIngestionRecord';\n\n/**\n * [[InMemoryJSONEventBuffer]] is an in-memory implementation for buffering and\n * sending events. It buffers events based on number of events and its size whichever reaches\n * first. Events are sent out at an scheduled interval where important events are sent immediately.\n * It also retries sending events if failed upto the retry count limit. It implements\n * beaconing mechanism based on 'pagehide' and 'visibilitychange' to beacon all events as a last attempt.\n */\nexport default class InMemoryJSONEventBuffer implements EventBuffer<EventData>, Destroyable {\n  private static readonly SENDING_FAILURE_CODES = new Set([\n    408, // Request timeout.\n    429, // Too many requests.\n    500, // Internal server error.\n    502, // Bad Gateway.\n    503, // Service Unavailable.\n    504, // Gateway Timeout.\n  ]);\n  private static readonly RETRY_FIXED_BACKOFF_WAIT_MS = 0;\n  private static readonly RETRY_SHORT_BACKOFF_MS = 1000;\n  private static readonly RETRY_LONG_BACKOFF_MS = 15000;\n  private static readonly MAX_PAYLOAD_ITEMS = 2;\n  private static readonly MAX_ITEM_SIZE_BYTES_ALLOWED = 3000;\n  private maxBufferCapacityBytes: number;\n  private totalBufferItems: number;\n  private buffer: JSONIngestionEvent[] = [];\n  private bufferSize = 0;\n  private maxBufferItemCapacityBytes = 0;\n  private currentIngestionEvent: JSONIngestionEvent;\n  private ingestionEventSize = 0;\n  private logger: Logger;\n  private flushIntervalMs: number = 0;\n  private flushSize: number = 0;\n  private intervalScheduler: IntervalScheduler;\n  private failedIngestionEvents: JSONIngestionEvent[] = [];\n  private retryCountLimit = 15;\n  private ingestionURL: string;\n  private lock: boolean = false;\n  private metadata: EventsIngestionMetadata;\n  private type: string;\n  private v: number;\n  private beaconEventListener: undefined | ((e: Event) => void);\n  private cancellableEvents = new Map<number, JSONIngestionEvent[]>();\n  private importantEvents: Set<MeetingHistoryState>;\n  private authenticationToken: string;\n  private attributesToFilter = ['externalUserId', 'externalMeetingId', 'timestampMs'];\n\n  constructor(\n    eventBufferConfiguration: EventBufferConfiguration,\n    eventsClientConfiguration: EventsClientConfiguration,\n    ingestionURL: string,\n    importantEvents: MeetingHistoryState[],\n    logger: Logger\n  ) {\n    const userAgentParserResult = new DefaultUserAgentParser(logger).getParserResult();\n    const { browserMajorVersion: _browserMajorVersion, ...clientMetadata } = userAgentParserResult;\n    const { type, v, ...rest } = eventsClientConfiguration.toJSON();\n    this.authenticationToken = eventsClientConfiguration.getAuthenticationToken();\n    this.metadata = { ...clientMetadata, ...rest };\n    Object.keys(this.metadata).forEach(key => this.attributesToFilter.push(key));\n    this.type = type;\n    this.v = v;\n    this.ingestionURL = ingestionURL;\n    this.logger = logger;\n    this.importantEvents = new Set<MeetingHistoryState>(importantEvents);\n    const {\n      maxBufferCapacityKb,\n      totalBufferItems,\n      flushSize,\n      flushIntervalMs,\n      retryCountLimit,\n    } = eventBufferConfiguration;\n    this.maxBufferCapacityBytes = maxBufferCapacityKb * 1024;\n    this.totalBufferItems = totalBufferItems;\n    this.maxBufferItemCapacityBytes = Math.round(this.maxBufferCapacityBytes / totalBufferItems);\n    this.flushIntervalMs = flushIntervalMs;\n    this.flushSize = flushSize;\n    this.retryCountLimit = retryCountLimit;\n    this.currentIngestionEvent = this.initializeAndGetCurrentIngestionEvent();\n    this.beaconEventListener = (e: Event) => this.beaconEventHandler(e);\n    this.addEventListeners();\n  }\n\n  private addEventListeners(): void {\n    if (\n      !this.beaconEventListener ||\n      !('window' in global) ||\n      !window.addEventListener ||\n      !('document' in global) ||\n      !document.addEventListener\n    ) {\n      return;\n    }\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - addEventListeners - adding pagehide and visibility change event listeners`\n    );\n    window.addEventListener('pagehide', this.beaconEventListener);\n    document.addEventListener('visibilitychange', this.beaconEventListener);\n  }\n\n  private beaconEventHandler(e: Event): void {\n    /* istanbul ignore else */\n    if (\n      (e.type === 'visibilitychange' && document.visibilityState === 'hidden') ||\n      e.type === 'pagehide'\n    ) {\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - beaconEventHandler is triggered calling sendBeacon`\n      );\n      this.sendBeacon();\n    }\n  }\n\n  private removeEventListeners(): void {\n    if (\n      !this.beaconEventListener ||\n      !('window' in global) ||\n      !window.removeEventListener ||\n      !('document' in global) ||\n      !document.removeEventListener\n    ) {\n      return;\n    }\n    window.removeEventListener('pagehide', this.beaconEventListener);\n    document.removeEventListener('visibilitychange', this.beaconEventListener);\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - removeEventListeners - removing pagehide and visibility change event listeners`\n    );\n  }\n\n  start(): void {\n    this.removeEventListeners();\n    this.addEventListeners();\n    this.intervalScheduler?.stop();\n    this.intervalScheduler = new IntervalScheduler(this.flushIntervalMs);\n    this.intervalScheduler.start(() => this.sendEvents());\n  }\n\n  stop(): void {\n    this.intervalScheduler?.stop();\n    this.intervalScheduler = undefined;\n    this.sendBeacon();\n    this.removeEventListeners();\n  }\n\n  async addItem(item: EventData): Promise<void> {\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - addItem - received event ${JSON.stringify(item)}`\n    );\n    const { name, ts, attributes } = item;\n    // Filter out PII and redundant attributes.\n    const filteredAttributes =\n      attributes && this.filterAttributes(attributes, this.attributesToFilter);\n\n    const event = { name, ts, ...filteredAttributes };\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - addItem - event after filtering attributes ${JSON.stringify(\n        event\n      )}`\n    );\n    const size = this.getSize(event);\n    if (size > InMemoryJSONEventBuffer.MAX_ITEM_SIZE_BYTES_ALLOWED) {\n      throw new Error(\n        `Event Reporting - Item to be added has size ${size} bytes. Item cannot exceed max item size allowed of ${InMemoryJSONEventBuffer.MAX_ITEM_SIZE_BYTES_ALLOWED} bytes.`\n      );\n    }\n    if (this.importantEvents.has(name)) {\n      // Send immediate events and asyncly retry.\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - addItem - sending important event ${JSON.stringify(\n          event\n        )}`\n      );\n      this.sendEventImmediately({ name, ts, attributes: filteredAttributes });\n      return;\n    }\n\n    if (this.isFull()) {\n      this.logger.warn('Event Reporting - Event buffer is full');\n      throw new Error('Buffer full');\n    }\n    this.currentIngestionEvent.payloads.push(event);\n    this.ingestionEventSize += size;\n    if (this.bufferItemThresholdReached(size)) {\n      const currentEvent = this.deepCopyCurrentIngestionEvent(this.currentIngestionEvent);\n      this.buffer.push(currentEvent);\n      this.bufferSize += this.ingestionEventSize;\n      this.currentIngestionEvent = this.initializeAndGetCurrentIngestionEvent();\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - addItem - buffer item threshold reached updated buffer ${JSON.stringify(\n          this.buffer\n        )}`\n      );\n    }\n  }\n\n  private filterAttributes(\n    attributes: { [key: string]: string | number },\n    attributesToFilter: string[]\n  ): { [key: string]: string | number } {\n    const attributesToFilterSet = new Set<string>(attributesToFilter);\n    const keysToFilterOut = Object.keys(attributes).filter(key => attributesToFilterSet.has(key));\n    keysToFilterOut.forEach(key => delete attributes[key]);\n    return attributes;\n  }\n\n  private initializeAndGetCurrentIngestionEvent(): JSONIngestionEvent {\n    const bufferItem = {\n      type: this.type,\n      v: this.v,\n      payloads: [] as JSONIngestionPayloadItem[],\n    };\n    this.ingestionEventSize = this.getSize(bufferItem);\n    return bufferItem;\n  }\n\n  private deepCopyCurrentIngestionEvent = (event: JSONIngestionEvent): JSONIngestionEvent => {\n    const newEvent: JSONIngestionEvent = {\n      type: event.type,\n      v: event.v,\n      payloads: [...event.payloads],\n    };\n    return newEvent;\n  };\n\n  private bufferItemThresholdReached(size: number): boolean {\n    return (\n      size + this.ingestionEventSize >= this.maxBufferItemCapacityBytes ||\n      this.currentIngestionEvent.payloads.length === InMemoryJSONEventBuffer.MAX_PAYLOAD_ITEMS\n    );\n  }\n\n  private getSize(item: object | string | number): number {\n    let bytes = 0;\n    if (typeof item === 'object') {\n      for (const [key, value] of Object.entries(item)) {\n        bytes += this.getPrimitiveSize(key);\n        bytes += this.getSize(value);\n      }\n    } else {\n      bytes += this.getPrimitiveSize(item);\n    }\n    return bytes;\n  }\n\n  private getPrimitiveSize(item: string | number): number {\n    let bytes = 0;\n    /* istanbul ignore else */\n    if (typeof item === 'string') {\n      bytes += item.length * 2;\n    } else if (typeof item === 'number') {\n      bytes += 8;\n    }\n    return bytes;\n  }\n\n  private isFull(): boolean {\n    return (\n      this.bufferSize === this.maxBufferCapacityBytes ||\n      this.buffer.length === this.totalBufferItems\n    );\n  }\n\n  private isEmpty(): boolean {\n    return this.buffer.length === 0 || this.bufferSize === 0;\n  }\n\n  private getItems(end: number, start: number = 0): JSONIngestionEvent[] {\n    if (this.isEmpty()) {\n      return [];\n    }\n    end = Math.min(this.buffer.length, end + 1);\n    const items = this.buffer.splice(start, end);\n    return items;\n  }\n\n  private sendEvents = async (): Promise<void> => {\n    if (this.lock) {\n      return;\n    }\n    const batch: JSONIngestionEvent[] = this.getItems(this.flushSize);\n    if (batch.length === 0) {\n      return;\n    }\n    this.lock = true;\n    const body = this.makeRequestBody(batch);\n    let failed = false;\n\n    // If a page re-directs, in Safari and Chrome, the network\n    // request shows cancelled but the data reaches the ingestion endpoint.\n    // In Firefox, the request errors out with 'NS_BINDING_ABORT' state. Hence, add the event\n    // to cancellable events to try with `sendBeacon` lastly.\n    const timestamp = Date.now();\n    if (this.metadata.browserName.toLowerCase() === 'firefox') {\n      this.cancellableEvents.set(timestamp, batch);\n    }\n\n    try {\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - sendEvents - sending body ${body}`\n      );\n      const response = await this.send(body);\n      this.cancellableEvents.delete(timestamp);\n      if (!response.ok) {\n        this.logger.error(\n          `Event Reporting - InMemoryJSONEventBuffer - sendEvents - Failed to send events ${body} with response status ${response.status}`\n        );\n        failed = true;\n      } else {\n        try {\n          const data = await response.json();\n          this.logger.debug(\n            `Event Reporting - InMemoryJSONEventBuffer - sendEvents - send successful events: ${body} message: ${JSON.stringify(\n              data\n            )}`\n          );\n        } catch (err) {\n          /* istanbul ignore next */\n          this.logger.warn(\n            `Event Reporting - InMemoryJSONEventBuffer - sendEvents error reading OK response ${err} for events ${body}`\n          );\n        }\n      }\n    } catch (error) {\n      failed = true;\n      this.logger.warn(\n        `Event Reporting - InMemoryJSONEventBuffer - sendEvents - Error in sending events ${body} to the ingestion endpoint ${error}`\n      );\n    } finally {\n      this.lock = false;\n    }\n\n    if (failed) {\n      this.cancellableEvents.delete(timestamp);\n      this.failedIngestionEvents.push(...batch);\n    }\n  };\n\n  private makeBeaconRequestBody(batchEvents: JSONIngestionEvent[]): string {\n    const ingestionRecord: JSONIngestionRecord = {\n      metadata: this.metadata,\n      events: batchEvents,\n      authorization: this.authenticationToken,\n    };\n    return JSON.stringify(ingestionRecord);\n  }\n\n  private makeRequestBody(batchEvents: JSONIngestionEvent[]): string {\n    const ingestionRecord: JSONIngestionRecord = {\n      metadata: this.metadata,\n      events: batchEvents,\n    };\n    return JSON.stringify(ingestionRecord);\n  }\n\n  private async sendEventImmediately(item: EventData): Promise<void> {\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - sendEventImmediately - important event received ${JSON.stringify(\n        item\n      )}`\n    );\n    const { name, ts, attributes } = item;\n    const event: JSONIngestionEvent = {\n      type: this.type,\n      v: this.v,\n      payloads: [\n        {\n          name,\n          ts,\n          ...attributes,\n        },\n      ],\n    };\n    let failed = false;\n    let response: Response = null;\n    const body = this.makeRequestBody([event]);\n    try {\n      response = await this.send(body);\n      if (response.ok) {\n        try {\n          const data = await response.json();\n          this.logger.debug(\n            `Event Reporting - InMemoryJSONEventBuffer - sendEventImmediately - send successful event: ${body}, message: ${JSON.stringify(\n              data\n            )}`\n          );\n        } catch (err) {\n          /* istanbul ignore next */\n          this.logger.warn(\n            `Event Reporting - InMemoryJSONEventBuffer - sendEventImmediately - Error reading OK response ${err} for event ${body}`\n          );\n        }\n        return;\n      } else {\n        this.logger.error(\n          `Event Reporting - InMemoryJSONEventBuffer - sendEventImmediately - Failed to send an important event ${body} with response status ${response.status}`\n        );\n        failed = true;\n      }\n    } catch (error) {\n      this.logger.warn(\n        `Event Reporting - There may be a failure in sending an important event ${body} to the ingestion endpoint ${error}.`\n      );\n      failed = true;\n      try {\n        /**\n         * Important events like meetingEnded, meetingStartFailed may result into page-redirects.\n         * In such a case, Firefox aborts the fetch request with 'NS_BINDING_ABORT' state.\n         * Chrome and Safari show fetch request as cancelled and the fetch failure is catched, but,\n         * events appear at ingestion backend. Chrome and Safari behavior is unreliable, but Firefox consistently fails,\n         * hence, we beacon data as a last resort when using Firefox.\n         * During the page-redirect, we do not have access to check fetch's response to handle Chrome and Safari behavior,\n         * hence, event ingestion may fail.\n         *\n         */\n        if (this.metadata.browserName.toLowerCase() === 'firefox') {\n          const body = this.makeBeaconRequestBody([event]);\n          this.logger.debug(\n            `Event Reporting - InMemoryJSONEventBuffer - sendEventImmediately - beaconing data out ${body}`\n          );\n          if (!navigator.sendBeacon(`${this.ingestionURL}?beacon=1`, body)) {\n            failed = true;\n          } else {\n            failed = false;\n          }\n        }\n      } catch (error) {\n        this.logger.warn(`Event Reporting - Error sending beacon for an important event ${body}`);\n        failed = true;\n      }\n    }\n\n    /* istanbul ignore else */\n    if (failed) {\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - sendEventImmediately - pushing to failed events ${body}`\n      );\n      this.failedIngestionEvents.push(event);\n    }\n  }\n\n  private async send(data: string): Promise<Response> {\n    const backoff: Backoff = new FullJitterBackoff(\n      InMemoryJSONEventBuffer.RETRY_FIXED_BACKOFF_WAIT_MS,\n      InMemoryJSONEventBuffer.RETRY_SHORT_BACKOFF_MS,\n      InMemoryJSONEventBuffer.RETRY_LONG_BACKOFF_MS\n    );\n    try {\n      let retryCount = 0;\n      while (retryCount < this.retryCountLimit) {\n        const response = await fetch(this.ingestionURL, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${this.authenticationToken}`,\n          },\n          body: data,\n        });\n        if (response.ok || !InMemoryJSONEventBuffer.SENDING_FAILURE_CODES.has(response.status)) {\n          return response;\n        } else {\n          this.logger.warn(\n            `Will retry sending failure for ${data} due to status code ${response.status}.`\n          );\n          retryCount++;\n          /* istanbul ignore else */\n          if (retryCount < this.retryCountLimit) {\n            const backoffTime = backoff.nextBackoffAmountMs();\n            await wait(backoffTime);\n          }\n        }\n      }\n      /* istanbul ignore else */\n      if (retryCount === this.retryCountLimit) {\n        throw new Error(`Retry count limit reached for ${data}`);\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async sendBeacon(): Promise<void> {\n    // Any pending events from buffer.\n    const events = this.buffer;\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - sendBeacon - clearing out buffer events ${JSON.stringify(\n        events\n      )}`\n    );\n    this.buffer = [];\n    // Any pending event in current ingestion event.\n    if (this.currentIngestionEvent.payloads.length > 0) {\n      const clearCurrenIngestionEvent = this.deepCopyCurrentIngestionEvent(\n        this.currentIngestionEvent\n      );\n      events.push(clearCurrenIngestionEvent);\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - sendBeacon - clearing out current ingestion event ${JSON.stringify(\n          clearCurrenIngestionEvent\n        )}`\n      );\n      this.currentIngestionEvent = this.initializeAndGetCurrentIngestionEvent();\n    }\n\n    // Any failed ingestion events which were sent before.\n    if (this.failedIngestionEvents.length > 0) {\n      const failedRecordsCopy = this.failedIngestionEvents.map(record =>\n        this.deepCopyCurrentIngestionEvent(record)\n      );\n      events.push(...failedRecordsCopy);\n      this.logger.debug(\n        `Event Reporting - InMemoryJSONEventBuffer - sendBeacon - clearing out any failed ingestion event ${JSON.stringify(\n          failedRecordsCopy\n        )}`\n      );\n      this.failedIngestionEvents = [];\n    }\n\n    // Any cancelled requests due to page-redirects.\n    if (this.cancellableEvents.size > 0) {\n      this.cancellableEvents.forEach(value => {\n        events.push(...value);\n        this.logger.debug(\n          `Event Reporting - InMemoryJSONEventBuffer - sendBeacon - clearing out each cancellable event ${JSON.stringify(\n            value\n          )}`\n        );\n      });\n      this.cancellableEvents.clear();\n    }\n\n    if (events.length === 0) {\n      return;\n    }\n    const beaconData = this.makeBeaconRequestBody(events);\n    this.logger.debug(\n      `Event Reporting - InMemoryJSONEventBuffer - sendBeacon - beacon data to send ${beaconData}`\n    );\n    try {\n      /* istanbul ignore else */\n      if (!navigator.sendBeacon(`${this.ingestionURL}?beacon=1`, beaconData)) {\n        this.logger.warn(`Event Reporting - Browser failed to queue beacon data ${beaconData}`);\n      }\n    } catch (error) {\n      this.logger.warn(\n        `Event Reporting - Sending beacon data ${beaconData} failed with error ${error}`\n      );\n    }\n  }\n\n  private reset(): void {\n    this.maxBufferCapacityBytes = 0;\n    this.totalBufferItems = 0;\n    this.buffer = [];\n    this.bufferSize = 0;\n    this.maxBufferItemCapacityBytes = 0;\n    this.ingestionEventSize = 0;\n    this.flushIntervalMs = 0;\n    this.flushSize = 0;\n    this.failedIngestionEvents = [];\n    this.lock = false;\n    this.beaconEventListener = undefined;\n    this.cancellableEvents.clear();\n  }\n\n  async destroy(): Promise<void> {\n    this.stop();\n    this.reset();\n  }\n}\n"]}