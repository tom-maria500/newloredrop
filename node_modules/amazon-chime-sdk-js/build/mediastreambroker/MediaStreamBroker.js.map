{"version":3,"file":"MediaStreamBroker.js","sourceRoot":"","sources":["../../src/mediastreambroker/MediaStreamBroker.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport MediaStreamBrokerObserver from '../mediastreambrokerobserver/MediaStreamBrokerObserver';\n\n/**\n * Media controllers acquire media streams from the [[MediaStreamBroker]], which\n * fulfills the requests either through direct getUserMedia requests or a\n * higher-level intermediary such as a [[DeviceController]].\n */\nexport default interface MediaStreamBroker {\n  /**\n   * Called when the session needs to attach an audio input to the peer\n   * connection.\n   */\n  acquireAudioInputStream(): Promise<MediaStream>;\n\n  /**\n   * Called when the session needs to attach a video input to the peer\n   * connection.\n   */\n  acquireVideoInputStream(): Promise<MediaStream>;\n\n  /**\n   * Called when the session needs to acquire a display input device for screen sharing.\n   */\n  acquireDisplayInputStream(streamConstraints: MediaStreamConstraints): Promise<MediaStream>;\n\n  /**\n   * Mute the current active local audio input stream.\n   */\n  muteLocalAudioInputStream(): void;\n\n  /**\n   * Unmute the current active local audio input\n   */\n  unmuteLocalAudioInputStream(): void;\n\n  /**\n   * Add a media stream broker observer to receive events when input/output streams change\n   * @param observer The observer to be added\n   */\n  addMediaStreamBrokerObserver(observer: MediaStreamBrokerObserver): void;\n\n  /**\n   * Remove a media stream broker observer to stop receiving events when input/output streams change\n   * @param observer The observer to be removed\n   */\n  removeMediaStreamBrokerObserver(observer: MediaStreamBrokerObserver): void;\n}\n"]}