import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { ChimeSDKMessagingClient } from "./ChimeSDKMessagingClient";
import {
  AssociateChannelFlowCommandInput,
  AssociateChannelFlowCommandOutput,
} from "./commands/AssociateChannelFlowCommand";
import {
  BatchCreateChannelMembershipCommandInput,
  BatchCreateChannelMembershipCommandOutput,
} from "./commands/BatchCreateChannelMembershipCommand";
import {
  ChannelFlowCallbackCommandInput,
  ChannelFlowCallbackCommandOutput,
} from "./commands/ChannelFlowCallbackCommand";
import {
  CreateChannelBanCommandInput,
  CreateChannelBanCommandOutput,
} from "./commands/CreateChannelBanCommand";
import {
  CreateChannelCommandInput,
  CreateChannelCommandOutput,
} from "./commands/CreateChannelCommand";
import {
  CreateChannelFlowCommandInput,
  CreateChannelFlowCommandOutput,
} from "./commands/CreateChannelFlowCommand";
import {
  CreateChannelMembershipCommandInput,
  CreateChannelMembershipCommandOutput,
} from "./commands/CreateChannelMembershipCommand";
import {
  CreateChannelModeratorCommandInput,
  CreateChannelModeratorCommandOutput,
} from "./commands/CreateChannelModeratorCommand";
import {
  DeleteChannelBanCommandInput,
  DeleteChannelBanCommandOutput,
} from "./commands/DeleteChannelBanCommand";
import {
  DeleteChannelCommandInput,
  DeleteChannelCommandOutput,
} from "./commands/DeleteChannelCommand";
import {
  DeleteChannelFlowCommandInput,
  DeleteChannelFlowCommandOutput,
} from "./commands/DeleteChannelFlowCommand";
import {
  DeleteChannelMembershipCommandInput,
  DeleteChannelMembershipCommandOutput,
} from "./commands/DeleteChannelMembershipCommand";
import {
  DeleteChannelMessageCommandInput,
  DeleteChannelMessageCommandOutput,
} from "./commands/DeleteChannelMessageCommand";
import {
  DeleteChannelModeratorCommandInput,
  DeleteChannelModeratorCommandOutput,
} from "./commands/DeleteChannelModeratorCommand";
import {
  DeleteMessagingStreamingConfigurationsCommandInput,
  DeleteMessagingStreamingConfigurationsCommandOutput,
} from "./commands/DeleteMessagingStreamingConfigurationsCommand";
import {
  DescribeChannelBanCommandInput,
  DescribeChannelBanCommandOutput,
} from "./commands/DescribeChannelBanCommand";
import {
  DescribeChannelCommandInput,
  DescribeChannelCommandOutput,
} from "./commands/DescribeChannelCommand";
import {
  DescribeChannelFlowCommandInput,
  DescribeChannelFlowCommandOutput,
} from "./commands/DescribeChannelFlowCommand";
import {
  DescribeChannelMembershipCommandInput,
  DescribeChannelMembershipCommandOutput,
} from "./commands/DescribeChannelMembershipCommand";
import {
  DescribeChannelMembershipForAppInstanceUserCommandInput,
  DescribeChannelMembershipForAppInstanceUserCommandOutput,
} from "./commands/DescribeChannelMembershipForAppInstanceUserCommand";
import {
  DescribeChannelModeratedByAppInstanceUserCommandInput,
  DescribeChannelModeratedByAppInstanceUserCommandOutput,
} from "./commands/DescribeChannelModeratedByAppInstanceUserCommand";
import {
  DescribeChannelModeratorCommandInput,
  DescribeChannelModeratorCommandOutput,
} from "./commands/DescribeChannelModeratorCommand";
import {
  DisassociateChannelFlowCommandInput,
  DisassociateChannelFlowCommandOutput,
} from "./commands/DisassociateChannelFlowCommand";
import {
  GetChannelMembershipPreferencesCommandInput,
  GetChannelMembershipPreferencesCommandOutput,
} from "./commands/GetChannelMembershipPreferencesCommand";
import {
  GetChannelMessageCommandInput,
  GetChannelMessageCommandOutput,
} from "./commands/GetChannelMessageCommand";
import {
  GetChannelMessageStatusCommandInput,
  GetChannelMessageStatusCommandOutput,
} from "./commands/GetChannelMessageStatusCommand";
import {
  GetMessagingSessionEndpointCommandInput,
  GetMessagingSessionEndpointCommandOutput,
} from "./commands/GetMessagingSessionEndpointCommand";
import {
  GetMessagingStreamingConfigurationsCommandInput,
  GetMessagingStreamingConfigurationsCommandOutput,
} from "./commands/GetMessagingStreamingConfigurationsCommand";
import {
  ListChannelBansCommandInput,
  ListChannelBansCommandOutput,
} from "./commands/ListChannelBansCommand";
import {
  ListChannelFlowsCommandInput,
  ListChannelFlowsCommandOutput,
} from "./commands/ListChannelFlowsCommand";
import {
  ListChannelMembershipsCommandInput,
  ListChannelMembershipsCommandOutput,
} from "./commands/ListChannelMembershipsCommand";
import {
  ListChannelMembershipsForAppInstanceUserCommandInput,
  ListChannelMembershipsForAppInstanceUserCommandOutput,
} from "./commands/ListChannelMembershipsForAppInstanceUserCommand";
import {
  ListChannelMessagesCommandInput,
  ListChannelMessagesCommandOutput,
} from "./commands/ListChannelMessagesCommand";
import {
  ListChannelModeratorsCommandInput,
  ListChannelModeratorsCommandOutput,
} from "./commands/ListChannelModeratorsCommand";
import {
  ListChannelsAssociatedWithChannelFlowCommandInput,
  ListChannelsAssociatedWithChannelFlowCommandOutput,
} from "./commands/ListChannelsAssociatedWithChannelFlowCommand";
import {
  ListChannelsCommandInput,
  ListChannelsCommandOutput,
} from "./commands/ListChannelsCommand";
import {
  ListChannelsModeratedByAppInstanceUserCommandInput,
  ListChannelsModeratedByAppInstanceUserCommandOutput,
} from "./commands/ListChannelsModeratedByAppInstanceUserCommand";
import {
  ListSubChannelsCommandInput,
  ListSubChannelsCommandOutput,
} from "./commands/ListSubChannelsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  PutChannelExpirationSettingsCommandInput,
  PutChannelExpirationSettingsCommandOutput,
} from "./commands/PutChannelExpirationSettingsCommand";
import {
  PutChannelMembershipPreferencesCommandInput,
  PutChannelMembershipPreferencesCommandOutput,
} from "./commands/PutChannelMembershipPreferencesCommand";
import {
  PutMessagingStreamingConfigurationsCommandInput,
  PutMessagingStreamingConfigurationsCommandOutput,
} from "./commands/PutMessagingStreamingConfigurationsCommand";
import {
  RedactChannelMessageCommandInput,
  RedactChannelMessageCommandOutput,
} from "./commands/RedactChannelMessageCommand";
import {
  SearchChannelsCommandInput,
  SearchChannelsCommandOutput,
} from "./commands/SearchChannelsCommand";
import {
  SendChannelMessageCommandInput,
  SendChannelMessageCommandOutput,
} from "./commands/SendChannelMessageCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateChannelCommandInput,
  UpdateChannelCommandOutput,
} from "./commands/UpdateChannelCommand";
import {
  UpdateChannelFlowCommandInput,
  UpdateChannelFlowCommandOutput,
} from "./commands/UpdateChannelFlowCommand";
import {
  UpdateChannelMessageCommandInput,
  UpdateChannelMessageCommandOutput,
} from "./commands/UpdateChannelMessageCommand";
import {
  UpdateChannelReadMarkerCommandInput,
  UpdateChannelReadMarkerCommandOutput,
} from "./commands/UpdateChannelReadMarkerCommand";
export interface ChimeSDKMessaging {
  associateChannelFlow(
    args: AssociateChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AssociateChannelFlowCommandOutput>;
  associateChannelFlow(
    args: AssociateChannelFlowCommandInput,
    cb: (err: any, data?: AssociateChannelFlowCommandOutput) => void
  ): void;
  associateChannelFlow(
    args: AssociateChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AssociateChannelFlowCommandOutput) => void
  ): void;
  batchCreateChannelMembership(
    args: BatchCreateChannelMembershipCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<BatchCreateChannelMembershipCommandOutput>;
  batchCreateChannelMembership(
    args: BatchCreateChannelMembershipCommandInput,
    cb: (err: any, data?: BatchCreateChannelMembershipCommandOutput) => void
  ): void;
  batchCreateChannelMembership(
    args: BatchCreateChannelMembershipCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: BatchCreateChannelMembershipCommandOutput) => void
  ): void;
  channelFlowCallback(
    args: ChannelFlowCallbackCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ChannelFlowCallbackCommandOutput>;
  channelFlowCallback(
    args: ChannelFlowCallbackCommandInput,
    cb: (err: any, data?: ChannelFlowCallbackCommandOutput) => void
  ): void;
  channelFlowCallback(
    args: ChannelFlowCallbackCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ChannelFlowCallbackCommandOutput) => void
  ): void;
  createChannel(
    args: CreateChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelCommandOutput>;
  createChannel(
    args: CreateChannelCommandInput,
    cb: (err: any, data?: CreateChannelCommandOutput) => void
  ): void;
  createChannel(
    args: CreateChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelCommandOutput) => void
  ): void;
  createChannelBan(
    args: CreateChannelBanCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelBanCommandOutput>;
  createChannelBan(
    args: CreateChannelBanCommandInput,
    cb: (err: any, data?: CreateChannelBanCommandOutput) => void
  ): void;
  createChannelBan(
    args: CreateChannelBanCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelBanCommandOutput) => void
  ): void;
  createChannelFlow(
    args: CreateChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelFlowCommandOutput>;
  createChannelFlow(
    args: CreateChannelFlowCommandInput,
    cb: (err: any, data?: CreateChannelFlowCommandOutput) => void
  ): void;
  createChannelFlow(
    args: CreateChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelFlowCommandOutput) => void
  ): void;
  createChannelMembership(
    args: CreateChannelMembershipCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelMembershipCommandOutput>;
  createChannelMembership(
    args: CreateChannelMembershipCommandInput,
    cb: (err: any, data?: CreateChannelMembershipCommandOutput) => void
  ): void;
  createChannelMembership(
    args: CreateChannelMembershipCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelMembershipCommandOutput) => void
  ): void;
  createChannelModerator(
    args: CreateChannelModeratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelModeratorCommandOutput>;
  createChannelModerator(
    args: CreateChannelModeratorCommandInput,
    cb: (err: any, data?: CreateChannelModeratorCommandOutput) => void
  ): void;
  createChannelModerator(
    args: CreateChannelModeratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelModeratorCommandOutput) => void
  ): void;
  deleteChannel(
    args: DeleteChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelCommandOutput>;
  deleteChannel(
    args: DeleteChannelCommandInput,
    cb: (err: any, data?: DeleteChannelCommandOutput) => void
  ): void;
  deleteChannel(
    args: DeleteChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelCommandOutput) => void
  ): void;
  deleteChannelBan(
    args: DeleteChannelBanCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelBanCommandOutput>;
  deleteChannelBan(
    args: DeleteChannelBanCommandInput,
    cb: (err: any, data?: DeleteChannelBanCommandOutput) => void
  ): void;
  deleteChannelBan(
    args: DeleteChannelBanCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelBanCommandOutput) => void
  ): void;
  deleteChannelFlow(
    args: DeleteChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelFlowCommandOutput>;
  deleteChannelFlow(
    args: DeleteChannelFlowCommandInput,
    cb: (err: any, data?: DeleteChannelFlowCommandOutput) => void
  ): void;
  deleteChannelFlow(
    args: DeleteChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelFlowCommandOutput) => void
  ): void;
  deleteChannelMembership(
    args: DeleteChannelMembershipCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelMembershipCommandOutput>;
  deleteChannelMembership(
    args: DeleteChannelMembershipCommandInput,
    cb: (err: any, data?: DeleteChannelMembershipCommandOutput) => void
  ): void;
  deleteChannelMembership(
    args: DeleteChannelMembershipCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelMembershipCommandOutput) => void
  ): void;
  deleteChannelMessage(
    args: DeleteChannelMessageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelMessageCommandOutput>;
  deleteChannelMessage(
    args: DeleteChannelMessageCommandInput,
    cb: (err: any, data?: DeleteChannelMessageCommandOutput) => void
  ): void;
  deleteChannelMessage(
    args: DeleteChannelMessageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelMessageCommandOutput) => void
  ): void;
  deleteChannelModerator(
    args: DeleteChannelModeratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelModeratorCommandOutput>;
  deleteChannelModerator(
    args: DeleteChannelModeratorCommandInput,
    cb: (err: any, data?: DeleteChannelModeratorCommandOutput) => void
  ): void;
  deleteChannelModerator(
    args: DeleteChannelModeratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelModeratorCommandOutput) => void
  ): void;
  deleteMessagingStreamingConfigurations(
    args: DeleteMessagingStreamingConfigurationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteMessagingStreamingConfigurationsCommandOutput>;
  deleteMessagingStreamingConfigurations(
    args: DeleteMessagingStreamingConfigurationsCommandInput,
    cb: (
      err: any,
      data?: DeleteMessagingStreamingConfigurationsCommandOutput
    ) => void
  ): void;
  deleteMessagingStreamingConfigurations(
    args: DeleteMessagingStreamingConfigurationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DeleteMessagingStreamingConfigurationsCommandOutput
    ) => void
  ): void;
  describeChannel(
    args: DescribeChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelCommandOutput>;
  describeChannel(
    args: DescribeChannelCommandInput,
    cb: (err: any, data?: DescribeChannelCommandOutput) => void
  ): void;
  describeChannel(
    args: DescribeChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeChannelCommandOutput) => void
  ): void;
  describeChannelBan(
    args: DescribeChannelBanCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelBanCommandOutput>;
  describeChannelBan(
    args: DescribeChannelBanCommandInput,
    cb: (err: any, data?: DescribeChannelBanCommandOutput) => void
  ): void;
  describeChannelBan(
    args: DescribeChannelBanCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeChannelBanCommandOutput) => void
  ): void;
  describeChannelFlow(
    args: DescribeChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelFlowCommandOutput>;
  describeChannelFlow(
    args: DescribeChannelFlowCommandInput,
    cb: (err: any, data?: DescribeChannelFlowCommandOutput) => void
  ): void;
  describeChannelFlow(
    args: DescribeChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeChannelFlowCommandOutput) => void
  ): void;
  describeChannelMembership(
    args: DescribeChannelMembershipCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelMembershipCommandOutput>;
  describeChannelMembership(
    args: DescribeChannelMembershipCommandInput,
    cb: (err: any, data?: DescribeChannelMembershipCommandOutput) => void
  ): void;
  describeChannelMembership(
    args: DescribeChannelMembershipCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeChannelMembershipCommandOutput) => void
  ): void;
  describeChannelMembershipForAppInstanceUser(
    args: DescribeChannelMembershipForAppInstanceUserCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelMembershipForAppInstanceUserCommandOutput>;
  describeChannelMembershipForAppInstanceUser(
    args: DescribeChannelMembershipForAppInstanceUserCommandInput,
    cb: (
      err: any,
      data?: DescribeChannelMembershipForAppInstanceUserCommandOutput
    ) => void
  ): void;
  describeChannelMembershipForAppInstanceUser(
    args: DescribeChannelMembershipForAppInstanceUserCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DescribeChannelMembershipForAppInstanceUserCommandOutput
    ) => void
  ): void;
  describeChannelModeratedByAppInstanceUser(
    args: DescribeChannelModeratedByAppInstanceUserCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelModeratedByAppInstanceUserCommandOutput>;
  describeChannelModeratedByAppInstanceUser(
    args: DescribeChannelModeratedByAppInstanceUserCommandInput,
    cb: (
      err: any,
      data?: DescribeChannelModeratedByAppInstanceUserCommandOutput
    ) => void
  ): void;
  describeChannelModeratedByAppInstanceUser(
    args: DescribeChannelModeratedByAppInstanceUserCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DescribeChannelModeratedByAppInstanceUserCommandOutput
    ) => void
  ): void;
  describeChannelModerator(
    args: DescribeChannelModeratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelModeratorCommandOutput>;
  describeChannelModerator(
    args: DescribeChannelModeratorCommandInput,
    cb: (err: any, data?: DescribeChannelModeratorCommandOutput) => void
  ): void;
  describeChannelModerator(
    args: DescribeChannelModeratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeChannelModeratorCommandOutput) => void
  ): void;
  disassociateChannelFlow(
    args: DisassociateChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisassociateChannelFlowCommandOutput>;
  disassociateChannelFlow(
    args: DisassociateChannelFlowCommandInput,
    cb: (err: any, data?: DisassociateChannelFlowCommandOutput) => void
  ): void;
  disassociateChannelFlow(
    args: DisassociateChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DisassociateChannelFlowCommandOutput) => void
  ): void;
  getChannelMembershipPreferences(
    args: GetChannelMembershipPreferencesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetChannelMembershipPreferencesCommandOutput>;
  getChannelMembershipPreferences(
    args: GetChannelMembershipPreferencesCommandInput,
    cb: (err: any, data?: GetChannelMembershipPreferencesCommandOutput) => void
  ): void;
  getChannelMembershipPreferences(
    args: GetChannelMembershipPreferencesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetChannelMembershipPreferencesCommandOutput) => void
  ): void;
  getChannelMessage(
    args: GetChannelMessageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetChannelMessageCommandOutput>;
  getChannelMessage(
    args: GetChannelMessageCommandInput,
    cb: (err: any, data?: GetChannelMessageCommandOutput) => void
  ): void;
  getChannelMessage(
    args: GetChannelMessageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetChannelMessageCommandOutput) => void
  ): void;
  getChannelMessageStatus(
    args: GetChannelMessageStatusCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetChannelMessageStatusCommandOutput>;
  getChannelMessageStatus(
    args: GetChannelMessageStatusCommandInput,
    cb: (err: any, data?: GetChannelMessageStatusCommandOutput) => void
  ): void;
  getChannelMessageStatus(
    args: GetChannelMessageStatusCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetChannelMessageStatusCommandOutput) => void
  ): void;
  getMessagingSessionEndpoint(): Promise<GetMessagingSessionEndpointCommandOutput>;
  getMessagingSessionEndpoint(
    args: GetMessagingSessionEndpointCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetMessagingSessionEndpointCommandOutput>;
  getMessagingSessionEndpoint(
    args: GetMessagingSessionEndpointCommandInput,
    cb: (err: any, data?: GetMessagingSessionEndpointCommandOutput) => void
  ): void;
  getMessagingSessionEndpoint(
    args: GetMessagingSessionEndpointCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetMessagingSessionEndpointCommandOutput) => void
  ): void;
  getMessagingStreamingConfigurations(
    args: GetMessagingStreamingConfigurationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetMessagingStreamingConfigurationsCommandOutput>;
  getMessagingStreamingConfigurations(
    args: GetMessagingStreamingConfigurationsCommandInput,
    cb: (
      err: any,
      data?: GetMessagingStreamingConfigurationsCommandOutput
    ) => void
  ): void;
  getMessagingStreamingConfigurations(
    args: GetMessagingStreamingConfigurationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: GetMessagingStreamingConfigurationsCommandOutput
    ) => void
  ): void;
  listChannelBans(
    args: ListChannelBansCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelBansCommandOutput>;
  listChannelBans(
    args: ListChannelBansCommandInput,
    cb: (err: any, data?: ListChannelBansCommandOutput) => void
  ): void;
  listChannelBans(
    args: ListChannelBansCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelBansCommandOutput) => void
  ): void;
  listChannelFlows(
    args: ListChannelFlowsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelFlowsCommandOutput>;
  listChannelFlows(
    args: ListChannelFlowsCommandInput,
    cb: (err: any, data?: ListChannelFlowsCommandOutput) => void
  ): void;
  listChannelFlows(
    args: ListChannelFlowsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelFlowsCommandOutput) => void
  ): void;
  listChannelMemberships(
    args: ListChannelMembershipsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelMembershipsCommandOutput>;
  listChannelMemberships(
    args: ListChannelMembershipsCommandInput,
    cb: (err: any, data?: ListChannelMembershipsCommandOutput) => void
  ): void;
  listChannelMemberships(
    args: ListChannelMembershipsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelMembershipsCommandOutput) => void
  ): void;
  listChannelMembershipsForAppInstanceUser(
    args: ListChannelMembershipsForAppInstanceUserCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelMembershipsForAppInstanceUserCommandOutput>;
  listChannelMembershipsForAppInstanceUser(
    args: ListChannelMembershipsForAppInstanceUserCommandInput,
    cb: (
      err: any,
      data?: ListChannelMembershipsForAppInstanceUserCommandOutput
    ) => void
  ): void;
  listChannelMembershipsForAppInstanceUser(
    args: ListChannelMembershipsForAppInstanceUserCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListChannelMembershipsForAppInstanceUserCommandOutput
    ) => void
  ): void;
  listChannelMessages(
    args: ListChannelMessagesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelMessagesCommandOutput>;
  listChannelMessages(
    args: ListChannelMessagesCommandInput,
    cb: (err: any, data?: ListChannelMessagesCommandOutput) => void
  ): void;
  listChannelMessages(
    args: ListChannelMessagesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelMessagesCommandOutput) => void
  ): void;
  listChannelModerators(
    args: ListChannelModeratorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelModeratorsCommandOutput>;
  listChannelModerators(
    args: ListChannelModeratorsCommandInput,
    cb: (err: any, data?: ListChannelModeratorsCommandOutput) => void
  ): void;
  listChannelModerators(
    args: ListChannelModeratorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelModeratorsCommandOutput) => void
  ): void;
  listChannels(
    args: ListChannelsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelsCommandOutput>;
  listChannels(
    args: ListChannelsCommandInput,
    cb: (err: any, data?: ListChannelsCommandOutput) => void
  ): void;
  listChannels(
    args: ListChannelsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelsCommandOutput) => void
  ): void;
  listChannelsAssociatedWithChannelFlow(
    args: ListChannelsAssociatedWithChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelsAssociatedWithChannelFlowCommandOutput>;
  listChannelsAssociatedWithChannelFlow(
    args: ListChannelsAssociatedWithChannelFlowCommandInput,
    cb: (
      err: any,
      data?: ListChannelsAssociatedWithChannelFlowCommandOutput
    ) => void
  ): void;
  listChannelsAssociatedWithChannelFlow(
    args: ListChannelsAssociatedWithChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListChannelsAssociatedWithChannelFlowCommandOutput
    ) => void
  ): void;
  listChannelsModeratedByAppInstanceUser(
    args: ListChannelsModeratedByAppInstanceUserCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelsModeratedByAppInstanceUserCommandOutput>;
  listChannelsModeratedByAppInstanceUser(
    args: ListChannelsModeratedByAppInstanceUserCommandInput,
    cb: (
      err: any,
      data?: ListChannelsModeratedByAppInstanceUserCommandOutput
    ) => void
  ): void;
  listChannelsModeratedByAppInstanceUser(
    args: ListChannelsModeratedByAppInstanceUserCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListChannelsModeratedByAppInstanceUserCommandOutput
    ) => void
  ): void;
  listSubChannels(
    args: ListSubChannelsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListSubChannelsCommandOutput>;
  listSubChannels(
    args: ListSubChannelsCommandInput,
    cb: (err: any, data?: ListSubChannelsCommandOutput) => void
  ): void;
  listSubChannels(
    args: ListSubChannelsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListSubChannelsCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  putChannelExpirationSettings(
    args: PutChannelExpirationSettingsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutChannelExpirationSettingsCommandOutput>;
  putChannelExpirationSettings(
    args: PutChannelExpirationSettingsCommandInput,
    cb: (err: any, data?: PutChannelExpirationSettingsCommandOutput) => void
  ): void;
  putChannelExpirationSettings(
    args: PutChannelExpirationSettingsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutChannelExpirationSettingsCommandOutput) => void
  ): void;
  putChannelMembershipPreferences(
    args: PutChannelMembershipPreferencesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutChannelMembershipPreferencesCommandOutput>;
  putChannelMembershipPreferences(
    args: PutChannelMembershipPreferencesCommandInput,
    cb: (err: any, data?: PutChannelMembershipPreferencesCommandOutput) => void
  ): void;
  putChannelMembershipPreferences(
    args: PutChannelMembershipPreferencesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutChannelMembershipPreferencesCommandOutput) => void
  ): void;
  putMessagingStreamingConfigurations(
    args: PutMessagingStreamingConfigurationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutMessagingStreamingConfigurationsCommandOutput>;
  putMessagingStreamingConfigurations(
    args: PutMessagingStreamingConfigurationsCommandInput,
    cb: (
      err: any,
      data?: PutMessagingStreamingConfigurationsCommandOutput
    ) => void
  ): void;
  putMessagingStreamingConfigurations(
    args: PutMessagingStreamingConfigurationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: PutMessagingStreamingConfigurationsCommandOutput
    ) => void
  ): void;
  redactChannelMessage(
    args: RedactChannelMessageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RedactChannelMessageCommandOutput>;
  redactChannelMessage(
    args: RedactChannelMessageCommandInput,
    cb: (err: any, data?: RedactChannelMessageCommandOutput) => void
  ): void;
  redactChannelMessage(
    args: RedactChannelMessageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RedactChannelMessageCommandOutput) => void
  ): void;
  searchChannels(
    args: SearchChannelsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SearchChannelsCommandOutput>;
  searchChannels(
    args: SearchChannelsCommandInput,
    cb: (err: any, data?: SearchChannelsCommandOutput) => void
  ): void;
  searchChannels(
    args: SearchChannelsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SearchChannelsCommandOutput) => void
  ): void;
  sendChannelMessage(
    args: SendChannelMessageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SendChannelMessageCommandOutput>;
  sendChannelMessage(
    args: SendChannelMessageCommandInput,
    cb: (err: any, data?: SendChannelMessageCommandOutput) => void
  ): void;
  sendChannelMessage(
    args: SendChannelMessageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SendChannelMessageCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateChannel(
    args: UpdateChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateChannelCommandOutput>;
  updateChannel(
    args: UpdateChannelCommandInput,
    cb: (err: any, data?: UpdateChannelCommandOutput) => void
  ): void;
  updateChannel(
    args: UpdateChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateChannelCommandOutput) => void
  ): void;
  updateChannelFlow(
    args: UpdateChannelFlowCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateChannelFlowCommandOutput>;
  updateChannelFlow(
    args: UpdateChannelFlowCommandInput,
    cb: (err: any, data?: UpdateChannelFlowCommandOutput) => void
  ): void;
  updateChannelFlow(
    args: UpdateChannelFlowCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateChannelFlowCommandOutput) => void
  ): void;
  updateChannelMessage(
    args: UpdateChannelMessageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateChannelMessageCommandOutput>;
  updateChannelMessage(
    args: UpdateChannelMessageCommandInput,
    cb: (err: any, data?: UpdateChannelMessageCommandOutput) => void
  ): void;
  updateChannelMessage(
    args: UpdateChannelMessageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateChannelMessageCommandOutput) => void
  ): void;
  updateChannelReadMarker(
    args: UpdateChannelReadMarkerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateChannelReadMarkerCommandOutput>;
  updateChannelReadMarker(
    args: UpdateChannelReadMarkerCommandInput,
    cb: (err: any, data?: UpdateChannelReadMarkerCommandOutput) => void
  ): void;
  updateChannelReadMarker(
    args: UpdateChannelReadMarkerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateChannelReadMarkerCommandOutput) => void
  ): void;
}
export declare class ChimeSDKMessaging
  extends ChimeSDKMessagingClient
  implements ChimeSDKMessaging {}
